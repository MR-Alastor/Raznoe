<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="45">
  <CheatEntries>
    <CheatEntry>
      <ID>113</ID>
      <Description>"• ВКЛЮЧИТЬ •"</Description>
      <Options moAlwaysHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
      <Color>3C3CFF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
{
  Game:          helldivers2.exe
  Version:       1.002.005
  Author:        MEOWSISI || MIAUSISI
  Date:          2025-01-14
  Table Version: 3.2.0

  [UNOFFICIAL] Weapon's Balance Patch.
  This script contains:
  - All required functions and values to work properly.
  - Please, DO NOT CHANGE ANYTHING FROM THIS SECTION (and their branches).
  ==&gt; You **WILL** BREAK YOUR GAME, and ALERT THE DEVELOPERS!!!
      - I won't be responsible for any ban that they apply to your account.
      - I have coded all these functions to avoid being detected:
          - Any CHANGE on the FUNCTIONS **WILL** raise an alarm to their servers.
          - They may not act now, but you will be traced sooner or later.
          - Don't go whining to me if you are caught: you are warned.

  - On the other hand, you are free to change all of the weapon values
    as you wish! (Of course, don't overtweak the values, or you will
    raise suspicions).
}

{$lua}
registerSymbol("wpnsdamage_anchor_address", '[game.dll + 02123B28]')
registerSymbol("projectile_anchor_address", '[game.dll + 02125098]')
registerSymbol("status_eff_anchor_address", '[game.dll + 021236E8]')
registerSymbol("explosives_anchor_address", '[game.dll + 021284F8]')
registerSymbol("beamweapns_anchor_address", '[game.dll + 021252B0]')
registerSymbol("arcwpn_anchor_address",     '[game.dll + 021239F0]')
registerSymbol("psvbns_anchor_address",     '[[game.dll + 01AA4E08] + A8] + 1C')


registerSymbol("strgm_supp_turret_address_pt1", '[game.dll + 02127308]')
registerSymbol("stratagem_weapons_address_pt1", '[game.dll + 02127140]')
registerSymbol("strgm_eaglestrike_address_pt1", '[game.dll + 02127160]')
registerSymbol("stratgem_autotrrt_address_pt1", '[game.dll + 02127218]')
registerSymbol("stratgem_backpack_address_pt1", '[game.dll + 021272F0]')
registerSymbol("stratagrm_orbital_address_pt1", '[game.dll + 02127358]')
registerSymbol("stratagrm_carmecs_address_pt1", '[game.dll + 02127310]')



registerSymbol("CountProjWpnCompData",  '[["game.dll"+01AA4F20] + 6DF8]')
registerSymbol("TagsLoadoutCompntData", '[["game.dll"+01AA4F20] + 66D8] + 10')
registerSymbol("CountBombardCompData",  '[["game.dll"+01AA4F20] + 6B20] + 30')
registerSymbol("CountWpnMagazineData",  '[["game.dll"+01AA4F20] + 6658]')
registerSymbol("CountWpnRludCompData",  '[["game.dll"+01AA4F20] + 69B0]')
registerSymbol("CountWpnRndsCompData",  '[["game.dll"+01AA4F20] + 69D0]')
registerSymbol("EntityDeltas00",        '[["game.dll"+01AA4F20] + 5E10]')
registerSymbol("EntityDeltas",          '[["game.dll"+01AA4F20] + 5E10] + 7C')
registerSymbol("ShieldValsCompData",    '[["game.dll"+01AA4F20] + 6918] + 10')
registerSymbol("RechargeCompData",      '[["game.dll"+01AA4F20] + 6940]')
registerSymbol("CountWpnDataCompData",  '[["game.dll"+01AA4F20] + 6CF8]')
registerSymbol("CountWpnCstmCompData",  '[["game.dll"+01AA4F20] + 6E10] + 40')
registerSymbol("CountHealthCompData",   '[["game.dll"+01AA4F20] + 6CA8] + 10')
registerSymbol("CountWpnHeatCompData",  '[["game.dll"+01AA4F20] + 6DD0] + 10')
registerSymbol("CountWpnArcCompData",   '[["game.dll"+01AA4F20] + 6DD8]')
registerSymbol("CountBeamCompData",     '[["game.dll"+01AA4F20] + 6DF0] + 20')
registerSymbol("HPCompData",            '[["game.dll"+01AA4F20] + 6B10]')
--registerSymbol("TextInit",            '[[[["game.dll"+01AA3E70] - BC08] - 5C8] - B110] + 4E40')
--registerSymbol("TextInit2",           '[[[["game.dll"+01AA3F50] + 0000] + 018] - A900] + 4E40')
registerSymbol("UnitCompData",          '[["game.dll"+01AA4F20] + 68E0] + 10')
registerSymbol("AvatarCompData",        '[["game.dll"+01AA4F20] + 6CE0] + 3A0 - 37C')
{$asm}
[DISABLE]

unregisterSymbol(wpnsdamage_anchor_address)
unregisterSymbol(projectile_anchor_address)
unregisterSymbol(status_eff_anchor_address)
unregisterSymbol(explosives_anchor_address)
unregisterSymbol(beamweapns_anchor_address)
unregisterSymbol(CountProjWpnCompData)
unregisterSymbol(TagsLoadoutCompntData)
unregisterSymbol(ShieldValsCompData)
unregisterSymbol(HPCompData)
unregisterSymbol(CountWpnDataCompData)
unregisterSymbol(CountWpnCstmCompData)
unregisterSymbol(CountWpnRndsCompData)
unregisterSymbol(CountWpnRludCompData)
unregisterSymbol(CountWpnHeatCompData)
unregisterSymbol(CountBombardCompData)
unregisterSymbol(RechargeCompData)
unregisterSymbol(CountWpnMagazineData)
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>409</ID>
          <Description>"Preload of variables"</Description>
          <Color>00FFFF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{$lua}

-- //! =============    P R O J E C T I L E    D A T A B A S E    ==============
projectile_database = {}

for chosen_idx = 1, 357 do
    target_projdata = {}
    address_string = string.format("CountProjWpnCompData + 10*%X - 10", chosen_idx)
    address_target = getAddress(getNameFromAddress(address_string))
    proj_unique_id = string.format("%u", readQword(address_target + 0x000))
    if proj_unique_id ~=  string.format("%u", 0) then
        aux_idx     = readInteger(address_target + 0x008)
        projectile_database[aux_idx+1] = proj_unique_id
    end
end


-- //! =============    B O M B A R D M E N T    D A T A B A S E    ============

bombardment_database = {}

for chosen_idx = 1, 31 do
    target_data = {}
    address_string = string.format("CountBombardCompData + 10*%X - 10", chosen_idx)
    address_target = getAddress(getNameFromAddress(address_string))
    unique_id = string.format("%u", readQword(address_target + 0x000))
    if unique_id ~=  string.format("%u", 0) then
        aux_idx        = readInteger(address_target + 0x008)
        bombardment_database[aux_idx+1] = unique_id
    end
end

-- //! ==========    C U S T O M I Z A T I O N     D A T A B A S E    ==========

customization_database = {}

for chosen_idx = 1, 236 do
    target_data = {}
    address_string = string.format("CountWpnCstmCompData + 10*%X - 10", chosen_idx)
    address_target = getAddress(getNameFromAddress(address_string))
    unique_id = string.format("%u", readQword(address_target + 0x000))
    if unique_id ~=  string.format("%u", 0) then
        aux_idx        = readInteger(address_target + 0x008)
        customization_database[aux_idx+1] = unique_id
    end
end

-- //! ===================    H E A T    D A T A B A S E    ====================

heat_database = {}

for chosen_idx = 1, 29 do
    target_data = {}
    address_string = string.format("CountWpnHeatCompData + 10*%X - 10", chosen_idx)
    address_target = getAddress(getNameFromAddress(address_string))
    unique_id = string.format("%u", readQword(address_target + 0x000))
    if unique_id ~=  string.format("%u", 0) then
        aux_idx        = readInteger(address_target + 0x008)
        heat_database[aux_idx+1] = unique_id
    end
end

-- //! =================    M A G A Z I N E    D A T A B A S E    ==============

magazine_database = {}

for chosen_idx = 1, 366 do
    target_data = {}
    address_string = string.format("CountWpnMagazineData + 10*%X - 10", chosen_idx)
    address_target = getAddress(getNameFromAddress(address_string))
    unique_id = string.format("%u", readQword(address_target + 0x000))
    if unique_id ~=  string.format("%u", 0) then
        aux_idx        = readInteger(address_target + 0x008)
        magazine_database[aux_idx+1] = unique_id
    end
end

-- //! =================    R E L O A D    D A T A B A S E    ==================

reload_database = {}

for chosen_idx = 1, 312 do
    target_data = {}
    address_string = string.format("CountWpnRludCompData + 10*%X - 10", chosen_idx)
    address_target = getAddress(getNameFromAddress(address_string))
    unique_id = string.format("%u", readQword(address_target + 0x000))
    if unique_id ~=  string.format("%u", 0) then
        aux_idx        = readInteger(address_target + 0x008)
        reload_database[aux_idx+1] = unique_id
    end
end

-- //! =================    R O U N D S    D A T A B A S E    ==================

rounds_database = {}

for chosen_idx = 1, 24 do
    target_data = {}
    address_string = string.format("CountWpnRndsCompData + 10*%X - 10", chosen_idx)
    address_target = getAddress(getNameFromAddress(address_string))
    unique_id = string.format("%u", readQword(address_target + 0x000))
    if unique_id ~=  string.format("%u", 0) then
        aux_idx        = readInteger(address_target + 0x008)
        rounds_database[aux_idx+1] = unique_id
    end
end

-- //! =================    T A G S    D A T A B A S E    =====================

tags_database = {}

max_val = 0
for chosen_idx = 1, 119 do
    target_data = {}
    address_string = string.format("TagsLoadoutCompntData + 10*%X - 10", chosen_idx)
    address_target = getAddress(getNameFromAddress(address_string))
    unique_id = string.format("%u", readQword(address_target + 0x000))
    if unique_id ~=  string.format("%u", 0) then
        aux_idx        = readInteger(address_target + 0x008)
        tags_database[aux_idx+1] = unique_id
        if aux_idx &gt; max_val then
            max_val = aux_idx + 1
        end
    end
end

-- //! =================    W E A P O N    D A T A B A S E    =================

weapon_database = {}

for chosen_idx = 1, 472 do
    target_data = {}
    address_string = string.format("CountWpnDataCompData + 10*%X - 10", chosen_idx)
    address_target = getAddress(getNameFromAddress(address_string))
    unique_id = string.format("%u", readQword(address_target + 0x000))
    if unique_id ~=  string.format("%u", 0) then
        aux_idx        = readInteger(address_target + 0x008)
        weapon_database[aux_idx+1] = unique_id
    end
end



-- //! =================    U N I T    C O M P O N E N T    =================

unit_database = {}
max_val = 0
for chosen_idx = 1, 1204 do
    target_data = {}
    address_string = string.format("UnitCompData + 10*%X - 10", chosen_idx)
    address_target = getAddress(getNameFromAddress(address_string))

    unique_id = string.format("%u", readQword(address_target + 0x000))
    if unique_id ~=  string.format("%u", 0) then
        aux_idx        = readInteger(address_target + 0x008)
        unit_database[aux_idx+1] = unique_id
        if aux_idx &gt; max_val then
            max_val = aux_idx + 1
        end
    end

end

-- //! =========     H P O D L I F E T I M E   C O M P O N E N T    ===========

hpodlifetime_database = {}
max_val = 0
for chosen_idx = 1, 94 do
    target_data = {}
    address_string = string.format("HpCompData + 10*%X - 10", chosen_idx)
    address_target = getAddress(getNameFromAddress(address_string))

    unique_id = string.format("%u", readQword(address_target + 0x000))
    if unique_id ~=  string.format("%u", 0) then
        aux_idx        = readInteger(address_target + 0x008)
        hpodlifetime_database[aux_idx+1] = unique_id
        if aux_idx &gt; max_val then
            max_val = aux_idx + 1
        end
    end
end


-- //! =========     S H I E L D    C O M P O N E N T    ===========

shield_database = {}
max_val = 0
for chosen_idx = 1, 9 do
    target_data = {}
    address_string = string.format("ShieldValsCompData + 10*%X - 10", chosen_idx)
    address_target = getAddress(getNameFromAddress(address_string))

    unique_id = string.format("%u", readQword(address_target + 0x000))
    if unique_id ~=  string.format("%u", 0) then
        aux_idx        = readInteger(address_target + 0x008)
        shield_database[aux_idx+1] = unique_id
        if aux_idx &gt; max_val then
            max_val = aux_idx + 1
        end
    end
end
-- //! =========     H E A L T H    C O M P O N E N T    ===========

health_database = {}
max_val = 0
for chosen_idx = 1, 356 do
    target_data = {}
    address_string = string.format("CountHealthCompData + 10*%X - 10", chosen_idx)
    address_target = getAddress(getNameFromAddress(address_string))

    unique_id = string.format("%u", readQword(address_target + 0x000))
    if unique_id ~=  string.format("%u", 0) then
        aux_idx        = readInteger(address_target + 0x008)
        health_database[aux_idx+1] = unique_id
        if aux_idx &gt; max_val then
            max_val = aux_idx + 1
        end
    end
end
-- //! =================    U I D    L O C A L I Z A T O R    =================

function UID_Localizator(target_uid, target_database)
    target_uid = string.format("%u", target_uid)
    for idx, uid in pairs(target_database) do
        if uid == target_uid then
            return idx - 1
        end
    end
    return 0
end

{$asm}
[DISABLE]
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>123</ID>
          <Description>"Yggdrasil"</Description>
          <Options moAlwaysHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{
    Game Name:     Helldivers 2
    Game Version:  1.002.003
    Author:        MEOWSISI || MIAUSISI
    Date:          2025-01-04
    Table Version: 3.1.0

    Standard and scanner functions
    ---------------------------------
    -  This section of script is responsible for setting key functions.
    -  It is strongly recommended to NOT change the code below, even if you are
       100% sure of what you are doing.
    -  The script is designed to be used in conjunction with the main balance
       script, so make sure to enable it first.
}
{$lua}

-- //! =========================================================================
-- //! ====================    STANDARD FUNCTIONS    ===========================
-- //! =========================================================================
function AddressHandler(input_index, input_anchor, dec_offset)
    local hex_offset     = string.format("%X", input_index*dec_offset)
    local hex_anchor     = getAddress(getNameFromAddress(input_anchor))
    local output_address = string.format('%X + %s', hex_anchor, hex_offset)
    return output_address
end

function DamageSettingsLocalizator(target_id)
    local output_address = AddressHandler(target_id, "wpnsdamage_anchor_address", 76)
    return output_address
end

function ProjectileSettingsLocalizator(target_id)
    local output_address = AddressHandler(target_id, "projectile_anchor_address", 256)
    return output_address
end

function ExplosiveSettingsLocalizator(target_id)
    local output_address = AddressHandler(target_id, "explosives_anchor_address", 112)
    return output_address
end

function BeamSettingsLocalizator(target_id)
    local output_address = AddressHandler(target_id, "beamweapns_anchor_address", 80)
    return output_address
end

function ArcSettingsLocalizator(target_id)
    local output_address = AddressHandler(target_id, "arcwpn_anchor_address",     96)
    return output_address
end

function StatusEffectLocalizator(target_id)
    local output_address = AddressHandler(target_id, "status_eff_anchor_address",     136)
    return output_address
end

-- //! =========================================================================
-- //! ===================    REPLICATOR FUNCTIONS    ==========================
-- //! =========================================================================
function deepcopy(orig, copies)
    copies = copies or {}
    local orig_type = type(orig)
    local copy
    if orig_type == 'table' then
        if copies[orig] then
            copy = copies[orig]
        else
            copy = {}
            copies[orig] = copy
            for orig_key, orig_value in next, orig, nil do
                copy[deepcopy(orig_key, copies)] = deepcopy(orig_value, copies)
            end
            setmetatable(copy, deepcopy(getmetatable(orig), copies))
        end
    else -- number, string, boolean, etc
        copy = orig
    end
    return copy
end


-- //! =========================================================================
-- //! ====================    SCANNER FUNCTIONS    ============================
-- //! =========================================================================
function ScanForUniqueID_Address(unique_id, initaddress, stopaddress)
    local memscan = createMemScan()
    local targets_found = createFoundList(memscan)
    memscan.firstScan(soExactValue, vtQword, rtRounded,
                      unique_id, nil,
                      getAddress(getNameFromAddress(initaddress)),
                      getAddress(getNameFromAddress(stopaddress)), "*W*X*C",
                      fsmNotAligned, nil,
                      false, false, false, false)
    memscan.waitTillDone()
    targets_found.initialize()

    locked_address = targets_found.Address[0]
    targets_found.destroy()
    memscan.destroy()
    return locked_address
end

{$asm}
[DISABLE]

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>125</ID>
              <Description>"ROOTS"</Description>
              <Options moAlwaysHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
              <Color>808000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{
    Game Name:     Helldivers 2
    Game Version:  1.002.003
    Author:        MEOWSISI || MIAUSISI
    Date:          2025-01-05
    Table Version: 3.1.0

    ANCHOR ADDRESS INITIALIZATION
    -----------------------------
    -  This section of script is responsible for initializing the anchor addresses
       for elements required on their roots.
    -  It is strongly recommended to NOT change the code below, even if you are
       100% sure of what you are doing.
    -  The script is designed to be used in conjunction with the main balance
       script, so make sure to enable it first.
}
{$lua}

registerSymbol("ValuesProjWpnCompData", "CountProjWpnCompData + 1660")
registerSymbol("ValuesWpnRndsCompData", "CountWpnRndsCompData + 0180")
registerSymbol("ValuesWpnRludCompData", "CountWpnRludCompData + 1380")
registerSymbol("ValuesWpnMagazineData", "CountWpnMagazineData + 16E0")
registerSymbol("ValuesWpnHeatCompData", "CountWpnHeatCompData + 01D0")


{$asm}
[DISABLE]

unregisterSymbol(ValuesProjWpnCompData)
unregisterSymbol(ValuesWpnRndsCompData)
unregisterSymbol(ValuesWpnRludCompData)
unregisterSymbol(ValuesWpnHeatCompData)
unregisterSymbol(ValuesWpnMagazineData)

</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>131</ID>
                  <Description>"Helheimr"</Description>
                  <Color>00FFFF</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
    Game Name:     Helldivers 2
    Game Version:  1.002.003
    Author:        MEOWSISI || MIAUSISI
    Date:          2025-01-05
    Table Version: 3.1.0

    Damage Settings
    ---------------
    -  This section of script is responsible for adjusting the damage settings
       of the weapons.
    -  It is strongly recommended to NOT change the code below, even if you are
       100% sure of what you are doing.
    -  The script is designed to be used in conjunction with the main balance
       script, so make sure to enable it first.
}
{$lua}

-- //! =========================================================================
-- //!                    Read &amp;&amp; Apply Damage Settings Data
-- //! =========================================================================
function Read_DamageSettings_Data(damage_idx)
    local target_address = getAddress(DamageSettingsLocalizator(damage_idx))
    local output_template = {
        address    = target_address,
        target_id  = damage_idx,
        damage_std = readInteger(target_address + 0x04),
        damage_drb = readInteger(target_address + 0x08),
        ap_vals    = {ap1 = readInteger(target_address + 0x0C),
                      ap2 = readInteger(target_address + 0x10),
                      ap3 = readInteger(target_address + 0x14),
                      ap4 = readInteger(target_address + 0x18)},
        demolition = readInteger(target_address + 0x1C),
        momentum   = {stagger = readInteger(target_address + 0x20),
                      knkback = readInteger(target_address + 0x24)},
        elem_type  = readInteger(target_address + 0x28),
        stt_eff_1  = {target_type = readInteger(target_address + 0x2C),
                      target_time = readFloat(target_address   + 0x30)},
        stt_eff_2  = {target_type = readInteger(target_address + 0x34),
                      target_time = readFloat(target_address   + 0x38)},
        stt_eff_3  = {target_type = readInteger(target_address + 0x3C),
                      target_time = readFloat(target_address   + 0x40)},
        stt_eff_4  = {target_type = readInteger(target_address + 0x44),
                      target_time = readFloat(target_address   + 0x48)}}
    return {backup = deepcopy(output_template), DATA = deepcopy(output_template)}
end

function Apply_DamageSettings_Modifications(input_mods_table)
    local target_address = input_mods_table.address
    writeInteger(target_address + 0x04, input_mods_table.damage_std)
    writeInteger(target_address + 0x08, input_mods_table.damage_drb)
    writeInteger(target_address + 0x0C, input_mods_table.ap_vals.ap1)
    writeInteger(target_address + 0x10, input_mods_table.ap_vals.ap2)
    writeInteger(target_address + 0x14, input_mods_table.ap_vals.ap3)
    writeInteger(target_address + 0x18, input_mods_table.ap_vals.ap4)
    writeInteger(target_address + 0x1C, input_mods_table.demolition)
    writeInteger(target_address + 0x20, input_mods_table.momentum.stagger)
    writeInteger(target_address + 0x24, input_mods_table.momentum.knkback)
    writeInteger(target_address + 0x28, input_mods_table.elem_type)
    writeInteger(target_address + 0x2C, input_mods_table.stt_eff_1.target_type)
    writeFloat(target_address   + 0x30, input_mods_table.stt_eff_1.target_time)
    writeInteger(target_address + 0x34, input_mods_table.stt_eff_2.target_type)
    writeFloat(target_address   + 0x38, input_mods_table.stt_eff_2.target_time)
    writeInteger(target_address + 0x3C, input_mods_table.stt_eff_3.target_type)
    writeFloat(target_address   + 0x40, input_mods_table.stt_eff_3.target_time)
    writeInteger(target_address + 0x44, input_mods_table.stt_eff_4.target_type)
    writeFloat(target_address   + 0x48, input_mods_table.stt_eff_4.target_time)
end

{$asm}
[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>129</ID>
                  <Description>"Múspellsheimr"</Description>
                  <Color>00FF80</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
    Game Name:     Helldivers 2
    Game Version:  1.002.003
    Author:        MEOWSISI || MIAUSISI
    Date:          2025-01-04
    Table Version: 3.1.0

    Explosive, Beams, ARC &amp;&amp; Heat Settings
    ---------------------------------
    -  This section of script is responsible for adjusting the explosive, beams
       and heat settings of the weapons.
    -  It is strongly recommended to NOT change the code below, even if you are
       100% sure of what you are doing.
    -  The script is designed to be used in conjunction with the main balance
       script, so make sure to enable it first.
}
{$lua}

-- //! =========================================================================
-- //!  ==============    E X P L O S I V E    S E T T I N G S    ==============
-- //! =========================================================================
function Read_ExplosiveSettings_Data(explosion_idx)
    local target_address = getAddress(ExplosiveSettingsLocalizator(explosion_idx))
    local output_template = {
        address        = target_address,
        target_id      = explosion_idx,
        damage_type    = readInteger(target_address + 0x04),
        inner_radius   = readFloat(target_address   + 0x0C),
        outer_radius   = readFloat(target_address   + 0x10),
        stagger_radius = readFloat(target_address   + 0x14)}
    return {backup = deepcopy(output_template), DATA = deepcopy(output_template)}
end

function Apply_ExplosiveSettings_Modifications(input_mods_table)
    local target_address = input_mods_table.address
    writeInteger(target_address + 0x04, input_mods_table.damage_type)
    writeFloat(target_address   + 0x0C, input_mods_table.inner_radius)
    writeFloat(target_address   + 0x10, input_mods_table.outer_radius)
    writeFloat(target_address   + 0x14, input_mods_table.stagger_radius)
end


-- //! =========================================================================
-- //!  ===================     B E A M   S E T T I N G S    ===================
-- //! =========================================================================
function Read_BeamSettings_Data(beam_idx)
    local target_address  = getAddress(BeamSettingsLocalizator(beam_idx))
    local output_template = {
        address          = target_address,
        beam_type        = readInteger(target_address + 0x00),
        radius           = readFloat(target_address   + 0x04),
        length           = readFloat(target_address   + 0x08),
        damage_info_type = readInteger(target_address + 0x0C)}
    return {backup = deepcopy(output_template), DATA = deepcopy(output_template)}
end

function Apply_BeamSettings_Modifications(input_mods_table)
    local target_address = input_mods_table.address
    writeInteger(target_address + 0x00, input_mods_table.beam_type)
    writeFloat(target_address   + 0x04, input_mods_table.radius)
    writeFloat(target_address   + 0x08, input_mods_table.length)
    writeInteger(target_address + 0x0C, input_mods_table.damage_info_type)
end


-- //! =========================================================================
-- //!  =====================    A R C    S E T T I N G S    ===================
-- //! =========================================================================
function Read_ArcSettings_Data(arc_idx)
    local target_address  = getAddress(ArcSettingsLocalizator(arc_idx))
    local output_template = {
        address          = target_address,
        typearc                                 = readInteger(target_address + 0x000),
        speed                                   = readFloat(target_address   + 0x004),
        distance                                = readFloat(target_address   + 0x008),
        distance_at_max_angle_spread            = readFloat(target_address   + 0x00C),
        distance_at_max_angle_spread_first_shot = readFloat(target_address   + 0x010),
        max_angle_spread                        = readFloat(target_address   + 0x014),
        max_angle_spread_first_shot             = readFloat(target_address   + 0x018),
        max_chain_length                        = readInteger(target_address + 0x01C),
        max_chain_split                         = readInteger(target_address + 0x020),
        demolition_strength                     = readInteger(target_address + 0x058)}
    return {backup = deepcopy(output_template), DATA = deepcopy(output_template)}
end

function Apply_ArcSettings_Modifications(input_mods_table)
    local target_address = input_mods_table.address
    writeInteger(target_address + 0x000, input_mods_table.typearc)
    writeFloat(target_address   + 0x004, input_mods_table.speed)
    writeFloat(target_address   + 0x008, input_mods_table.distance)
    writeFloat(target_address   + 0x00C, input_mods_table.distance_at_max_angle_spread)
    writeFloat(target_address   + 0x010, input_mods_table.distance_at_max_angle_spread_first_shot)
    writeFloat(target_address   + 0x014, input_mods_table.max_angle_spread)
    writeFloat(target_address   + 0x018, input_mods_table.max_angle_spread_first_shot)
    writeInteger(target_address + 0x01C, input_mods_table.max_chain_length)
    writeInteger(target_address + 0x020, input_mods_table.max_chain_split)
    writeInteger(target_address + 0x058, input_mods_table.demolition_strength)
end


-- //! =========================================================================
-- //!  ===================     H E A T   S E T T I N G S    ===================
-- //! =========================================================================
function locateHeatAddress(target_unique_id)
    output_idx   = UID_Localizator(target_unique_id, heat_database)
    hex_output   = string.format("%X", output_idx)
    targeto_addr = getAddress(getNameFromAddress("ValuesWpnHeatCompData")) + 0xD8*tonumber(hex_output, 16)
    output_address = string.format("%X", targeto_addr)
    output_info = {idx= output_idx, address= output_address}
    return output_info
end

function Read_HeatSettings_Data(target_unique_id)
    local target_info = locateHeatAddress(target_unique_id)
    local target_address = getAddress(target_info.address)
    fullAccess(target_address, 216)
    local output_template = {
        address                         = target_info.address,
        magazines                       = readInteger(target_address + 0x00),
        magazines_refill                = readInteger(target_address + 0x04),
        magazines_max                   = readInteger(target_address + 0x08),
        overheat_temperature            = readFloat(target_address   + 0x0C),
        overheat_temperature_recover    = readFloat(target_address   + 0x10),
        warning_temperature             = readFloat(target_address   + 0x14),
        emission_temperature            = readFloat(target_address   + 0x18),
        temp_gain_per_shot              = readFloat(target_address   + 0x20),
        temp_gain_per_second            = readFloat(target_address   + 0x24),
        temp_gain_per_second_modifier   = readFloat(target_address   + 0x28),
        temp_loss_per_second            = readFloat(target_address   + 0x2C),
        temp_loss_modifier_extreme_heat = readFloat(target_address   + 0x30),
        temp_loss_modifier_extreme_cold = readFloat(target_address   + 0x34),
        temp_loss_per_second_overheated = readFloat(target_address   + 0x38),
        needs_reload_after_overheat     = readInteger(target_address + 0x3C),
        firing_charge                   = readFloat(target_address   + 0x40),
        charge_gain_per_second          = readFloat(target_address   + 0x44),
        charge_loss_per_second          = readFloat(target_address   + 0x48)}
    return {backup = deepcopy(output_template), DATA = deepcopy(output_template)}
end

function Apply_HeatSettings_Modifications(target_data)
    target_address = getAddress(target_data.address)
    writeInteger(target_address + 0x00, target_data.magazines)
    writeInteger(target_address + 0x04, target_data.magazines_refill)
    writeInteger(target_address + 0x08, target_data.magazines_max)
    writeFloat(target_address   + 0x0C, target_data.overheat_temperature)
    writeFloat(target_address   + 0x10, target_data.overheat_temperature_recover)
    writeFloat(target_address   + 0x14, target_data.warning_temperature)
    writeFloat(target_address   + 0x18, target_data.emission_temperature)
    writeFloat(target_address   + 0x20, target_data.temp_gain_per_shot)
    writeFloat(target_address   + 0x24, target_data.temp_gain_per_second)
    writeFloat(target_address   + 0x28, target_data.temp_gain_per_second_modifier)
    writeFloat(target_address   + 0x2C, target_data.temp_loss_per_second)
    writeFloat(target_address   + 0x30, target_data.temp_loss_modifier_extreme_heat)
    writeFloat(target_address   + 0x34, target_data.temp_loss_modifier_extreme_cold)
    writeFloat(target_address   + 0x38, target_data.temp_loss_per_second_overheated)
    writeInteger(target_address + 0x3C, target_data.needs_reload_after_overheat)
    writeFloat(target_address   + 0x40, target_data.firing_charge)
    writeFloat(target_address   + 0x44, target_data.charge_gain_per_second)
    writeFloat(target_address   + 0x48, target_data.charge_loss_per_second)
end

{$asm}
[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>132</ID>
                  <Description>"Niflheimr"</Description>
                  <Color>C08000</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
    Game Name:     Helldivers 2
    Game Version:  1.002.003
    Author:        MEOWSISI || MIAUSISI
    Date:          2025-01-04
    Table Version: 3.1.0

    Projectile, Ammo, Rounds and Reload Settings
    --------------------------------------------
    -  This section of script is responsible for adjusting the projectile, ammo,
       rounds and reload settings of the weapons.
    -  It is strongly recommended to NOT change the code below, even if you are
       100% sure of what you are doing.
    -  The script is designed to be used in conjunction with the main balance
       script, so make sure to enable it first.
}
{$lua}

-- //! =========================================================================
-- //!  =================     PROJECTILE SETTINGS &amp;&amp; DATA    ===================
-- //! =========================================================================
function LocateProjectileAddress(unique_proj_id)
    output_idx           = UID_Localizator(unique_proj_id, projectile_database)
    hex_output           = string.format("%X", output_idx)
    targeto_addr         = getAddress(getNameFromAddress("ValuesProjWpnCompData")) + 0x170*tonumber(hex_output, 16)
    output_address       = string.format("%X", targeto_addr)
    output_info = {idx = output_idx, address = output_address}
    return output_info
end

function Read_ProjectileInfo_Data(projectile_target_idx, unique_projectile_id)
    local projdata_info     = LocateProjectileAddress(unique_projectile_id)
    local projdata_idx      = projdata_info.idx
    local projdata_address  = getAddress(projdata_info.address)

    local projsettings_address  = getAddress(ProjectileSettingsLocalizator(projectile_target_idx))
    fullAccess(projdata_address, 368)
    proj_template = {
        info = {
            datainfo = {idx     = projdata_idx,
                        address = projdata_address},
            settings = {idx     = projectile_target_idx,
                        address = projsettings_address}},
        ptype = readInteger(projdata_address + 0x000),
        rpm  = {
            x = readFloat(projdata_address + 0x004),
            y = readFloat(projdata_address + 0x008),
            z = readFloat(projdata_address + 0x00C)},
        zeroing  = {
            x = readFloat(projdata_address + 0x010),
            y = readFloat(projdata_address + 0x014),
            z = readFloat(projdata_address + 0x018),
            hipfire = readFloat(projdata_address + 0x01C)},
        inf_ammo              = readInteger(projdata_address     + 0x024),
        speed_mult            = readFloat(projdata_address       + 0x07C),
        muzzle_flash          = readQword(projdata_address       + 0x0E0),
        normal_fire_sound     = readInteger(projdata_address     + 0x104),
        silent_fire_sound     = readInteger(projdata_address     + 0x138),
        silenced              = readInteger(projdata_address     + 0x14C),
        wpn_muzzle_speed      = readFloat(projdata_address       + 0x15C),
        wpn_projcte_type      = readInteger(projdata_address     + 0x160),
        calibre               = readFloat(projsettings_address   + 0x018),
        num_projectiles       = readInteger(projsettings_address + 0x01C),
        speed                 = readFloat(projsettings_address   + 0x020),
        mass                  = readFloat(projsettings_address   + 0x024),
        drag                  = readInteger(projsettings_address + 0x028),
        gravity_multiplier    = readFloat(projsettings_address   + 0x02C),
        life_time             = readFloat(projsettings_address   + 0x034),
        damage_info_type      = readInteger(projsettings_address + 0x03C),
        penetration_slowdown  = readFloat(projsettings_address   + 0x040),
        explosion_proximity   = readInteger(projsettings_address + 0x180),
        explosion_delay       = readFloat(projsettings_address   + 0x184),
        explosion_type_expire = readFloat(projsettings_address   + 0x188),
        effect_damage_type    = readInteger(projsettings_address + 0x1C8)
    }
    return {backup = deepcopy(proj_template), DATA = deepcopy(proj_template)}
end

function ProjectileData_RPM(target_address, target_settings)
    writeInteger(target_address + 0x000, target_settings.ptype)
    writeFloat(target_address + 0x004,   target_settings.rpm.x)
    writeFloat(target_address + 0x008,   target_settings.rpm.y)
    writeFloat(target_address + 0x00C,   target_settings.rpm.z)
end

function ProjectileData_Zeroing(target_address, target_settings)
    writeFloat(target_address + 0x010, target_settings.zeroing.x)
    writeFloat(target_address + 0x014, target_settings.zeroing.y)
    writeFloat(target_address + 0x018, target_settings.zeroing.z)
    writeFloat(target_address + 0x01C, target_settings.zeroing.hipfire)
end

function ProjectileData_ProjData(target_address, target_settings)
    writeInteger(target_address + 0x024, target_settings.inf_ammo)
    writeFloat(target_address   + 0x07C, target_settings.speed_mult)
    writeQword(target_address   + 0x0E0, target_settings.muzzle_flash)
    writeInteger(target_address + 0x104, target_settings.normal_fire_sound)
    writeInteger(target_address + 0x138, target_settings.silent_fire_sound)
    writeInteger(target_address + 0x14C, target_settings.silenced)
    writeFloat(target_address   + 0x15C, target_settings.wpn_muzzle_speed)
    writeInteger(target_address + 0x160, target_settings.wpn_projcte_type)
end

function ProjectileSettings_proj_settings(target_address, target_settings)
    writeFloat(target_address   + 0x18, target_settings.calibre)
    writeInteger(target_address + 0x1C, target_settings.num_projectiles)
    writeFloat(target_address   + 0x20, target_settings.speed)
    writeFloat(target_address   + 0x34, target_settings.life_time)
end

function ProjectileSettings_gravity_settg(target_address, target_settings)
    writeFloat(target_address + 0x24, target_settings.mass)
    writeFloat(target_address + 0x28, target_settings.drag)
    writeFloat(target_address + 0x2C, target_settings.gravity_multiplier)
end


function ProjectileSettings_dmge_slowdown(target_address, target_settings)
        writeInteger(target_address + 0x3C, target_settings.damage_info_type)
        writeFloat(target_address   + 0x40, target_settings.penetration_slowdown)
end

function ProjectileSettings_explosion_set(target_address, target_settings)
        writeInteger(target_address + 0x180, target_settings.explosion_proximity)
        writeFloat(target_address   + 0x184, target_settings.explosion_delay)
        writeFloat(target_address   + 0x188, target_settings.explosion_type_expire)
        writeInteger(target_address + 0x1C8, target_settings.effect_damage_type)
end

function Apply_ProjectileInfo_Modifications(target_settings)
    local target_address = target_settings.info.settings.address
    ProjectileSettings_proj_settings(target_address, target_settings)
    ProjectileSettings_gravity_settg(target_address, target_settings)
    ProjectileSettings_dmge_slowdown(target_address, target_settings)
    ProjectileSettings_explosion_set(target_address, target_settings)

    local target_projdata = target_settings.info.datainfo.address
    ProjectileData_RPM(target_projdata,      target_settings)
    ProjectileData_Zeroing(target_projdata,  target_settings)
    ProjectileData_ProjData(target_projdata, target_settings)
end


-- //! =========================================================================
-- //! =====================     MAGAZINES      ================================
-- //! =========================================================================
function locateWeaponMagazineAddress(target_unique_id)
    output_idx = UID_Localizator(target_unique_id, magazine_database)
    hex_output = string.format("%X", output_idx)
    targeto_addr = getAddress(getNameFromAddress("ValuesWpnMagazineData")) + 0xA0*tonumber(hex_output, 16)
    output_address = string.format("%X", targeto_addr)
    output_info = {idx= output_idx, address= output_address}
    return output_info
end

function Read_Magazine_Data(target_unique_id)
    local target_info = locateWeaponMagazineAddress(target_unique_id)
    local target_address = getAddress(target_info.address)
    fullAccess(target_address, 160)
    local weaponmgzn_template = {
        address = target_address,
        magazine_size    = readInteger(target_address + 0x88),
        magazine_init    = readInteger(target_address + 0x8C),
        magazine_refill  = readInteger(target_address + 0x90),
        magazine_max     = readInteger(target_address + 0x94),
        reload_threshold = readInteger(target_address + 0x98),
        chambered        = readInteger(target_address + 0x9C),
    }
    return {backup = deepcopy(weaponmgzn_template), DATA = deepcopy(weaponmgzn_template)}
end

function Apply_MagazineSettings_Modifications(target_data)
    target_address = target_data.address
    writeInteger(target_address + 0x88, target_data.magazine_size)
    writeInteger(target_address + 0x8C, target_data.magazine_init)
    writeInteger(target_address + 0x90, target_data.magazine_refill)
    writeInteger(target_address + 0x94, target_data.magazine_max)
    writeInteger(target_address + 0x98, target_data.reload_threshold)
    writeInteger(target_address + 0x9C, target_data.chambered)
end


-- //! =========================================================================
-- //! ==================          RELOAD           ============================
-- //! =========================================================================
function locateWeaponReloadAddress(target_unique_id)
    output_idx = UID_Localizator(target_unique_id, reload_database)
    hex_output = string.format("%X", output_idx)
    targeto_addr = getAddress(getNameFromAddress("ValuesWpnRludCompData")) + 0x50*tonumber(hex_output, 16)
    output_address = string.format("%X", targeto_addr)
    output_info = {idx= output_idx, address= output_address}
    return output_info
end

function Read_Reload_Data(target_unique_id)
    local target_info = locateWeaponReloadAddress(target_unique_id)
    local target_address = getAddress(target_info.address)
    fullAccess(target_address, 80)
    local weaponreload_template = {
        address = target_address,
        manual_clearing    = readByte(target_address + 0x00),
        reload_allow_move  = readByte(target_address + 0x01),
        duration           = readFloat(target_address + 0x38),
    }
    return {backup = deepcopy(weaponreload_template), DATA = deepcopy(weaponreload_template)}
end

function Apply_ReloadSettings_Modifications(target_data)
    target_address = target_data.address
    writeByte(target_address + 0x00,  target_data.manual_clearing)
    writeByte(target_address + 0x01,  target_data.reload_allow_move)
    writeFloat(target_address + 0x38, target_data.duration)
end

-- //! =========================================================================
-- //! ===========================    ROUNDS    ================================
-- //! =========================================================================
function locateWeaponRoundsAddress(target_unique_id)
    output_idx = UID_Localizator(target_unique_id, rounds_database)
    hex_output = string.format("%X", output_idx)
    targeto_addr = getAddress(getNameFromAddress("ValuesWpnRndsCompData")) + 0x84*tonumber(hex_output, 16)
    output_address = string.format("%X", targeto_addr)
    output_info = {idx= output_idx, address= output_address}
    return output_info
end

function Read_Rounds_Data(target_unique_id)
    local target_info = locateWeaponRoundsAddress(target_unique_id)
    local target_address = getAddress(target_info.address)
    fullAccess(target_address, 132)
    local weaponrounds_template = {
        address = target_address,
        primary = {recoilx_mult = readFloat(target_address + 0x00),
                   recoily_mult = readFloat(target_address + 0x04),
                   drift_x_mult = readFloat(target_address + 0x08),
                   drift_y_mult = readFloat(target_address + 0x0C),
                   climb_x_mult = readFloat(target_address + 0x10),
                   climb_y_mult = readFloat(target_address + 0x14),
                   spreadx_mult = readFloat(target_address + 0x18),
                   spready_mult = readFloat(target_address + 0x1C)},
        secondary = {recoilx_mult = readFloat(target_address + 0x20),
                     recoily_mult = readFloat(target_address + 0x24),
                     drift_x_mult = readFloat(target_address + 0x28),
                     drift_y_mult = readFloat(target_address + 0x2C),
                     climb_x_mult = readFloat(target_address + 0x30),
                     climb_y_mult = readFloat(target_address + 0x34),
                     spreadx_mult = readFloat(target_address + 0x38),
                     spready_mult = readFloat(target_address + 0x3C)},
        ammo_types = {primary = readInteger(target_address + 0x40),
                      scndary = readInteger(target_address + 0x44)},
        mag_size   = {x = readFloat(target_address + 0x48),
                      y = readFloat(target_address + 0x4C)},
        ammo = {total  = readInteger(target_address + 0x50),
                refill = readInteger(target_address + 0x54),
                init   = readInteger(target_address + 0x58)},
        reload_amount  = readInteger(target_address + 0x5C),
        chambered      = readInteger(target_address + 0x68)
    }
    return {backup = deepcopy(weaponrounds_template), DATA = deepcopy(weaponrounds_template)}
end

function Apply_RoundsSettings_Modifications(target_data)
    target_address = target_data.address
    writeFloat(target_address   + 0x00, target_data.primary.recoilx_mult)
    writeFloat(target_address   + 0x04, target_data.primary.recoily_mult)
    writeFloat(target_address   + 0x08, target_data.primary.drift_x_mult)
    writeFloat(target_address   + 0x0C, target_data.primary.drift_y_mult)
    writeFloat(target_address   + 0x10, target_data.primary.climb_x_mult)
    writeFloat(target_address   + 0x14, target_data.primary.climb_y_mult)
    writeFloat(target_address   + 0x18, target_data.primary.spreadx_mult)
    writeFloat(target_address   + 0x1C, target_data.primary.spready_mult)
    writeFloat(target_address   + 0x20, target_data.secondary.recoilx_mult)
    writeFloat(target_address   + 0x24, target_data.secondary.recoily_mult)
    writeFloat(target_address   + 0x28, target_data.secondary.drift_x_mult)
    writeFloat(target_address   + 0x2C, target_data.secondary.drift_y_mult)
    writeFloat(target_address   + 0x30, target_data.secondary.climb_x_mult)
    writeFloat(target_address   + 0x34, target_data.secondary.climb_y_mult)
    writeFloat(target_address   + 0x38, target_data.secondary.spreadx_mult)
    writeFloat(target_address   + 0x3C, target_data.secondary.spready_mult)
    writeInteger(target_address + 0x40, target_data.ammo_types.primary)
    writeInteger(target_address + 0x44, target_data.ammo_types.scndary)
    writeFloat(target_address   + 0x48, target_data.mag_size.x)
    writeFloat(target_address   + 0x4C, target_data.mag_size.y)
    writeInteger(target_address + 0x50, target_data.ammo.total)
    writeInteger(target_address + 0x54, target_data.ammo.refill)
    writeInteger(target_address + 0x58, target_data.ammo.init)
    writeInteger(target_address + 0x5C, target_data.reload_amount)
    writeInteger(target_address + 0x68, target_data.chambered)
end

{$asm}
[DISABLE]
</AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>135</ID>
              <Description>"TRUNK"</Description>
              <Options moAlwaysHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
              <Color>FFFF00</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{
    Game Name:     Helldivers 2
    Game Version:  1.001.203
    Author:        MEOWSISI || MIAUSISI
    Date:          2024-12-13
    Table Version: 3.0.0

    ANCHOR ADDRESS INITIALIZATION
    -----------------------------
    -  This section of script is responsible for initializing the anchor addresses
       for elements required on their roots.
    -  It is strongly recommended to NOT change the code below, even if you are
       100% sure of what you are doing.
    -  The script is designed to be used in conjunction with the main balance
       script, so make sure to enable it first.
}
{$lua}

registerSymbol("ValuesBombardCompData", "CountBombardCompData  + 01F0")
registerSymbol("ValuesWpnCstmCompData", "CountWpnCstmCompData  + 0EC0")
registerSymbol("ValuesWpnDataCompData", "CountWpnDataCompData  + 1D80")
registerSymbol("InitTagsLoadout",       "TagsLoadoutCompntData + 0ED0")

{$asm}
[DISABLE]

unregisterSymbol(ValuesBombardCompData)
unregisterSymbol(ValuesWpnCstmCompData)
unregisterSymbol(ValuesWpnDataCompData)
unregisterSymbol(InitTagsLoadout)

</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>126</ID>
                  <Description>"Álfheimr"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
    Game Name:     Helldivers 2
    Game Version:  1.001.203
    Author:        MEOWSISI || MIAUSISI
    Date:          2024-12-13
    Table Version: 3.0.0

    Stratagems &amp;&amp; Bombardment Data
    ----------
    -  This section of script is responsible for handling essential stratagem
       and bombardment data such as cooldown, uses, and other stratagem-related
       information.
    -  It is strongly recommended to NOT change the code below, even if you are
       100% sure of what you are doing.
    -  The script is designed to be used in conjunction with the main balance
       script, so make sure to enable it first.
}
{$lua}


-- //! ===================    E A G L E     S E T T I N G S   =================== //! --

function get_eagle_settings_address(target_id)
    local hex_id         = string.format("%X", target_id*400);
    local hex_anchor     = getAddress(getNameFromAddress("strgm_eaglestrike_address_pt1"));
    local output_address = string.format('%X + %s', hex_anchor, hex_id);
    return output_address;
end

function Read_EagleSettings_Data(eagle_target_idx)
    local target_address = getAddress(get_eagle_settings_address(eagle_target_idx))
    eagle_template = {
        address    = target_address,
        uses       = readInteger(target_address + 0x40),
        spawn_time = readFloat(target_address + 0x44),
        cd_success = readFloat(target_address + 0x54),
        cd_fail    = readFloat(target_address + 0x58),
        flag_supp  = readByte(target_address + 0x9D),
        flag_hpod  = readByte(target_address + 0x9E),
        flag_xpls  = readByte(target_address + 0x9F),
        flag_bkpk  = readByte(target_address + 0xA0),
        flag_orbt  = readByte(target_address + 0xA1),
        flag_vhcl  = readByte(target_address + 0xA2),
        flag_fire  = readByte(target_address + 0xA3),
        flag_aiir  = readByte(target_address + 0xA4),
        flag_trrt  = readByte(target_address + 0xA5),
        flag_bcon  = readByte(target_address + 0xA6),
        flag_gass  = readByte(target_address + 0xA7),
        flag_latk  = readByte(target_address + 0xA8),
        flag_hatk  = readByte(target_address + 0xA9),
        flag_lapn  = readByte(target_address + 0xAA),
        flag_hapn  = readByte(target_address + 0xAB),
        flag_strl  = readByte(target_address + 0xAC),
        flag_xpdb  = readByte(target_address + 0xAD),
        flag_heat  = readByte(target_address + 0xAE),
        flag_beam  = readByte(target_address + 0xAF),
    }
    return {backup = deepcopy(eagle_template), DATA = deepcopy(eagle_template)}
end

-- //! ===================    O R B I T A L    S E T T I N G S   =================== //! --

function get_orbital_settings_address(target_id)
    local hex_id         = string.format("%X", target_id*400);
    local hex_anchor     = getAddress(getNameFromAddress("stratagrm_orbital_address_pt1"));
    local output_address = string.format('%X + %s', hex_anchor, hex_id);
    return output_address;
end


function Read_OrbitalSettings_Data(orbital_target_idx)
    local target_address = getAddress(get_orbital_settings_address(orbital_target_idx))
    orbital_template = {
        address    = target_address,
        uses       = readInteger(target_address + 0x40),
        spawn_time = readFloat(target_address + 0x44),
        cd_success = readFloat(target_address + 0x54),
        cd_fail    = readFloat(target_address + 0x58),
        flag_supp  = readByte(target_address + 0x9D),
        flag_hpod  = readByte(target_address + 0x9E),
        flag_xpls  = readByte(target_address + 0x9F),
        flag_bkpk  = readByte(target_address + 0xA0),
        flag_orbt  = readByte(target_address + 0xA1),
        flag_vhcl  = readByte(target_address + 0xA2),
        flag_fire  = readByte(target_address + 0xA3),
        flag_aiir  = readByte(target_address + 0xA4),
        flag_trrt  = readByte(target_address + 0xA5),
        flag_bcon  = readByte(target_address + 0xA6),
        flag_gass  = readByte(target_address + 0xA7),
        flag_latk  = readByte(target_address + 0xA8),
        flag_hatk  = readByte(target_address + 0xA9),
        flag_lapn  = readByte(target_address + 0xAA),
        flag_hapn  = readByte(target_address + 0xAB),
        flag_strl  = readByte(target_address + 0xAC),
        flag_xpdb  = readByte(target_address + 0xAD),
        flag_heat  = readByte(target_address + 0xAE),
        flag_beam  = readByte(target_address + 0xAF),
    }
    return {backup = deepcopy(orbital_template), DATA = deepcopy(orbital_template)}
end

-- //! ===================    T U R R E T    S E T T I N G S   =================== //! --

function get_turret_settings_address(target_id)
    local hex_id         = string.format("%X", target_id*400);
    local hex_anchor     = getAddress(getNameFromAddress("strgm_supp_turret_address_pt1"));
    local output_address = string.format('%X + %s', hex_anchor, hex_id);
    return output_address;
end


function Read_Emplacements_Data(turret_target_idx)
    local target_address = getAddress(get_turret_settings_address(turret_target_idx))
    turret_template = {
        address    = target_address,
        uses       = readInteger(target_address + 0x40),
        spawn_time = readFloat(target_address + 0x44),
        cd_success = readFloat(target_address + 0x54),
        cd_fail    = readFloat(target_address + 0x58),
        flag_supp  = readByte(target_address + 0x9D),
        flag_hpod  = readByte(target_address + 0x9E),
        flag_xpls  = readByte(target_address + 0x9F),
        flag_bkpk  = readByte(target_address + 0xA0),
        flag_orbt  = readByte(target_address + 0xA1),
        flag_vhcl  = readByte(target_address + 0xA2),
        flag_fire  = readByte(target_address + 0xA3),
        flag_aiir  = readByte(target_address + 0xA4),
        flag_trrt  = readByte(target_address + 0xA5),
        flag_bcon  = readByte(target_address + 0xA6),
        flag_gass  = readByte(target_address + 0xA7),
        flag_latk  = readByte(target_address + 0xA8),
        flag_hatk  = readByte(target_address + 0xA9),
        flag_lapn  = readByte(target_address + 0xAA),
        flag_hapn  = readByte(target_address + 0xAB),
        flag_strl  = readByte(target_address + 0xAC),
        flag_xpdb  = readByte(target_address + 0xAD),
        flag_heat  = readByte(target_address + 0xAE),
        flag_beam  = readByte(target_address + 0xAF),
    }
    return {backup = deepcopy(turret_template), DATA = deepcopy(turret_template)}
end

-- //! =========== S U P P O R T    W E A P O N S    S E T T I N G S =========== //! --

function get_suppwpns_settings_address(target_id)
    local hex_id         = string.format("%X", target_id*400);
    local hex_anchor     = getAddress(getNameFromAddress("stratagem_weapons_address_pt1"));
    local output_address = string.format('%X + %s', hex_anchor, hex_id);
    return output_address;
end


function Read_SupportWeapons_Data(suppwpns_target_idx)
    local target_address = getAddress(get_suppwpns_settings_address(suppwpns_target_idx))
    suppwpns_template = {
        address    = target_address,
        uses       = readInteger(target_address + 0x40),
        spawn_time = readFloat(target_address + 0x44),
        cd_success = readFloat(target_address + 0x54),
        cd_fail    = readFloat(target_address + 0x58),
        flag_supp  = readByte(target_address + 0x9D),
        flag_hpod  = readByte(target_address + 0x9E),
        flag_xpls  = readByte(target_address + 0x9F),
        flag_bkpk  = readByte(target_address + 0xA0),
        flag_orbt  = readByte(target_address + 0xA1),
        flag_vhcl  = readByte(target_address + 0xA2),
        flag_fire  = readByte(target_address + 0xA3),
        flag_aiir  = readByte(target_address + 0xA4),
        flag_trrt  = readByte(target_address + 0xA5),
        flag_bcon  = readByte(target_address + 0xA6),
        flag_gass  = readByte(target_address + 0xA7),
        flag_latk  = readByte(target_address + 0xA8),
        flag_hatk  = readByte(target_address + 0xA9),
        flag_lapn  = readByte(target_address + 0xAA),
        flag_hapn  = readByte(target_address + 0xAB),
        flag_strl  = readByte(target_address + 0xAC),
        flag_xpdb  = readByte(target_address + 0xAD),
        flag_heat  = readByte(target_address + 0xAE),
        flag_beam  = readByte(target_address + 0xAF),
    }
    return {backup = deepcopy(suppwpns_template), DATA = deepcopy(suppwpns_template)}
end

-- //! ============     B A C K P A C K    S E T T I N G S     ============ //! --

function get_backpack_settings_address(target_id)
    local hex_id         = string.format("%X", target_id*400);
    local hex_anchor     = getAddress(getNameFromAddress("stratgem_backpack_address_pt1"));
    local output_address = string.format('%X + %s', hex_anchor, hex_id);
    return output_address;
end


function Read_Backpack_Data(backpack_target_idx)
    local target_address = getAddress(get_backpack_settings_address(backpack_target_idx))
    backpack_template = {
        address    = target_address,
        uses       = readInteger(target_address + 0x40),
        spawn_time = readFloat(target_address + 0x44),
        cd_success = readFloat(target_address + 0x54),
        cd_fail    = readFloat(target_address + 0x58),
        flag_supp  = readByte(target_address + 0x9D),
        flag_hpod  = readByte(target_address + 0x9E),
        flag_xpls  = readByte(target_address + 0x9F),
        flag_bkpk  = readByte(target_address + 0xA0),
        flag_orbt  = readByte(target_address + 0xA1),
        flag_vhcl  = readByte(target_address + 0xA2),
        flag_fire  = readByte(target_address + 0xA3),
        flag_aiir  = readByte(target_address + 0xA4),
        flag_trrt  = readByte(target_address + 0xA5),
        flag_bcon  = readByte(target_address + 0xA6),
        flag_gass  = readByte(target_address + 0xA7),
        flag_latk  = readByte(target_address + 0xA8),
        flag_hatk  = readByte(target_address + 0xA9),
        flag_lapn  = readByte(target_address + 0xAA),
        flag_hapn  = readByte(target_address + 0xAB),
        flag_strl  = readByte(target_address + 0xAC),
        flag_xpdb  = readByte(target_address + 0xAD),
        flag_heat  = readByte(target_address + 0xAE),
        flag_beam  = readByte(target_address + 0xAF),
    }
    return {backup = deepcopy(backpack_template), DATA = deepcopy(backpack_template)}
end

-- //! ============    A U T O T U R R E T    S E T T I N G S    ============ //! --

function get_autoturret_settings_address(target_id)
    local hex_id         = string.format("%X", target_id*400);
    local hex_anchor     = getAddress(getNameFromAddress("stratgem_autotrrt_address_pt1"));
    local output_address = string.format('%X + %s', hex_anchor, hex_id);
    return output_address;
end


function Read_AutoTurret_Data(autoturret_target_idx)
    local target_address = getAddress(get_autoturret_settings_address(autoturret_target_idx))
    autoturret_template = {
        address    = target_address,
        uses       = readInteger(target_address + 0x40),
        spawn_time = readFloat(target_address + 0x44),
        cd_success = readFloat(target_address + 0x54),
        cd_fail    = readFloat(target_address + 0x58),
        flag_supp  = readByte(target_address + 0x9D),
        flag_hpod  = readByte(target_address + 0x9E),
        flag_xpls  = readByte(target_address + 0x9F),
        flag_bkpk  = readByte(target_address + 0xA0),
        flag_orbt  = readByte(target_address + 0xA1),
        flag_vhcl  = readByte(target_address + 0xA2),
        flag_fire  = readByte(target_address + 0xA3),
        flag_aiir  = readByte(target_address + 0xA4),
        flag_trrt  = readByte(target_address + 0xA5),
        flag_bcon  = readByte(target_address + 0xA6),
        flag_gass  = readByte(target_address + 0xA7),
        flag_latk  = readByte(target_address + 0xA8),
        flag_hatk  = readByte(target_address + 0xA9),
        flag_lapn  = readByte(target_address + 0xAA),
        flag_hapn  = readByte(target_address + 0xAB),
        flag_strl  = readByte(target_address + 0xAC),
        flag_xpdb  = readByte(target_address + 0xAD),
        flag_heat  = readByte(target_address + 0xAE),
        flag_beam  = readByte(target_address + 0xAF),
    }
    return {backup = deepcopy(autoturret_template), DATA = deepcopy(autoturret_template)}
end

-- //! ============    V E H I C L E    S E T T I N G S    ============ //! --

function get_vehicles_settings_address(target_id)
    local hex_id         = string.format("%X", target_id*400);
    local hex_anchor     = getAddress(getNameFromAddress("stratagrm_carmecs_address_pt1"));
    local output_address = string.format('%X + %s', hex_anchor, hex_id);
    return output_address;
end


function Read_Vehicle_Data(vehicle_target_idx)
    local target_address = getAddress(get_vehicles_settings_address(vehicle_target_idx))
    vehicle_template = {
        address    = target_address,
        uses       = readInteger(target_address + 0x40),
        spawn_time = readFloat(target_address + 0x44),
        cd_success = readFloat(target_address + 0x54),
        cd_fail    = readFloat(target_address + 0x58),
        flag_supp  = readByte(target_address + 0x9D),
        flag_hpod  = readByte(target_address + 0x9E),
        flag_xpls  = readByte(target_address + 0x9F),
        flag_bkpk  = readByte(target_address + 0xA0),
        flag_orbt  = readByte(target_address + 0xA1),
        flag_vhcl  = readByte(target_address + 0xA2),
        flag_fire  = readByte(target_address + 0xA3),
        flag_aiir  = readByte(target_address + 0xA4),
        flag_trrt  = readByte(target_address + 0xA5),
        flag_bcon  = readByte(target_address + 0xA6),
        flag_gass  = readByte(target_address + 0xA7),
        flag_latk  = readByte(target_address + 0xA8),
        flag_hatk  = readByte(target_address + 0xA9),
        flag_lapn  = readByte(target_address + 0xAA),
        flag_hapn  = readByte(target_address + 0xAB),
        flag_strl  = readByte(target_address + 0xAC),
        flag_xpdb  = readByte(target_address + 0xAD),
        flag_heat  = readByte(target_address + 0xAE),
        flag_beam  = readByte(target_address + 0xAF),
    }
    return {backup = deepcopy(vehicle_template), DATA = deepcopy(vehicle_template)}
end


-- //! ============   B O M B A R D M E N T    S E T T I N G S     =========== //! --

function locateBombardmentAddress(target_unique_id)
    output_idx = UID_Localizator(target_unique_id, bombardment_database)
    hex_output = string.format("%X", output_idx)
    targeto_addr = getAddress(getNameFromAddress("ValuesBombardCompData")) + 0xA8*tonumber(hex_output, 16)
    output_address = string.format("%X", targeto_addr)
    output_info = {idx= output_idx, address= output_address}
    return output_info
end

function Read_Bombardment_Data(target_unique_id)
    local target_info = locateBombardmentAddress(target_unique_id)
    local target_address = getAddress(target_info.address)
    fullAccess(target_address, 168)
    local bombardment_template = {
        address                       = target_address,
        initial_delay                 = readFloat(target_address   + 0x0000),
        num_bombs                     = readInteger(target_address + 0x0004),
        bomb_interval                 = readFloat(target_address   + 0x0008),
        bomb_interval_random_offset   = readFloat(target_address   + 0x000C),
        wander_offset_radius_min      = readFloat(target_address   + 0x0010),
        wander_offset_radius_max      = readFloat(target_address   + 0x0014),
        num_salvos                    = readInteger(target_address + 0x0018),
        salvo_interval                = readFloat(target_address   + 0x001C),
        salvo_interval_random_offset  = readFloat(target_address   + 0x0020),
        area_size                     = readFloat(target_address   + 0x0024),
        projectile_types     = {proj1 = readInteger(target_address + 0x0040),
                                proj2 = readInteger(target_address + 0x0044),
                                proj3 = readInteger(target_address + 0x0048),
                                proj4 = readInteger(target_address + 0x004C),
                                proj5 = readInteger(target_address + 0x0050),
                                proj6 = readInteger(target_address + 0x0054),
                                proj7 = readInteger(target_address + 0x0058),
                                proj8 = readInteger(target_address + 0x005C)},
        speed                         = readFloat(target_address   + 0x0060),
        start_delay                   = readFloat(target_address   + 0x006C)}
    return {backup = deepcopy(bombardment_template), DATA = deepcopy(bombardment_template)}
end

-- //! ======================================================================= //! --
-- //! ==================    A P P L Y    S E T T I N G S    ================= //! --
-- //! ======================================================================= //! --

function Apply_Bombardment_Modifications(target_settings)
    target_address = target_settings.address
    writeFloat(target_address + 0x0000,   target_settings.initial_delay)
    writeInteger(target_address + 0x0004, target_settings.num_bombs)
    writeFloat(target_address + 0x0008,   target_settings.bomb_interval)
    writeFloat(target_address + 0x000C,   target_settings.bomb_interval_random_offset)
    writeFloat(target_address + 0x0010,   target_settings.wander_offset_radius_min)
    writeFloat(target_address + 0x0014,   target_settings.wander_offset_radius_max)
    writeInteger(target_address + 0x0018, target_settings.num_salvos)
    writeFloat(target_address + 0x001C,   target_settings.salvo_interval)
    writeFloat(target_address + 0x0020,   target_settings.salvo_interval_random_offset)
    writeFloat(target_address + 0x0024,   target_settings.area_size)
    writeInteger(target_address + 0x0040, target_settings.projectile_types.proj1)
    writeInteger(target_address + 0x0044, target_settings.projectile_types.proj2)
    writeInteger(target_address + 0x0048, target_settings.projectile_types.proj3)
    writeInteger(target_address + 0x004C, target_settings.projectile_types.proj4)
    writeInteger(target_address + 0x0050, target_settings.projectile_types.proj5)
    writeInteger(target_address + 0x0054, target_settings.projectile_types.proj6)
    writeInteger(target_address + 0x0058, target_settings.projectile_types.proj7)
    writeInteger(target_address + 0x005C, target_settings.projectile_types.proj8)
    writeFloat(target_address + 0x0060,   target_settings.speed)
    writeFloat(target_address + 0x006C,   target_settings.start_delay)
end

function Apply_Stratagems_Modifications(target_settings)
    local target_address = target_settings.address
    writeInteger(target_address + 0x40, target_settings.uses)
    writeFloat(target_address + 0x44, target_settings.spawn_time)
    writeFloat(target_address + 0x54, target_settings.cd_success)
    writeFloat(target_address + 0x58, target_settings.cd_fail)
    writeByte(target_address + 0x9D, target_settings.flag_supp)
    writeByte(target_address + 0x9E, target_settings.flag_hpod)
    writeByte(target_address + 0x9F, target_settings.flag_xpls)
    writeByte(target_address + 0xA0, target_settings.flag_bkpk)
    writeByte(target_address + 0xA1, target_settings.flag_orbt)
    writeByte(target_address + 0xA2, target_settings.flag_vhcl)
    writeByte(target_address + 0xA3, target_settings.flag_fire)
    writeByte(target_address + 0xA4, target_settings.flag_aiir)
    writeByte(target_address + 0xA5, target_settings.flag_trrt)
    writeByte(target_address + 0xA6, target_settings.flag_bcon)
    writeByte(target_address + 0xA7, target_settings.flag_gass)
    writeByte(target_address + 0xA8, target_settings.flag_latk)
    writeByte(target_address + 0xA9, target_settings.flag_hatk)
    writeByte(target_address + 0xAA, target_settings.flag_lapn)
    writeByte(target_address + 0xAB, target_settings.flag_hapn)
    writeByte(target_address + 0xAC, target_settings.flag_strl)
    writeByte(target_address + 0xAD, target_settings.flag_xpdb)
    writeByte(target_address + 0xAE, target_settings.flag_heat)
    writeByte(target_address + 0xAF, target_settings.flag_beam)
end


{$asm}
[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>127</ID>
                  <Description>"Miðgarðr"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
    Game Name:     Helldivers 2
    Game Version:  1.002.003
    Author:        MEOWSISI || MIAUSISI
    Date:          2025-01-05
    Table Version: 3.1.0

    TAGS &amp;&amp; CUSTOMIZATION
    ---------------------
    -  This section of script is responsible for handling the customization
       of weapons, stratagems and equipment.
    -  It is strongly recommended to NOT change the code below, even if you are
       100% sure of what you are doing.
    -  The script is designed to be used in conjunction with the main balance
       script, so make sure to enable it first.
}
{$lua}

function locateTagsAddress(target_unique_id)
    output_idx = UID_Localizator(target_unique_id, tags_database)
    hex_output = string.format("%X", output_idx)
    targeto_addr = getAddress(getNameFromAddress("InitTagsLoadout")) + 0x20*tonumber(hex_output, 16)
    output_address = string.format("%X", targeto_addr)
    output_info = {idx= output_idx, address= output_address}
    return output_info
end


function getTag(string_tag)
    if string_tag == "LightArmorPen" then
        return 300892437
    end
    if string_tag == "MediumArmorPen" then
        return 3085090887
    end
    if string_tag == "HeavyArmorPen" then
        return 658390125
    end
    if string_tag == "OneHanded" then
        return 300892437
    end
    if string_tag == "RoundsReload" then
        return 1501540430
    end
    if string_tag == "Explosive" then
        return 1325312028
    end
    if string_tag == "ChargeUp" then
        return 2297916711
    end
    if string_tag == "LightAntiTank" then
        return 612466998
    end
    if string_tag == "AntiTank" then
        return 3591930318
    end
    if string_tag == "HeavyArmorPen" then
        return 300892437
    end
    if string_tag == "Caustic" then
        return 1865818670
    end
    if string_tag == "Electrocution" then
        return 2287695974
    end
    if string_tag == "Incendiary" then
        return 2783978577
    end
end

function Read_TagsInfo_Data(target_unique_id)
    local target_info = locateTagsAddress(target_unique_id)
    local target_address = getAddress(target_info.address)
    fullAccess(target_address, 32)
    local tags_template = {
        address = target_address,
        tag1 = readInteger(target_address + 0x00C),
        tag2 = readInteger(target_address + 0x010),
        tag3 = readInteger(target_address + 0x014),
        tag4 = readInteger(target_address + 0x018),
        tag5 = readInteger(target_address + 0x01C),
    }
    return {backup = deepcopy(tags_template), DATA = deepcopy(tags_template)}
end

function Apply_TagsInfo_Modifications(target_data)
    target_address = target_data.address
    writeInteger(target_address + 0x00C, target_data.tag1)
    writeInteger(target_address + 0x010, target_data.tag2)
    writeInteger(target_address + 0x014, target_data.tag3)
    writeInteger(target_address + 0x018, target_data.tag4)
    writeInteger(target_address + 0x01C, target_data.tag5)
end

-- //! =========================================================================
-- //! =========================================================================
-- //! =========================================================================


function locateWeaponCstmAddress(target_unique_id)
    output_idx = UID_Localizator(target_unique_id, customization_database)
    hex_output = string.format("%X", output_idx)
    targeto_addr = getAddress(getNameFromAddress("ValuesWpnCstmCompData")) + 0x168*tonumber(hex_output, 16)
    output_address = string.format("%X", targeto_addr)
    output_info = {idx= output_idx, address= output_address}
    return output_info
end

function Read_WeaponCustomization_Data(target_unique_id)
    local target_info = locateWeaponCstmAddress(target_unique_id)
    local target_address = getAddress(target_info.address)
    fullAccess(target_address, 360)
    local custom_template = {
        address = target_address,
        slot1 = {slot_type=readInteger(target_address + 0x000),
                 slot_info=readInteger(target_address + 0x004)},
        slot2 = {slot_type=readInteger(target_address + 0x008),
                 slot_info=readInteger(target_address + 0x00C)},
        slot3 = {slot_type=readInteger(target_address + 0x010),
                 slot_info=readInteger(target_address + 0x014)},
        slot4 = {slot_type=readInteger(target_address + 0x018),
                 slot_info=readInteger(target_address + 0x01C)},
        slot5 = {slot_type=readInteger(target_address + 0x020),
                 slot_info=readInteger(target_address + 0x024)},
        slot6 = {slot_type=readInteger(target_address + 0x028),
                 slot_info=readInteger(target_address + 0x02C)},
        slot7 = {slot_type=readInteger(target_address + 0x030),
                 slot_info=readInteger(target_address + 0x034)},
        slot8 = {slot_type=readInteger(target_address + 0x038),
                 slot_info=readInteger(target_address + 0x03C)},
        slot9 = {slot_type=readInteger(target_address + 0x040),
                 slot_info=readInteger(target_address + 0x044)},
        slot_list = {idx1 =readInteger(target_address + 0x048),
                     idx2 =readInteger(target_address + 0x04C),
                     idx3 =readInteger(target_address + 0x050),
                     idx4 =readInteger(target_address + 0x054),
                     idx5 =readInteger(target_address + 0x058),
                     idx6 =readInteger(target_address + 0x05C),
                     idx7 =readInteger(target_address + 0x060),
                     idx8 =readInteger(target_address + 0x064),
                     idx9 =readInteger(target_address + 0x068)},
        optics_path           = readQword(target_address   + 0x070),
        magazine_primary_path = readQword(target_address   + 0x078),
        magazine_scndary_path = readQword(target_address   + 0x080),
        muzzle_path           = readQword(target_address   + 0x088),
        optics_crosshair = {x = readFloat(target_address   + 0x090),
                            y = readFloat(target_address   + 0x094)},
        scoped_shading_envt   = readQword(target_address   + 0x098),
        scoped_blur_shading   = readQword(target_address   + 0x0A0),
        underbarrel_path      = readQword(target_address   + 0x0A8),
        hide_magazine_start   = readInteger(target_address + 0x0F4),
        magazine_nodes = {
            node01 = readInteger(target_address + 0x0F8),
            node02 = readInteger(target_address + 0x0FC),
            node03 = readInteger(target_address + 0x100),
            node04 = readInteger(target_address + 0x104),
            node05 = readInteger(target_address + 0x108),
            node06 = readInteger(target_address + 0x10C),
            node07 = readInteger(target_address + 0x110),
            node08 = readInteger(target_address + 0x114),
            node09 = readInteger(target_address + 0x118),
            node10 = readInteger(target_address + 0x11C),
            node11 = readInteger(target_address + 0x120),
            node12 = readInteger(target_address + 0x124),
            node13 = readInteger(target_address + 0x128),
            node14 = readInteger(target_address + 0x12C),
            node15 = readInteger(target_address + 0x130),
            node16 = readInteger(target_address + 0x134),
            node17 = readInteger(target_address + 0x138),
            node18 = readInteger(target_address + 0x13C),
            node19 = readInteger(target_address + 0x140),
            node20 = readInteger(target_address + 0x144),
        },
        use_mags_nodes_in_main_unit          = readInteger(target_address + 0x148),
        magazine_adusting_ammo_reserve_pool  = readInteger(target_address + 0x14C),
        magazine_adusting_nodes_visible_chb  = readInteger(target_address + 0x150),
        magazine_adusting_animation          = readInteger(target_address + 0x154),
        magazine_adusting_animation_variable = readInteger(target_address + 0x158),

    }
    return {backup = deepcopy(custom_template), DATA = deepcopy(custom_template)}
end


function Apply_WeaponCustomization_Modifications(target_data)
    target_address = getAddress(target_data.address)
    writeInteger(target_address + 0x000, target_data.slot1.slot_type)
    writeInteger(target_address + 0x004, target_data.slot1.slot_info)
    writeInteger(target_address + 0x008, target_data.slot2.slot_type)
    writeInteger(target_address + 0x00C, target_data.slot2.slot_info)
    writeInteger(target_address + 0x010, target_data.slot3.slot_type)
    writeInteger(target_address + 0x014, target_data.slot3.slot_info)
    writeInteger(target_address + 0x018, target_data.slot4.slot_type)
    writeInteger(target_address + 0x01C, target_data.slot4.slot_info)
    writeInteger(target_address + 0x020, target_data.slot5.slot_type)
    writeInteger(target_address + 0x024, target_data.slot5.slot_info)
    writeInteger(target_address + 0x028, target_data.slot6.slot_type)
    writeInteger(target_address + 0x02C, target_data.slot6.slot_info)
    writeInteger(target_address + 0x030, target_data.slot7.slot_type)
    writeInteger(target_address + 0x034, target_data.slot7.slot_info)
    writeInteger(target_address + 0x038, target_data.slot8.slot_type)
    writeInteger(target_address + 0x03C, target_data.slot8.slot_info)
    writeInteger(target_address + 0x040, target_data.slot9.slot_type)
    writeInteger(target_address + 0x044, target_data.slot9.slot_info)
    writeInteger(target_address + 0x048, target_data.slot_list.idx1)
    writeInteger(target_address + 0x04C, target_data.slot_list.idx2)
    writeInteger(target_address + 0x050, target_data.slot_list.idx3)
    writeInteger(target_address + 0x054, target_data.slot_list.idx4)
    writeInteger(target_address + 0x058, target_data.slot_list.idx5)
    writeInteger(target_address + 0x05C, target_data.slot_list.idx6)
    writeInteger(target_address + 0x060, target_data.slot_list.idx7)
    writeInteger(target_address + 0x064, target_data.slot_list.idx8)
    writeInteger(target_address + 0x068, target_data.slot_list.idx9)
    writeQword(target_address + 0x070, target_data.optics_path)
    writeQword(target_address + 0x078, target_data.magazine_primary_path)
    writeQword(target_address + 0x080, target_data.magazine_scndary_path)
    writeQword(target_address + 0x088, target_data.muzzle_path)
    writeFloat(target_address + 0x090, target_data.optics_crosshair.x)
    writeFloat(target_address + 0x094, target_data.optics_crosshair.y)
    writeQword(target_address + 0x098, target_data.scoped_shading_envt)
    writeQword(target_address + 0x0A0, target_data.scoped_blur_shading)
    writeQword(target_address + 0x0A8, target_data.underbarrel_path)
    writeInteger(target_address + 0x0F4, target_data.hide_magazine_start)
    writeInteger(target_address + 0x0F8, target_data.magazine_nodes.node01)
    writeInteger(target_address + 0x0FC, target_data.magazine_nodes.node02)
    writeInteger(target_address + 0x100, target_data.magazine_nodes.node03)
    writeInteger(target_address + 0x104, target_data.magazine_nodes.node04)
    writeInteger(target_address + 0x108, target_data.magazine_nodes.node05)
    writeInteger(target_address + 0x10C, target_data.magazine_nodes.node06)
    writeInteger(target_address + 0x110, target_data.magazine_nodes.node07)
    writeInteger(target_address + 0x114, target_data.magazine_nodes.node08)
    writeInteger(target_address + 0x118, target_data.magazine_nodes.node09)
    writeInteger(target_address + 0x11C, target_data.magazine_nodes.node10)
    writeInteger(target_address + 0x120, target_data.magazine_nodes.node11)
    writeInteger(target_address + 0x124, target_data.magazine_nodes.node12)
    writeInteger(target_address + 0x128, target_data.magazine_nodes.node13)
    writeInteger(target_address + 0x12C, target_data.magazine_nodes.node14)
    writeInteger(target_address + 0x130, target_data.magazine_nodes.node15)
    writeInteger(target_address + 0x134, target_data.magazine_nodes.node16)
    writeInteger(target_address + 0x138, target_data.magazine_nodes.node17)
    writeInteger(target_address + 0x13C, target_data.magazine_nodes.node18)
    writeInteger(target_address + 0x140, target_data.magazine_nodes.node19)
    writeInteger(target_address + 0x144, target_data.magazine_nodes.node20)
    writeInteger(target_address + 0x148, target_data.use_mags_nodes_in_main_unit)
    writeInteger(target_address + 0x14C, target_data.magazine_adusting_ammo_reserve_pool)
    writeInteger(target_address + 0x150, target_data.magazine_adusting_nodes_visible_chb)
    writeInteger(target_address + 0x154, target_data.magazine_adusting_animation)
    writeInteger(target_address + 0x158, target_data.magazine_adusting_animation_variable)
end

-- //! =========================================================================
-- //! =========================================================================
-- //! =========================================================================


function Read_Defender_CustomMagazine_Data()
    targeto_addr = getAddress(getNameFromAddress("EntityDeltas")) + 0x1A284
    fullAccess(targeto_addr, 104)
    local custom_template = {
        address           = targeto_addr,
        magazine_capacity = readInteger(targeto_addr + 0x000),
        magazine_initial  = readInteger(targeto_addr + 0x004),
        magazine_max      = readInteger(targeto_addr + 0x008),
        magazine_refill   = readInteger(targeto_addr + 0x00C),
        reload_duration   =   readFloat(targeto_addr + 0x068)}
    return {backup = deepcopy(custom_template), DATA = deepcopy(custom_template)}
end

function Apply_Defender_CustomMagazine_Modifications(target_data)
    target_address = target_data.address
    writeInteger(target_address + 0x000, target_data.magazine_capacity)
    writeInteger(target_address + 0x004, target_data.magazine_initial)
    writeInteger(target_address + 0x008, target_data.magazine_max)
    writeInteger(target_address + 0x00C, target_data.magazine_refill)
    writeFloat(target_address   + 0x068, target_data.reload_duration)
end



-- //! =========================================================================
-- //! =========================================================================
-- //! =========================================================================

function Read_Railgun_CustomScope_Data()
    targeto_addr = getAddress(getNameFromAddress("EntityDeltas")) + 0x1BF2D
    fullAccess(targeto_addr, 104)
    local custom_template = {
        address           = targeto_addr,
        scope_offsetx = readFloat(targeto_addr + 0x000),
        scope_offsety = readFloat(targeto_addr + 0x004),
        scope_offsetz = readFloat(targeto_addr + 0x008),
        aim_zoomx = readFloat(targeto_addr + 0x00C),
        aim_zoomy = readFloat(targeto_addr + 0x010),
        aim_zoomz = readFloat(targeto_addr + 0x014),
        optics_path = readQword(targeto_addr + 0x018),
        optics_chx = readFloat(targeto_addr + 0x020),
        optics_chy = readFloat(targeto_addr + 0x024)}
    return {backup = deepcopy(custom_template), DATA = deepcopy(custom_template)}
end

function Apply_Railgun_CustomScope_Modifications(target_data)
    target_address = target_data.address
    writeFloat(target_address + 0x000, target_data.scope_offsetx)
    writeFloat(target_address + 0x004, target_data.scope_offsety)
    writeFloat(target_address + 0x008, target_data.scope_offsetz)
    writeFloat(target_address + 0x00C, target_data.aim_zoomx)
    writeFloat(target_address + 0x010, target_data.aim_zoomy)
    writeFloat(target_address + 0x014, target_data.aim_zoomz)
    writeQword(target_address + 0x018, target_data.optics_path)
    writeFloat(target_address + 0x020, target_data.optics_chx)
    writeFloat(target_address + 0x024, target_data.optics_chy)
end

{$asm}
[DISABLE]
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>130</ID>
                  <Description>"Svartálfaheimr"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
    Game Name:     Helldivers 2
    Game Version:  1.001.203
    Author:        MEOWSISI || MIAUSISI
    Date:          2024-12-13
    Table Version: 3.0.0

    WeaponData
    ----------
    -  This section of script is responsible for handling essential weapon data
       such as recoil, spread, scope, and other weapon-related information.
    -  It is strongly recommended to NOT change the code below, even if you are
       100% sure of what you are doing.
    -  The script is designed to be used in conjunction with the main balance
       script, so make sure to enable it first.
}
{$lua}

function locateWeaponDataAddress(target_unique_id)
    output_idx = UID_Localizator(target_unique_id, weapon_database)
    hex_output = string.format("%X", output_idx)
    targeto_addr = getAddress(getNameFromAddress("ValuesWpnDataCompData")) + 0x418*tonumber(hex_output, 16)
    output_address = string.format("%X", targeto_addr)
    output_info = {idx= output_idx, address= output_address}
    return output_info
end

function Read_WeaponInfo_Data(target_unique_id)
    local target_info = locateWeaponDataAddress(target_unique_id)
    local target_address = getAddress(target_info.address)
    fullAccess(target_address, 984)
    local weapondata_template = {
        idx      = target_info.idx,
        address  = target_address,
        recoil   = {x     = readFloat(target_address + 0x000),
                    y     = readFloat(target_address + 0x004),
                    xbias = readFloat(target_address + 0x008),
                    randx = readFloat(target_address + 0x00C),
                    randy = readFloat(target_address + 0x010)},
        climb    = {x     = readFloat(target_address + 0x014),
                    y     = readFloat(target_address + 0x018),
                    xbias = readFloat(target_address + 0x01C),
                    randx = readFloat(target_address + 0x020),
                    randy = readFloat(target_address + 0x024)},
        multip   = {recoilx = readFloat(target_address + 0x02C),
                    recoily = readFloat(target_address + 0x030),
                    driftx  = readFloat(target_address + 0x034),
                    drifty  = readFloat(target_address + 0x038),
                    climbx  = readFloat(target_address + 0x03C),
                    climby  = readFloat(target_address + 0x040)},
        spread   = {infox   = readFloat(target_address + 0x044),
                    infoy   = readFloat(target_address + 0x048),
                    multipx = readFloat(target_address + 0x04C),
                    multipy = readFloat(target_address + 0x050)},
        handling = {sway_mlt             = readFloat(target_address + 0x054),
                    scope_sway           = readFloat(target_address + 0x06C),
                    scope_responsiveness = readFloat(target_address + 0x104),
                    ergonomics           = readFloat(target_address + 0x12C)},
        scope   =  {aimzoomx   = readFloat(target_address + 0x060),
                    aimzoomy   = readFloat(target_address + 0x064),
                    aimzoomz   = readFloat(target_address + 0x068),
                    crosshairx = readFloat(target_address + 0x108),
                    crosshairy = readFloat(target_address + 0x10C),
                    offsetx = readFloat(target_address + 0x110),
                    offsety = readFloat(target_address + 0x114),
                    offsetz = readFloat(target_address + 0x118),
                    zeroingx = readFloat(target_address + 0x11C),
                    zeroingy = readFloat(target_address + 0x120),
                    zeroingz = readFloat(target_address + 0x124),
                    crosshair_uid         = readQword(target_address + 0x090),
                    crosshair_type        = readInteger(target_address + 0x134),
                    always_show_crosshair = readInteger(target_address + 0x098)},
        suppresed = {is_suppressed   = readInteger(target_address + 0x05C),
                     noise_template  = readInteger(target_address + 0x070),
                     visibility      = readFloat(target_address + 0x074),
                     weapon_scream   = readInteger(target_address + 0x144)},
        rounds    = {num_burst          = readInteger(target_address + 0x078),
                     primary_firemode   = readInteger(target_address + 0x07C),
                     secondary_firemode = readInteger(target_address + 0x080),
                     tertiary_firemode  = readInteger(target_address + 0x084),
                     left_fn            = readInteger(target_address + 0x088),
                     right_fn           = readInteger(target_address + 0x08C)},
        fire_nodes = {
            item1  = readInteger(target_address + 0x09C),
            item2  = readInteger(target_address + 0x0A0),
            item3  = readInteger(target_address + 0x0A4),
            item4  = readInteger(target_address + 0x0A8),
            item5  = readInteger(target_address + 0x0AC),
            item6  = readInteger(target_address + 0x0B0),
            item7  = readInteger(target_address + 0x0B4),
            item8  = readInteger(target_address + 0x0B8),
            item9  = readInteger(target_address + 0x0BC),
            item10 = readInteger(target_address + 0x0C0),
            item11 = readInteger(target_address + 0x0C4),
            item12 = readInteger(target_address + 0x0C8),
            item13 = readInteger(target_address + 0x0CC),
            item14 = readInteger(target_address + 0x0D0),
            item15 = readInteger(target_address + 0x0D4),
            item16 = readInteger(target_address + 0x0D8),
            item17 = readInteger(target_address + 0x0DC),
            item18 = readInteger(target_address + 0x0E0),
            item19 = readInteger(target_address + 0x0E4),
            item20 = readInteger(target_address + 0x0E8),
            item21 = readInteger(target_address + 0x0EC),
            item22 = readInteger(target_address + 0x0F0),
            item23 = readInteger(target_address + 0x0F4),
            item24 = readInteger(target_address + 0x0F8)}
    }
    return {backup = deepcopy(weapondata_template), DATA = deepcopy(weapondata_template)}
end

function Apply_WeaponInfo_Modifications(target_data)
    target_address = target_data.address
    writeFloat(target_address   + 0x000, target_data.recoil.x)
    writeFloat(target_address   + 0x004, target_data.recoil.y)
    writeFloat(target_address   + 0x008, target_data.recoil.xbias)
    writeFloat(target_address   + 0x00C, target_data.recoil.randx)
    writeFloat(target_address   + 0x010, target_data.recoil.randy)
    writeFloat(target_address   + 0x014, target_data.climb.x)
    writeFloat(target_address   + 0x018, target_data.climb.y)
    writeFloat(target_address   + 0x01C, target_data.climb.xbias)
    writeFloat(target_address   + 0x020, target_data.climb.randx)
    writeFloat(target_address   + 0x024, target_data.climb.randy)
    writeFloat(target_address   + 0x02C, target_data.multip.recoilx)
    writeFloat(target_address   + 0x030, target_data.multip.recoily)
    writeFloat(target_address   + 0x034, target_data.multip.driftx)
    writeFloat(target_address   + 0x038, target_data.multip.drifty)
    writeFloat(target_address   + 0x03C, target_data.multip.climbx)
    writeFloat(target_address   + 0x040, target_data.multip.climby)
    writeFloat(target_address   + 0x044, target_data.spread.infox)
    writeFloat(target_address   + 0x048, target_data.spread.infoy)
    writeFloat(target_address   + 0x04C, target_data.spread.multipx)
    writeFloat(target_address   + 0x050, target_data.spread.multipy)
    writeFloat(target_address   + 0x054, target_data.handling.sway_mlt)
    writeFloat(target_address   + 0x06C, target_data.handling.scope_sway)
    writeFloat(target_address   + 0x104, target_data.handling.scope_responsiveness)
    writeFloat(target_address   + 0x12C, target_data.handling.ergonomics)

    writeFloat(target_address   + 0x060, target_data.scope.aimzoomx)
    writeFloat(target_address   + 0x064, target_data.scope.aimzoomy)
    writeFloat(target_address   + 0x068, target_data.scope.aimzoomz)

    writeFloat(target_address   + 0x108, target_data.scope.crosshairx)
    writeFloat(target_address   + 0x10C, target_data.scope.crosshairy)
    writeFloat(target_address   + 0x110, target_data.scope.offsetx)
    writeFloat(target_address   + 0x114, target_data.scope.offsety)
    writeFloat(target_address   + 0x118, target_data.scope.offsetz)
    writeFloat(target_address   + 0x11C, target_data.scope.zeroingx)
    writeFloat(target_address   + 0x120, target_data.scope.zeroingy)
    writeFloat(target_address   + 0x124, target_data.scope.zeroingz)
    writeQword(target_address   + 0x090, target_data.scope.crosshair_uid)
    writeInteger(target_address + 0x134, target_data.scope.crosshair_type)
    writeInteger(target_address + 0x098, target_data.scope.always_show_crosshair)

    writeInteger(target_address + 0x05C, target_data.suppresed.is_suppressed)
    writeInteger(target_address + 0x070, target_data.suppresed.noise_template)
    writeFloat(target_address   + 0x074, target_data.suppresed.visibility)
    writeInteger(target_address + 0x144, target_data.suppresed.weapon_scream)
    writeInteger(target_address + 0x078, target_data.rounds.num_burst)
    writeInteger(target_address + 0x07C, target_data.rounds.primary_firemode)
    writeInteger(target_address + 0x080, target_data.rounds.secondary_firemode)
    writeInteger(target_address + 0x084, target_data.rounds.tertiary_firemode)
    writeInteger(target_address + 0x088, target_data.rounds.left_fn)
    writeInteger(target_address + 0x08C, target_data.rounds.right_fn)
    writeInteger(target_address + 0x09C, target_data.fire_nodes.item1)
    writeInteger(target_address + 0x0A0, target_data.fire_nodes.item2)
    writeInteger(target_address + 0x0A4, target_data.fire_nodes.item3)
    writeInteger(target_address + 0x0A8, target_data.fire_nodes.item4)
    writeInteger(target_address + 0x0AC, target_data.fire_nodes.item5)
    writeInteger(target_address + 0x0B0, target_data.fire_nodes.item6)
    writeInteger(target_address + 0x0B4, target_data.fire_nodes.item7)
    writeInteger(target_address + 0x0B8, target_data.fire_nodes.item8)
    writeInteger(target_address + 0x0BC, target_data.fire_nodes.item9)
    writeInteger(target_address + 0x0C0, target_data.fire_nodes.item10)
    writeInteger(target_address + 0x0C4, target_data.fire_nodes.item11)
    writeInteger(target_address + 0x0C8, target_data.fire_nodes.item12)
    writeInteger(target_address + 0x0CC, target_data.fire_nodes.item13)
    writeInteger(target_address + 0x0D0, target_data.fire_nodes.item14)
    writeInteger(target_address + 0x0D4, target_data.fire_nodes.item15)
    writeInteger(target_address + 0x0D8, target_data.fire_nodes.item16)
    writeInteger(target_address + 0x0DC, target_data.fire_nodes.item17)
    writeInteger(target_address + 0x0E0, target_data.fire_nodes.item18)
    writeInteger(target_address + 0x0E4, target_data.fire_nodes.item19)
    writeInteger(target_address + 0x0E8, target_data.fire_nodes.item20)
    writeInteger(target_address + 0x0EC, target_data.fire_nodes.item21)
    writeInteger(target_address + 0x0F0, target_data.fire_nodes.item22)
    writeInteger(target_address + 0x0F4, target_data.fire_nodes.item23)
    writeInteger(target_address + 0x0F8, target_data.fire_nodes.item24)
end

{$asm}
[DISABLE]

</AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>291</ID>
              <Description>"BRANCHES"</Description>
              <Options moAlwaysHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
              <Color>FFFF00</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{
    Game Name:     Helldivers 2
    Game Version:  1.002.003
    Author:        MEOWSISI || MIAUSISI
    Date:          2024-12-13
    Table Version: 3.1.0

    ANCHOR ADDRESS INITIALIZATION
    -----------------------------
    -  This section of script is responsible for initializing the anchor addresses
       for elements required on their roots.
    -  It is strongly recommended to NOT change the code below, even if you are
       100% sure of what you are doing.
    -  The script is designed to be used in conjunction with the main balance
       script, so make sure to enable it first.
}
{$lua}

registerSymbol("ValuesHealthCompData",   "CountHealthCompData  + 2C50")
registerSymbol("ValuesHellpodLifeTimeData",        "HpCompData + 0BA0")
registerSymbol("ValuesUnitCompData",             "UnitCompData + 9650")
registerSymbol("ValuesShieldValsCompData", "ShieldValsCompData + 0110")
{$asm}
[DISABLE]
{$lua}

unregisterSymbol("ValuesHealthCompData")
unregisterSymbol("ValuesHellpodLifeTimeData")
unregisterSymbol("ValuesUnitCompData")
unregisterSymbol("ValuesShieldValsCompData")

</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>238</ID>
                  <Description>"Vanaheimr"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{$lua}

function Set_DamageElement_Type(input_table, damage_elem)
    if damage_elem == "FIRE" then
        input_table.elem_type = 1
        input_table.stt_eff_1.target_type = 6
        input_table.stt_eff_1.target_time = 100.0
        input_table.stt_eff_2.target_type = 13
        input_table.stt_eff_2.target_time = 100.0
        input_table.stt_eff_3.target_type = 32
        input_table.stt_eff_3.target_time = 100.0
        input_table.stt_eff_4.target_type = 52
        input_table.stt_eff_4.target_time = 100.0
    end
    if damage_elem == "GAS" then
        input_table.elem_type = 5
        input_table.stt_eff_1.target_type = 4
        input_table.stt_eff_1.target_time = 1.0
        input_table.stt_eff_2.target_type = 42
        input_table.stt_eff_2.target_time = 100.0
        input_table.stt_eff_3.target_type = 43
        input_table.stt_eff_3.target_time = 100.0
        input_table.stt_eff_4.target_type = 54
        input_table.stt_eff_4.target_time = 100.0
    end
    if damage_elem == "ELECTRIC" then
        input_table.elem_type = 2
        input_table.stt_eff_1.target_type = 35
        input_table.stt_eff_1.target_time = 100.0
        input_table.stt_eff_2.target_type = 37
        input_table.stt_eff_2.target_time = 75.0
        input_table.stt_eff_3.target_type = 38
        input_table.stt_eff_3.target_time = 50.0
        input_table.stt_eff_4.target_type = 41
        input_table.stt_eff_4.target_time = 100.0
    end
    if damage_elem == "SHREDDER" then
        input_table.elem_type = 4
        input_table.stt_eff_1.target_type = 2
        input_table.stt_eff_1.target_time = 100.0
        input_table.stt_eff_2.target_type = 7
        input_table.stt_eff_2.target_time = 100.0
        input_table.stt_eff_3.target_type = 20
        input_table.stt_eff_3.target_time = 100.0
        input_table.stt_eff_4.target_type = 54
        input_table.stt_eff_4.target_time = 100.0
    end
    if damage_elem == "STUN" then
        input_table.stt_eff_1.target_type = 7
        input_table.stt_eff_1.target_time = 100.0
        input_table.stt_eff_2.target_type = 39
        input_table.stt_eff_2.target_time = 100.0
        input_table.stt_eff_3.target_type = 40
        input_table.stt_eff_3.target_time = 100.0
        input_table.stt_eff_4.target_type = 51
        input_table.stt_eff_4.target_time = 100.0
    end
end

function Set_ArmorPenetration_Type(input_damage_table, input_tag_table, input_ap_type)
    if input_ap_type == "LightArmorPen" then
        input_damage_table.ap_vals = {ap1 = 3, ap2 = 2, ap3 = 2, ap4 = 2}
        input_tag_table.tag1 = getTag("LightArmorPen")
    end
    if input_ap_type == "MediumArmorPen" then
        input_damage_table.ap_vals = {ap1 = 4, ap2 = 3, ap3 = 3, ap4 = 3}
        input_tag_table.tag1 = getTag("MediumArmorPen")
    end
    if input_ap_type == "HeavyArmorPen" then
        input_damage_table.ap_vals = {ap1 = 4, ap2 = 4, ap3 = 4, ap4 = 4}
        input_tag_table.tag1 = getTag("HeavyArmorPen")
    end
    if input_ap_type == "LightAntiTank" then
        input_damage_table.ap_vals = {ap1 = 5, ap2 = 4, ap3 = 4, ap4 = 4}
        input_tag_table.tag1 = getTag("LightAntiTank")
    end
    if input_ap_type == "AntiTank" then
        input_damage_table.ap_vals = {ap1 = 6, ap2 = 6, ap3 = 6, ap4 = 6}
        input_tag_table.tag1 = getTag("AntiTank")
    end
end

{$asm}
[DISABLE]

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>358</ID>
                  <Description>"Ásgarðr"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{$lua}

function RegisterPassive(target_offset)
    local target_address = getAddress(getNameFromAddress("psvbns_anchor_address")) + tonumber(target_offset, 16)
    local num_pass = readInteger(target_address + 0x18)
    if num_pass &gt; 1 then
        target_template = {
            address   = target_address,
            num_pass  = num_pass,
            offset    = target_offset,
            passive_1 = {
                mod_id    = readInteger(target_address + 0x30),
                mod_type  = readInteger(target_address + 0x34),
                mod_value = readFloat(target_address   + 0x38),
                mod_desc  = readInteger(target_address + 0x3C)},
            passive_2 = {
                mod_id    = readInteger(target_address + 0x40),
                mod_type  = readInteger(target_address + 0x44),
                mod_value = readFloat(target_address   + 0x48),
                mod_desc  = readInteger(target_address + 0x4C)}}
    else
        target_template = {
            address   = target_address,
            num_pass  = num_pass,
            offset    = target_offset,
            passive_1 = {
                mod_id    = readInteger(target_address + 0x30),
                mod_type  = readInteger(target_address + 0x34),
                mod_value = readFloat(target_address   + 0x38),
                mod_desc  = readInteger(target_address + 0x3C)}}
    end
    return {backup = deepcopy(target_template), DATA = deepcopy(target_template)}
end

function Apply_Passive_Modifications(input_data)
    target_address = getAddress(input_data.address)
    if input_data.offset == "378" then
        if input_data.passive_1.mod_value &gt; 100.0 then
            input_data.passive_1.mod_value = 2.0
        elseif input_data.passive_1.mod_value &lt; 0.0 then
            input_data.passive_1.mod_value = 1.5
        else
            input_data.passive_1.mod_value = input_data.passive_1.mod_value/100.0 + 1.0
        end
    end
    if input_data.num_pass &gt; 1 then
        writeInteger(target_address + 0x30, input_data.passive_1.mod_id)
        writeInteger(target_address + 0x34, input_data.passive_1.mod_type)
        writeFloat(target_address   + 0x38, input_data.passive_1.mod_value)
        writeInteger(target_address + 0x3C, input_data.passive_1.mod_desc)
        writeInteger(target_address + 0x40, input_data.passive_2.mod_id)
        writeInteger(target_address + 0x44, input_data.passive_2.mod_type)
        writeFloat(target_address   + 0x48, input_data.passive_2.mod_value)
        writeInteger(target_address + 0x4C, input_data.passive_2.mod_desc)
    else
        writeInteger(target_address + 0x30, input_data.passive_1.mod_id)
        writeInteger(target_address + 0x34, input_data.passive_1.mod_type)
        writeFloat(target_address   + 0x38, input_data.passive_1.mod_value)
        writeInteger(target_address + 0x3C, input_data.passive_1.mod_desc)
    end
end


function Read_PlayerAttributes_Data()
    local target_address = getAddress(getNameFromAddress("AvatarCompData"))
    fullAccess(target_address, 888)
    output_template = {
        address = target_address,
        move_info = {
            speeds = {
                reversing_multiplier = readFloat(target_address + 0x000),
                aim                  = readFloat(target_address + 0x004),
                walk                 = readFloat(target_address + 0x008),
                jog                  = readFloat(target_address + 0x00C),
                sprint               = readFloat(target_address + 0x010),
                sprint_exerted       = readFloat(target_address + 0x014),
                crouch_aim           = readFloat(target_address + 0x018),
                crouch_walk          = readFloat(target_address + 0x01C),
                crouch_jog           = readFloat(target_address + 0x020),
                crouch_sprint        = readFloat(target_address + 0x024),
                prone                = readFloat(target_address + 0x028),
                swim                 = readFloat(target_address + 0x02C)
            },
            stamina_info = {
                sprint_stamina_decay_duration = readFloat(target_address + 0x030),
                jog_stamina_decay_duration    = readFloat(target_address + 0x034),
                stamina_recover_time_stand    = readFloat(target_address + 0x038),
                stamina_recover_time_crouch   = readFloat(target_address + 0x03C),
                stamina_recover_time_prone    = readFloat(target_address + 0x040),
                stamina_recover_delay         = readFloat(target_address + 0x044),
                stamina_cost_jump             = readFloat(target_address + 0x048),
                stamina_cost_dodge            = readFloat(target_address + 0x04C),
                stamina_cost_vault            = readFloat(target_address + 0x050),
                stamina_cost_climb            = readFloat(target_address + 0x054),
                stamina_cost_slide            = readFloat(target_address + 0x058)
            },
            visibility_info = {
                visibility_jump  = readFloat(target_address + 0x05C),
                visibility_dodge = readFloat(target_address + 0x060),
                visibility_vault = readFloat(target_address + 0x064),
                visibility_climb = readFloat(target_address + 0x068),
                visibility_slide = readFloat(target_address + 0x06C)
            },
            hipfire_time       = readFloat(target_address + 0x070),
            throw_hipfire_time = readFloat(target_address + 0x074),
            turn_speed_info = {
                crouch_turn_speed_multiplier = readFloat(target_address + 0x078),
                prone_turn_speed_multiplier  = readFloat(target_address + 0x07C),
                jog_turn_speed_multiplier    = readFloat(target_address + 0x080),
                sprint_turn_speed_multiplier = readFloat(target_address + 0x084),
                downed_turn_speed_multiplier = readFloat(target_address + 0x088),
                swim_turn_speed_multiplier   = readFloat(target_address + 0x08C)
            },
            sprint_noise_radius = readFloat(target_address + 0x090)
        },
        steep_slope_movement = {
            slide_enter_angle            = readFloat(target_address + 0x094),
            slide_enter_minimum_duration = readFloat(target_address + 0x098),
            slide_speed                  = readFloat(target_address + 0x09C),
            slide_gravity_multiplier     = readFloat(target_address + 0x0A0),
            slide_minimum_duration       = readFloat(target_address + 0x0A4),
            slide_exit_angle             = readFloat(target_address + 0x0A8),
            slide_beyond_mover_max_angle_exit_duration = readFloat(target_address + 0x0AC),
            slowed_movement_start_angle_uphill = readFloat(target_address + 0x0B0),
            slowed_movement_max_angle_uphill = readFloat(target_address + 0x0B4),
            slowed_movement_speed_multiplier_uphill = readFloat(target_address + 0x0B8),
            slowed_movement_start_angle_downhill = readFloat(target_address + 0x0BC),
            slowed_movement_max_angle_downhill = readFloat(target_address + 0x0C0),
            slowed_movement_speed_multiplier_downhill = readFloat(target_address + 0x0C4),
            slope_angle_interpolation_fraction_per_second = readFloat(target_address + 0x0C8)
        },
        action_slide_movement_info = {
            slide_flat_duration = readFloat(target_address + 0x0CC),
            slide_flat_speed = readFloat(target_address + 0x0D0),
            slide_uphill_duration = readFloat(target_address + 0x0D4),
            slide_uphill_speed = readFloat(target_address + 0x0D8),
            slide_downhill_duration = readFloat(target_address + 0x0DC),
            slide_downhill_speed = readFloat(target_address + 0x0E0)
        },
        climb_info = {
            start_offset = {
                x = readFloat(target_address + 0x0E4),
                y = readFloat(target_address + 0x0E8),
                z = readFloat(target_address + 0x0EC)
            },
            climb_offset = {
                x = readFloat(target_address + 0x0F0),
                y = readFloat(target_address + 0x0F4),
                z = readFloat(target_address + 0x0F8)
            },
            min_height_falling = readFloat(target_address + 0x0FC),
            max_height = {
                x = readFloat(target_address + 0x100),
                y = readFloat(target_address + 0x104)
            },
            max_forward_distance = {
                x = readFloat(target_address + 0x108),
                y = readFloat(target_address + 0x10C)
            },
            forward_start_check_distance_per_ms = readFloat(target_address + 0x110),
            max_auto_step_up_height = readFloat(target_address + 0x114),
            auto_step_up_cd = readFloat(target_address + 0x118),
            climb_ref_interpolation_speed = readFloat(target_address + 0x11C)
        },
        short_throw_info = {
            throw_angle_offset = readFloat(target_address + 0x120),
            power_multiplier = readFloat(target_address + 0x124)
        },
        long_throw_info = {
            throw_angle_offset = readFloat(target_address + 0x128),
            power_multiplier = readFloat(target_address + 0x12C)
        },
        detection_info = {
            sight_modifier_standing = readFloat(target_address + 0x130),
            sight_modifier_crouching = readFloat(target_address + 0x134),
            sight_modifier_prone = readFloat(target_address + 0x138)
        },
        heal_info = {
            heal_self_duration = readFloat(target_address + 0x334),
            heal_self_decay_wait_time = readFloat(target_address + 0x338),
            heal_self_decay_rate = readFloat(target_address + 0x33C),
            heal_self_cancle_damage_amount = readFloat(target_address + 0x340)
        },
        ragdoll_info = {
            ragdoll_damage_velocity_lower = readFloat(target_address + 0x344),
            ragdoll_damage_velocity_upper = readFloat(target_address + 0x348),
            ragdoll_damage_min = readFloat(target_address + 0x34C),
            ragdoll_damage_max = readFloat(target_address + 0x350),
            ragdoll_damage_snow_modifier = readFloat(target_address + 0x354)
        },
        aim_info = {
            min_aim_duration = readFloat(target_address + 0x358),
            max_aim_duration = readFloat(target_address + 0x35C),
            min_fire_ready_duration = readFloat(target_address + 0x360),
            max_fire_ready_duration = readFloat(target_address + 0x364)
        },
        taunt_info = {
            taunt_time_before_drain = readFloat(target_address + 0x368),
            taunt_drain_per_second = readFloat(target_address + 0x36C),
            taunt_on_trigger_probability_mul = readFloat(target_address + 0x370),
            taunt_cooldown_timer = readFloat(target_address + 0x374)}}
    return {backup = deepcopy(output_template), DATA = deepcopy(output_template)}
end

function Apply_PlayerAttributes_Modifications(target_data)
    local target_address = target_data.address
    writeFloat(target_address + 0x000, target_data.move_info.speeds.reversing_multiplier)
    writeFloat(target_address + 0x004, target_data.move_info.speeds.aim)
    writeFloat(target_address + 0x008, target_data.move_info.speeds.walk)
    writeFloat(target_address + 0x00C, target_data.move_info.speeds.jog)
    writeFloat(target_address + 0x010, target_data.move_info.speeds.sprint)
    writeFloat(target_address + 0x014, target_data.move_info.speeds.sprint_exerted)
    writeFloat(target_address + 0x018, target_data.move_info.speeds.crouch_aim)
    writeFloat(target_address + 0x01C, target_data.move_info.speeds.crouch_walk)
    writeFloat(target_address + 0x020, target_data.move_info.speeds.crouch_jog)
    writeFloat(target_address + 0x024, target_data.move_info.speeds.crouch_sprint)
    writeFloat(target_address + 0x028, target_data.move_info.speeds.prone)
    writeFloat(target_address + 0x02C, target_data.move_info.speeds.swim)
    writeFloat(target_address + 0x030, target_data.move_info.stamina_info.sprint_stamina_decay_duration)
    writeFloat(target_address + 0x034, target_data.move_info.stamina_info.jog_stamina_decay_duration)
    writeFloat(target_address + 0x038, target_data.move_info.stamina_info.stamina_recover_time_stand)
    writeFloat(target_address + 0x03C, target_data.move_info.stamina_info.stamina_recover_time_crouch)
    writeFloat(target_address + 0x040, target_data.move_info.stamina_info.stamina_recover_time_prone)
    writeFloat(target_address + 0x044, target_data.move_info.stamina_info.stamina_recover_delay)
    writeFloat(target_address + 0x048, target_data.move_info.stamina_info.stamina_cost_jump)
    writeFloat(target_address + 0x04C, target_data.move_info.stamina_info.stamina_cost_dodge)
    writeFloat(target_address + 0x050, target_data.move_info.stamina_info.stamina_cost_vault)
    writeFloat(target_address + 0x054, target_data.move_info.stamina_info.stamina_cost_climb)
    writeFloat(target_address + 0x058, target_data.move_info.stamina_info.stamina_cost_slide)
    writeFloat(target_address + 0x05C, target_data.move_info.visibility_info.visibility_jump)
    writeFloat(target_address + 0x060, target_data.move_info.visibility_info.visibility_dodge)
    writeFloat(target_address + 0x064, target_data.move_info.visibility_info.visibility_vault)
    writeFloat(target_address + 0x068, target_data.move_info.visibility_info.visibility_climb)
    writeFloat(target_address + 0x06C, target_data.move_info.visibility_info.visibility_slide)
    writeFloat(target_address + 0x070, target_data.move_info.hipfire_time)
    writeFloat(target_address + 0x074, target_data.move_info.throw_hipfire_time)
    writeFloat(target_address + 0x078, target_data.move_info.turn_speed_info.crouch_turn_speed_multiplier)
    writeFloat(target_address + 0x07C, target_data.move_info.turn_speed_info.prone_turn_speed_multiplier)
    writeFloat(target_address + 0x080, target_data.move_info.turn_speed_info.jog_turn_speed_multiplier)
    writeFloat(target_address + 0x084, target_data.move_info.turn_speed_info.sprint_turn_speed_multiplier)
    writeFloat(target_address + 0x088, target_data.move_info.turn_speed_info.downed_turn_speed_multiplier)
    writeFloat(target_address + 0x08C, target_data.move_info.turn_speed_info.swim_turn_speed_multiplier)
    writeFloat(target_address + 0x090, target_data.move_info.sprint_noise_radius)
    writeFloat(target_address + 0x094, target_data.steep_slope_movement.slide_enter_angle)
    writeFloat(target_address + 0x098, target_data.steep_slope_movement.slide_enter_minimum_duration)
    writeFloat(target_address + 0x09C, target_data.steep_slope_movement.slide_speed)
    writeFloat(target_address + 0x0A0, target_data.steep_slope_movement.slide_gravity_multiplier)
    writeFloat(target_address + 0x0A4, target_data.steep_slope_movement.slide_minimum_duration)
    writeFloat(target_address + 0x0A8, target_data.steep_slope_movement.slide_exit_angle)
    writeFloat(target_address + 0x0AC, target_data.steep_slope_movement.slide_beyond_mover_max_angle_exit_duration)
    writeFloat(target_address + 0x0B0, target_data.steep_slope_movement.slowed_movement_start_angle_uphill)
    writeFloat(target_address + 0x0B4, target_data.steep_slope_movement.slowed_movement_max_angle_uphill)
    writeFloat(target_address + 0x0B8, target_data.steep_slope_movement.slowed_movement_speed_multiplier_uphill)
    writeFloat(target_address + 0x0BC, target_data.steep_slope_movement.slowed_movement_start_angle_downhill)
    writeFloat(target_address + 0x0C0, target_data.steep_slope_movement.slowed_movement_max_angle_downhill)
    writeFloat(target_address + 0x0C4, target_data.steep_slope_movement.slowed_movement_speed_multiplier_downhill)
    writeFloat(target_address + 0x0C8, target_data.steep_slope_movement.slope_angle_interpolation_fraction_per_second)
    writeFloat(target_address + 0x0CC, target_data.action_slide_movement_info.slide_flat_duration)
    writeFloat(target_address + 0x0D0, target_data.action_slide_movement_info.slide_flat_speed)
    writeFloat(target_address + 0x0D4, target_data.action_slide_movement_info.slide_uphill_duration)
    writeFloat(target_address + 0x0D8, target_data.action_slide_movement_info.slide_uphill_speed)
    writeFloat(target_address + 0x0DC, target_data.action_slide_movement_info.slide_downhill_duration)
    writeFloat(target_address + 0x0E0, target_data.action_slide_movement_info.slide_downhill_speed)
    writeFloat(target_address + 0x0E4, target_data.climb_info.start_offset.x)
    writeFloat(target_address + 0x0E8, target_data.climb_info.start_offset.y)
    writeFloat(target_address + 0x0EC, target_data.climb_info.start_offset.z)
    writeFloat(target_address + 0x0F0, target_data.climb_info.climb_offset.x)
    writeFloat(target_address + 0x0F4, target_data.climb_info.climb_offset.y)
    writeFloat(target_address + 0x0F8, target_data.climb_info.climb_offset.z)
    writeFloat(target_address + 0x0FC, target_data.climb_info.min_height_falling)
    writeFloat(target_address + 0x100, target_data.climb_info.max_height.x)
    writeFloat(target_address + 0x104, target_data.climb_info.max_height.y)
    writeFloat(target_address + 0x108, target_data.climb_info.max_forward_distance.x)
    writeFloat(target_address + 0x10C, target_data.climb_info.max_forward_distance.y)
    writeFloat(target_address + 0x110, target_data.climb_info.forward_start_check_distance_per_ms)
    writeFloat(target_address + 0x114, target_data.climb_info.max_auto_step_up_height)
    writeFloat(target_address + 0x118, target_data.climb_info.auto_step_up_cd)
    writeFloat(target_address + 0x11C, target_data.climb_info.climb_ref_interpolation_speed)
    writeFloat(target_address + 0x120, target_data.short_throw_info.throw_angle_offset)
    writeFloat(target_address + 0x124, target_data.short_throw_info.power_multiplier)
    writeFloat(target_address + 0x128, target_data.long_throw_info.throw_angle_offset)
    writeFloat(target_address + 0x12C, target_data.long_throw_info.power_multiplier)
    writeFloat(target_address + 0x130, target_data.detection_info.sight_modifier_standing)
    writeFloat(target_address + 0x134, target_data.detection_info.sight_modifier_crouching)
    writeFloat(target_address + 0x138, target_data.detection_info.sight_modifier_prone)
    writeFloat(target_address + 0x334, target_data.heal_info.heal_self_duration)
    writeFloat(target_address + 0x338, target_data.heal_info.heal_self_decay_wait_time)
    writeFloat(target_address + 0x33C, target_data.heal_info.heal_self_decay_rate)
    writeFloat(target_address + 0x340, target_data.heal_info.heal_self_cancle_damage_amount)
    writeFloat(target_address + 0x344, target_data.ragdoll_info.ragdoll_damage_velocity_lower)
    writeFloat(target_address + 0x348, target_data.ragdoll_info.ragdoll_damage_velocity_upper)
    writeFloat(target_address + 0x34C, target_data.ragdoll_info.ragdoll_damage_min)
    writeFloat(target_address + 0x350, target_data.ragdoll_info.ragdoll_damage_max)
    writeFloat(target_address + 0x354, target_data.ragdoll_info.ragdoll_damage_snow_modifier)
    writeFloat(target_address + 0x358, target_data.aim_info.min_aim_duration)
    writeFloat(target_address + 0x35C, target_data.aim_info.max_aim_duration)
    writeFloat(target_address + 0x360, target_data.aim_info.min_fire_ready_duration)
    writeFloat(target_address + 0x364, target_data.aim_info.max_fire_ready_duration)
    writeFloat(target_address + 0x368, target_data.taunt_info.taunt_time_before_drain)
    writeFloat(target_address + 0x36C, target_data.taunt_info.taunt_drain_per_second)
    writeFloat(target_address + 0x370, target_data.taunt_info.taunt_on_trigger_probability_mul)
    writeFloat(target_address + 0x374, target_data.taunt_info.taunt_cooldown_timer)
end

{$asm}
[DISABLE]
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>360</ID>
                  <Description>"Jötunheimr"</Description>
                  <Color>FFFF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{$lua}
-- // 88 bytes distancia
function Read_StatusEffect_Data(statuseffect_idx)
    local target_address = getAddress(StatusEffectLocalizator(statuseffect_idx))
    local output_template = {
        address    = target_address,
        target_id  = statuseffect_idx,
        strength                   = readFloat(target_address + 0x24),
        duration                   = readFloat(target_address + 0x28),
        damage_info_type           = readInteger(target_address + 0x2C),
        damage_ignore_avatar_armor = readInteger(target_address + 0x30)}
    return {backup = deepcopy(output_template), DATA = deepcopy(output_template)}
end

function Apply_StatusEffect_Modifications(input_mods_table)
    local target_address = input_mods_table.address
    writeFloat(target_address + 0x24,   input_mods_table.strength)
    writeFloat(target_address + 0x28,   input_mods_table.duration)
    writeInteger(target_address + 0x2C, input_mods_table.damage_info_type)
    writeInteger(target_address + 0x30, input_mods_table.damage_ignore_avatar_armor)
end


-- //! =========================================================================
-- Unit Component Data
function locateUnitComponentAddress(target_unique_id)
    output_idx = UID_Localizator(target_unique_id, unit_database)
    hex_output = string.format("%X", output_idx)
    targeto_addr = getAddress(getNameFromAddress("ValuesUnitCompData")) + 0x88*tonumber(hex_output, 16)
    output_address = string.format("%X", targeto_addr)
    output_info = {idx= output_idx, address= output_address}
    return output_info
end

function Read_UnitComponent_Data(target_unique_id)
    local target_info    = locateUnitComponentAddress(target_unique_id)
    local target_address = getAddress(target_info.address)
    fullAccess(target_address, 136)
    local output_template = {
        idx                = target_info.idx,
        address            = target_address,
        unit_path          = readQword(target_address   + 0x000),
        scale_min          = readFloat(target_address   + 0x008),
        scale_max          = readFloat(target_address   + 0x00C),
        radius             = readFloat(target_address   + 0x010)}
    return {backup = deepcopy(output_template), DATA = deepcopy(output_template)}
end

function Apply_UnitComponent_Modifications(target_data)
    target_address = target_data.address
    writeQword(target_address   + 0x000, target_data.unit_path)
    writeFloat(target_address   + 0x008, target_data.scale_min)
    writeFloat(target_address   + 0x00C, target_data.scale_max)
    writeFloat(target_address   + 0x010, target_data.radius)
end

-- //! =========================================================================
-- Hellpod Lifetime Data
function locateHellpod_LifeTimeAddress(target_unique_id)
    output_idx = UID_Localizator(target_unique_id, hpodlifetime_database)
    hex_output = string.format("%X", output_idx)
    targeto_addr = getAddress(getNameFromAddress("ValuesHellpodLifeTimeData")) + 0x20*tonumber(hex_output, 16)
    output_address = string.format("%X", targeto_addr)
    output_info = {idx= output_idx, address= output_address}
    return output_info
end

function Read_Hellpod_LifeTime_Data(target_unique_id)
    local target_info    = locateHellpod_LifeTimeAddress(target_unique_id)
    local target_address = getAddress(target_info.address)
    fullAccess(target_address, 32)
    local output_template = {
        idx                = target_info.idx,
        address            = target_address,
        remove_time        = readFloat(target_address   + 0x000),
        life_time          = readFloat(target_address   + 0x004),
        on_retract_ability = readInteger(target_address + 0x008),
        map_icon           = readQword(target_address   + 0x010),
        map_name           = readQword(target_address   + 0x018)}
    return {backup = deepcopy(output_template), DATA = deepcopy(output_template)}
end

function Apply_Hellpod_Lifetime_Modifications(target_data)
    target_address = target_data.address
    writeFloat(target_address   + 0x000, target_data.remove_time)
    writeFloat(target_address   + 0x004, target_data.life_time)
    writeInteger(target_address + 0x008, target_data.on_retract_ability)
    writeQword(target_address   + 0x010, target_data.map_icon)
    writeQword(target_address   + 0x018, target_data.map_name)
end




-- //! =========================================================================
function locateShieldParametersAddress(target_unique_id)
    output_idx = UID_Localizator(target_unique_id, shield_database)
    hex_output = string.format("%X", output_idx)
    targeto_addr = getAddress(getNameFromAddress("ValuesShieldValsCompData")) + 0x100*tonumber(hex_output, 16)
    output_address = string.format("%X", targeto_addr)
    output_info = {idx= output_idx, address= output_address}
    return output_info
end

function Read_ShieldParameters_Data(target_unique_id)
    local target_info    = locateShieldParametersAddress(target_unique_id)
    local target_address = getAddress(target_info.address)
    fullAccess(target_address, 256)
    local output_template = {
        idx                = target_info.idx,
        address            = target_address,
        radius                     = readFloat(target_address   + 0x000),
        shield_node                = readInteger(target_address + 0x004),
        charge                     = readFloat(target_address   + 0x00C),
        recharge_delay             = readFloat(target_address   + 0x018),
        broken_recharge_delay      = readFloat(target_address   + 0x01C),
        recharge_rate              = readFloat(target_address   + 0x020),
        starter_charge_on_recharge = readFloat(target_address   + 0x024),

        start_offline             = readFloat(target_address   + 0x06C),
        hit_effect_receiver_type  = readInteger(target_address + 0x094),
        inflict_pain              = readInteger(target_address + 0x098),
        block_melee_type          = readInteger(target_address + 0x09C),
        inside_shield_opacity     = readFloat(target_address   + 0x0A0),
        shield_color_type         = readInteger(target_address + 0x0A4),
        linked_to_status_effect   = readInteger(target_address + 0x0A8)}
    return {backup = deepcopy(output_template), DATA = deepcopy(output_template)}
end


function Apply_ShieldParameters_Modifications(target_data)
    local target_address        = target_data.address
    writeFloat(target_address   + 0x000, target_data.radius)
    writeInteger(target_address + 0x004, target_data.shield_node)
    writeFloat(target_address   + 0x00C, target_data.charge)
    writeFloat(target_address   + 0x018, target_data.recharge_delay)
    writeFloat(target_address   + 0x01C, target_data.broken_recharge_delay)
    writeFloat(target_address   + 0x020, target_data.recharge_rate)
    writeFloat(target_address   + 0x024, target_data.starter_charge_on_recharge)

    writeFloat(target_address   + 0x06C, target_data.start_offline)
    writeInteger(target_address + 0x094, target_data.hit_effect_receiver_type)
    writeInteger(target_address + 0x098, target_data.inflict_pain)
    writeInteger(target_address + 0x09C, target_data.block_melee_type)
    writeFloat(target_address   + 0x0A0, target_data.inside_shield_opacity)
    writeInteger(target_address + 0x0A4, target_data.shield_color_type)
    writeInteger(target_address + 0x0A8, target_data.linked_to_status_effect)
end



-- //! =========================================================================
function locateHealthConfigurationAddress(target_unique_id)
    output_idx = UID_Localizator(target_unique_id, health_database)
    hex_output = string.format("%X", output_idx)
    targeto_addr = getAddress(getNameFromAddress("ValuesHealthCompData")) + 0x4FA0*tonumber(hex_output, 16)
    output_address = string.format("%X", targeto_addr)
    output_info = {idx= output_idx, address= output_address}
    return output_info
end

function Read_HealthConfiguration_Data(target_unique_id)
    local target_info    = locateHealthConfigurationAddress(target_unique_id)
    local target_address = getAddress(target_info.address)
    fullAccess(target_address, 20384)
    local output_template = {
        idx                = target_info.idx,
        address            = target_address,
        health                             = readInteger(target_address   + 0x0000),
        health_changerate                  = readFloat(target_address     + 0x0004),
        health_changerate_disabled         = readInteger(target_address   + 0x0008),
        health_changerate_cooldown         = readFloat(target_address     + 0x000C),
        regeneration_segments              = readInteger(target_address   + 0x0010),
        regeneration_changerate            = readFloat(target_address     + 0x0014),
        constitution                       = readInteger(target_address   + 0x0018),
        constitution_changerate            = readFloat(target_address     + 0x001C),
        constitution_disables_interactions = readInteger(target_address   + 0x0020),
        zone_bleedout_changerate           = readFloat(target_address     + 0x0024),
        unit_size                          = readInteger(target_address   + 0x0028),
        unit_mass                          = readFloat(target_address     + 0x002C),
        kill_score                         = readInteger(target_address   + 0x0030),
        wounded_state = {
            sway_multiplier       = readFloat(target_address + 0x0034),
            move_speed_multiplier = readFloat(target_address + 0x0038)},
        default_dmg_zone_info = {
            dmg_multiplier    = readInteger(target_address    + 0x00F4),
            dmg_multipler_dps = readInteger(target_address    + 0x00F8),
            proj_drb_resistance = readInteger(target_address  + 0x00FC),
            armor               = readInteger(target_address  + 0x0100),
            armor_angle_check   = readInteger(target_address  + 0x0104),
            max_armor           = readInteger(target_address  + 0x0108),
            ignore_armor_on_self = readInteger(target_address + 0x010C),
            health              = readFloat(target_address    + 0x0110),
            constitution        = readInteger(target_address  + 0x0114),
            immortal            = readByte(target_address     + 0x0118),
            affects_main_health = readFloat(target_address    + 0x0120),
            regeneration_enabled = readByte(target_address    + 0x0165),
            bleedout_enabled     = readByte(target_address    + 0x0166),
            affected_by_explosions = readByte(target_address  + 0x0167),
            explosion_dmg_mult     = readFloat(target_address + 0x0168),
            affected_by_collision_impact = readInteger(target_address + 0x016C),
            on_dead_disable_all_actors   = readInteger(target_address + 0x0170),
            explosion_verification       = readInteger(target_address + 0x0174),
            main_health_affect_capped_zh = readInteger(target_address + 0x0178),
            hit_effect_receiver_type     = readInteger(target_address + 0x017C),
        },
        dmg_zones = {
            zone1 = {
                dmg_multiplier    = readInteger(target_address + 0x0294),
                dmg_multipler_dps = readInteger(target_address + 0x0298),
                proj_drb_resistance = readInteger(target_address + 0x029C),
                armor               = readInteger(target_address + 0x02A0),
                armor_angle_check   = readInteger(target_address + 0x02A4),
                max_armor           = readInteger(target_address + 0x02A8),
                ignore_armor_on_self = readInteger(target_address + 0x02AC),
                health              = readFloat(target_address + 0x02B0),
                constitution        = readInteger(target_address + 0x02B4),
                immortal            = readByte(target_address  + 0x02B8),
                affects_main_health = readFloat(target_address + 0x02C0),
                regeneration_enabled = readByte(target_address + 0x0305),
                bleedout_enabled     = readByte(target_address + 0x0306),
                affected_by_explosions = readByte(target_address + 0x0307),
                explosion_dmg_mult     = readFloat(target_address + 0x0308),
                affected_by_collision_impact = readInteger(target_address + 0x030C),
                on_dead_disable_all_actors   = readInteger(target_address + 0x0310),
                explosion_verification       = readInteger(target_address + 0x0314),
                main_health_affect_capped_zh = readInteger(target_address + 0x0318),
                hit_effect_receiver_type     = readInteger(target_address + 0x031C)},
            zone2 = {
                dmg_multiplier   = readInteger(target_address + 0x0494),
                dmg_multipler_dps = readInteger(target_address + 0x0498),
                proj_drb_resistance = readInteger(target_address + 0x049C),
                armor               = readInteger(target_address + 0x04A0),
                armor_angle_check   = readInteger(target_address + 0x04A4),
                max_armor           = readInteger(target_address + 0x04A8),
                ignore_armor_on_self = readInteger(target_address + 0x04AC),
                health              = readFloat(target_address + 0x04B0),
                constitution        = readInteger(target_address + 0x04B4),
                immortal            = readByte(target_address  + 0x04B8),
                affects_main_health = readFloat(target_address + 0x04C0),
                regeneration_enabled = readByte(target_address + 0x0505),
                bleedout_enabled     = readByte(target_address + 0x0506),
                affected_by_explosions = readByte(target_address + 0x0507),
                explosion_dmg_mult     = readFloat(target_address + 0x0508),
                affected_by_collision_impact = readInteger(target_address + 0x050C),
                on_dead_disable_all_actors   = readInteger(target_address + 0x0510),
                explosion_verification       = readInteger(target_address + 0x0514),
                main_health_affect_capped_zh = readInteger(target_address + 0x0518),
                hit_effect_receiver_type     = readInteger(target_address + 0x051C)},
            zone3 = {
                dmg_multiplier   = readInteger(target_address + 0x0694),
                dmg_multipler_dps = readInteger(target_address + 0x0698),
                proj_drb_resistance = readInteger(target_address + 0x069C),
                armor               = readInteger(target_address + 0x06A0),
                armor_angle_check   = readInteger(target_address + 0x06A4),
                max_armor           = readInteger(target_address + 0x06A8),
                ignore_armor_on_self = readInteger(target_address + 0x06AC),
                health              = readFloat(target_address + 0x06B0),
                constitution        = readInteger(target_address + 0x06B4),
                immortal            = readByte(target_address  + 0x06B8),
                affects_main_health = readFloat(target_address + 0x06C0),
                regeneration_enabled = readByte(target_address + 0x0705),
                bleedout_enabled     = readByte(target_address + 0x0706),
                affected_by_explosions = readByte(target_address + 0x0707),
                explosion_dmg_mult     = readFloat(target_address + 0x0708),
                affected_by_collision_impact = readInteger(target_address + 0x070C),
                on_dead_disable_all_actors   = readInteger(target_address + 0x0710),
                explosion_verification       = readInteger(target_address + 0x0714),
                main_health_affect_capped_zh = readInteger(target_address + 0x0718),
                hit_effect_receiver_type     = readInteger(target_address + 0x071C)},
            zone4 = {
                dmg_multiplier   = readInteger(target_address + 0x0894),
                dmg_multipler_dps = readInteger(target_address + 0x0898),
                proj_drb_resistance = readInteger(target_address + 0x089C),
                armor               = readInteger(target_address + 0x08A0),
                armor_angle_check   = readInteger(target_address + 0x08A4),
                max_armor           = readInteger(target_address + 0x08A8),
                ignore_armor_on_self = readInteger(target_address + 0x08AC),
                health              = readFloat(target_address + 0x08B0),
                constitution        = readInteger(target_address + 0x08B4),
                immortal            = readByte(target_address  + 0x08B8),
                affects_main_health = readFloat(target_address + 0x08C0),
                regeneration_enabled = readByte(target_address + 0x0905),
                bleedout_enabled     = readByte(target_address + 0x0906),
                affected_by_explosions = readByte(target_address + 0x0907),
                explosion_dmg_mult     = readFloat(target_address + 0x0908),
                affected_by_collision_impact = readInteger(target_address + 0x090C),
                on_dead_disable_all_actors   = readInteger(target_address + 0x0910),
                explosion_verification       = readInteger(target_address + 0x0914),
                main_health_affect_capped_zh = readInteger(target_address + 0x0918),
                hit_effect_receiver_type     = readInteger(target_address + 0x091C)},
            zone5 = {
                dmg_multiplier   = readInteger(target_address + 0x0A94),
                dmg_multipler_dps = readInteger(target_address + 0x0A98),
                proj_drb_resistance = readInteger(target_address + 0x0A9C),
                armor               = readInteger(target_address + 0x0AA0),
                armor_angle_check   = readInteger(target_address + 0x0AA4),
                max_armor           = readInteger(target_address + 0x0AA8),
                ignore_armor_on_self = readInteger(target_address + 0x0AAC),
                health              = readFloat(target_address + 0x0AB0),
                constitution        = readInteger(target_address + 0x0AB4),
                immortal            = readByte(target_address  + 0x0AB8),
                affects_main_health = readFloat(target_address + 0x0AC0),
                regeneration_enabled = readByte(target_address + 0x0B05),
                bleedout_enabled     = readByte(target_address + 0x0B06),
                affected_by_explosions = readByte(target_address + 0x0B07),
                explosion_dmg_mult     = readFloat(target_address + 0x0B08),
                affected_by_collision_impact = readInteger(target_address + 0x0B0C),
                on_dead_disable_all_actors   = readInteger(target_address + 0x0B10),
                explosion_verification       = readInteger(target_address + 0x0B14),
                main_health_affect_capped_zh = readInteger(target_address + 0x0B18),
                hit_effect_receiver_type     = readInteger(target_address + 0x0B1C)},
            zone6 = {
                dmg_multiplier   = readInteger(target_address + 0x0C94),
                dmg_multipler_dps = readInteger(target_address + 0x0C98),
                proj_drb_resistance = readInteger(target_address + 0x0C9C),
                armor               = readInteger(target_address + 0x0CA0),
                armor_angle_check   = readInteger(target_address + 0x0CA4),
                max_armor           = readInteger(target_address + 0x0CA8),
                ignore_armor_on_self = readInteger(target_address + 0x0CAC),
                health              = readFloat(target_address + 0x0CB0),
                constitution        = readInteger(target_address + 0x0CB4),
                immortal            = readByte(target_address  + 0x0CB8),
                affects_main_health = readFloat(target_address + 0x0CC0),
                regeneration_enabled = readByte(target_address + 0x0D05),
                bleedout_enabled     = readByte(target_address + 0x0D06),
                affected_by_explosions = readByte(target_address + 0x0D07),
                explosion_dmg_mult     = readFloat(target_address + 0x0D08),
                affected_by_collision_impact = readInteger(target_address + 0x0D0C),
                on_dead_disable_all_actors   = readInteger(target_address + 0x0D10),
                explosion_verification       = readInteger(target_address + 0x0D14),
                main_health_affect_capped_zh = readInteger(target_address + 0x0D18),
                hit_effect_receiver_type     = readInteger(target_address + 0x0D1C)},
            zone7 = {
                dmg_multiplier   = readInteger(target_address + 0x0E94),
                dmg_multipler_dps = readInteger(target_address + 0x0E98),
                proj_drb_resistance = readInteger(target_address + 0x0E9C),
                armor               = readInteger(target_address + 0x0EA0),
                armor_angle_check   = readInteger(target_address + 0x0EA4),
                max_armor           = readInteger(target_address + 0x0EA8),
                ignore_armor_on_self = readInteger(target_address + 0x0EAC),
                health              = readFloat(target_address + 0x0EB0),
                constitution        = readInteger(target_address + 0x0EB4),
                immortal            = readByte(target_address  + 0x0EB8),
                affects_main_health = readFloat(target_address + 0x0EC0),
                regeneration_enabled = readByte(target_address + 0x0F05),
                bleedout_enabled     = readByte(target_address + 0x0F06),
                affected_by_explosions = readByte(target_address + 0x0F07),
                explosion_dmg_mult     = readFloat(target_address + 0x0F08),
                affected_by_collision_impact = readInteger(target_address + 0x0F0C),
                on_dead_disable_all_actors   = readInteger(target_address + 0x0F10),
                explosion_verification       = readInteger(target_address + 0x0F14),
                main_health_affect_capped_zh = readInteger(target_address + 0x0F18),
                hit_effect_receiver_type     = readInteger(target_address + 0x0F1C)},
            zone8 = {
                dmg_multiplier   = readInteger(target_address + 0x1094),
                dmg_multipler_dps = readInteger(target_address + 0x1098),
                proj_drb_resistance = readInteger(target_address + 0x109C),
                armor               = readInteger(target_address + 0x10A0),
                armor_angle_check   = readInteger(target_address + 0x10A4),
                max_armor           = readInteger(target_address + 0x10A8),
                ignore_armor_on_self = readInteger(target_address + 0x10AC),
                health              = readFloat(target_address + 0x10B0),
                constitution        = readInteger(target_address + 0x10B4),
                immortal            = readByte(target_address  + 0x10B8),
                affects_main_health = readFloat(target_address + 0x10C0),
                regeneration_enabled = readByte(target_address + 0x1105),
                bleedout_enabled     = readByte(target_address + 0x1106),
                affected_by_explosions = readByte(target_address + 0x1107),
                explosion_dmg_mult     = readFloat(target_address + 0x1108),
                affected_by_collision_impact = readInteger(target_address + 0x110C),
                on_dead_disable_all_actors   = readInteger(target_address + 0x1110),
                explosion_verification       = readInteger(target_address + 0x1114),
                main_health_affect_capped_zh = readInteger(target_address + 0x1118),
                hit_effect_receiver_type     = readInteger(target_address + 0x111C)},
            zone9 = {
                dmg_multiplier   = readInteger(target_address + 0x1294),
                dmg_multipler_dps = readInteger(target_address + 0x1298),
                proj_drb_resistance = readInteger(target_address + 0x129C),
                armor               = readInteger(target_address + 0x12A0),
                armor_angle_check   = readInteger(target_address + 0x12A4),
                max_armor           = readInteger(target_address + 0x12A8),
                ignore_armor_on_self = readInteger(target_address + 0x12AC),
                health              = readFloat(target_address + 0x12B0),
                constitution        = readInteger(target_address + 0x12B4),
                immortal            = readByte(target_address  + 0x12B8),
                affects_main_health = readFloat(target_address + 0x12C0),
                regeneration_enabled = readByte(target_address + 0x1305),
                bleedout_enabled     = readByte(target_address + 0x1306),
                affected_by_explosions = readByte(target_address + 0x1307),
                explosion_dmg_mult     = readFloat(target_address + 0x1308),
                affected_by_collision_impact = readInteger(target_address + 0x130C),
                on_dead_disable_all_actors   = readInteger(target_address + 0x1310),
                explosion_verification       = readInteger(target_address + 0x1314),
                main_health_affect_capped_zh = readInteger(target_address + 0x1318),
                hit_effect_receiver_type     = readInteger(target_address + 0x131C)},
            zone10 = {
                dmg_multiplier   = readInteger(target_address + 0x1494),
                dmg_multipler_dps = readInteger(target_address + 0x1498),
                proj_drb_resistance = readInteger(target_address + 0x149C),
                armor               = readInteger(target_address + 0x14A0),
                armor_angle_check   = readInteger(target_address + 0x14A4),
                max_armor           = readInteger(target_address + 0x14A8),
                ignore_armor_on_self = readInteger(target_address + 0x14AC),
                health              = readFloat(target_address + 0x14B0),
                constitution        = readInteger(target_address + 0x14B4),
                immortal            = readByte(target_address  + 0x14B8),
                affects_main_health = readFloat(target_address + 0x14C0),
                regeneration_enabled = readByte(target_address + 0x1505),
                bleedout_enabled     = readByte(target_address + 0x1506),
                affected_by_explosions = readByte(target_address + 0x1507),
                explosion_dmg_mult     = readFloat(target_address + 0x1508),
                affected_by_collision_impact = readInteger(target_address + 0x150C),
                on_dead_disable_all_actors   = readInteger(target_address + 0x1510),
                explosion_verification       = readInteger(target_address + 0x1514),
                main_health_affect_capped_zh = readInteger(target_address + 0x1518),
                hit_effect_receiver_type     = readInteger(target_address + 0x151C)},
            zone11 = {
                dmg_multiplier   = readInteger(target_address + 0x1694),
                dmg_multipler_dps = readInteger(target_address + 0x1698),
                proj_drb_resistance = readInteger(target_address + 0x169C),
                armor               = readInteger(target_address + 0x16A0),
                armor_angle_check   = readInteger(target_address + 0x16A4),
                max_armor           = readInteger(target_address + 0x16A8),
                ignore_armor_on_self = readInteger(target_address + 0x16AC),
                health              = readFloat(target_address + 0x16B0),
                constitution        = readInteger(target_address + 0x16B4),
                immortal            = readByte(target_address  + 0x16B8),
                affects_main_health = readFloat(target_address + 0x16C0),
                regeneration_enabled = readByte(target_address + 0x1705),
                bleedout_enabled     = readByte(target_address + 0x1706),
                affected_by_explosions = readByte(target_address + 0x1707),
                explosion_dmg_mult     = readFloat(target_address + 0x1708),
                affected_by_collision_impact = readInteger(target_address + 0x170C),
                on_dead_disable_all_actors   = readInteger(target_address + 0x1710),
                explosion_verification       = readInteger(target_address + 0x1714),
                main_health_affect_capped_zh = readInteger(target_address + 0x1718),
                hit_effect_receiver_type     = readInteger(target_address + 0x171C)},
            zone12 = {
                dmg_multiplier   = readInteger(target_address + 0x1894),
                dmg_multipler_dps = readInteger(target_address + 0x1898),
                proj_drb_resistance = readInteger(target_address + 0x189C),
                armor               = readInteger(target_address + 0x18A0),
                armor_angle_check   = readInteger(target_address + 0x18A4),
                max_armor           = readInteger(target_address + 0x18A8),
                ignore_armor_on_self = readInteger(target_address + 0x18AC),
                health              = readFloat(target_address + 0x18B0),
                constitution        = readInteger(target_address + 0x18B4),
                immortal            = readByte(target_address  + 0x18B8),
                affects_main_health = readFloat(target_address + 0x18C0),
                regeneration_enabled = readByte(target_address + 0x1905),
                bleedout_enabled     = readByte(target_address + 0x1906),
                affected_by_explosions = readByte(target_address + 0x1907),
                explosion_dmg_mult     = readFloat(target_address + 0x1908),
                affected_by_collision_impact = readInteger(target_address + 0x190C),
                on_dead_disable_all_actors   = readInteger(target_address + 0x1910),
                explosion_verification       = readInteger(target_address + 0x1914),
                main_health_affect_capped_zh = readInteger(target_address + 0x1918),
                hit_effect_receiver_type     = readInteger(target_address + 0x191C)},
            zone13 = {
                dmg_multiplier   = readInteger(target_address + 0x1A94),
                dmg_multipler_dps = readInteger(target_address + 0x1A98),
                proj_drb_resistance = readInteger(target_address + 0x1A9C),
                armor               = readInteger(target_address + 0x1AA0),
                armor_angle_check   = readInteger(target_address + 0x1AA4),
                max_armor           = readInteger(target_address + 0x1AA8),
                ignore_armor_on_self = readInteger(target_address + 0x1AAC),
                health              = readFloat(target_address + 0x1AB0),
                constitution        = readInteger(target_address + 0x1AB4),
                immortal            = readByte(target_address  + 0x1AB8),
                affects_main_health = readFloat(target_address + 0x1AC0),
                regeneration_enabled = readByte(target_address + 0x1B05),
                bleedout_enabled     = readByte(target_address + 0x1B06),
                affected_by_explosions = readByte(target_address + 0x1B07),
                explosion_dmg_mult     = readFloat(target_address + 0x1B08),
                affected_by_collision_impact = readInteger(target_address + 0x1B0C),
                on_dead_disable_all_actors   = readInteger(target_address + 0x1B10),
                explosion_verification       = readInteger(target_address + 0x1B14),
                main_health_affect_capped_zh = readInteger(target_address + 0x1B18),
                hit_effect_receiver_type     = readInteger(target_address + 0x1B1C)},
            zone14 = {
                dmg_multiplier   = readInteger(target_address + 0x1C94),
                dmg_multipler_dps = readInteger(target_address + 0x1C98),
                proj_drb_resistance = readInteger(target_address + 0x1C9C),
                armor               = readInteger(target_address + 0x1CA0),
                armor_angle_check   = readInteger(target_address + 0x1CA4),
                max_armor           = readInteger(target_address + 0x1CA8),
                ignore_armor_on_self = readInteger(target_address + 0x1CAC),
                health              = readFloat(target_address + 0x1CB0),
                constitution        = readInteger(target_address + 0x1CB4),
                immortal            = readByte(target_address  + 0x1CB8),
                affects_main_health = readFloat(target_address + 0x1CC0),
                regeneration_enabled = readByte(target_address + 0x1D05),
                bleedout_enabled     = readByte(target_address + 0x1D06),
                affected_by_explosions = readByte(target_address + 0x1D07),
                explosion_dmg_mult     = readFloat(target_address + 0x1D08),
                affected_by_collision_impact = readInteger(target_address + 0x1D0C),
                on_dead_disable_all_actors   = readInteger(target_address + 0x1D10),
                explosion_verification       = readInteger(target_address + 0x1D14),
                main_health_affect_capped_zh = readInteger(target_address + 0x1D18),
                hit_effect_receiver_type     = readInteger(target_address + 0x1D1C)},
            zone15 = {
                dmg_multiplier   = readInteger(target_address + 0x1E94),
                dmg_multipler_dps = readInteger(target_address + 0x1E98),
                proj_drb_resistance = readInteger(target_address + 0x1E9C),
                armor               = readInteger(target_address + 0x1EA0),
                armor_angle_check   = readInteger(target_address + 0x1EA4),
                max_armor           = readInteger(target_address + 0x1EA8),
                ignore_armor_on_self = readInteger(target_address + 0x1EAC),
                health              = readFloat(target_address + 0x1EB0),
                constitution        = readInteger(target_address + 0x1EB4),
                immortal            = readByte(target_address  + 0x1EB8),
                affects_main_health = readFloat(target_address + 0x1EC0),
                regeneration_enabled = readByte(target_address + 0x1F05),
                bleedout_enabled     = readByte(target_address + 0x1F06),
                affected_by_explosions = readByte(target_address + 0x1F07),
                explosion_dmg_mult     = readFloat(target_address + 0x1F08),
                affected_by_collision_impact = readInteger(target_address + 0x1F0C),
                on_dead_disable_all_actors   = readInteger(target_address + 0x1F10),
                explosion_verification       = readInteger(target_address + 0x1F14),
                main_health_affect_capped_zh = readInteger(target_address + 0x1F18),
                hit_effect_receiver_type     = readInteger(target_address + 0x1F1C)},
            zone16 = {
                dmg_multiplier   = readInteger(target_address + 0x2094),
                dmg_multipler_dps = readInteger(target_address + 0x2098),
                proj_drb_resistance = readInteger(target_address + 0x209C),
                armor               = readInteger(target_address + 0x20A0),
                armor_angle_check   = readInteger(target_address + 0x20A4),
                max_armor           = readInteger(target_address + 0x20A8),
                ignore_armor_on_self = readInteger(target_address + 0x20AC),
                health              = readFloat(target_address + 0x20B0),
                constitution        = readInteger(target_address + 0x20B4),
                immortal            = readByte(target_address  + 0x20B8),
                affects_main_health = readFloat(target_address + 0x20C0),
                regeneration_enabled = readByte(target_address + 0x2105),
                bleedout_enabled     = readByte(target_address + 0x2106),
                affected_by_explosions = readByte(target_address + 0x2107),
                explosion_dmg_mult     = readFloat(target_address + 0x2108),
                affected_by_collision_impact = readInteger(target_address + 0x210C),
                on_dead_disable_all_actors   = readInteger(target_address + 0x2110),
                explosion_verification       = readInteger(target_address + 0x2114),
                main_health_affect_capped_zh = readInteger(target_address + 0x2118),
                hit_effect_receiver_type     = readInteger(target_address + 0x211C)},
            zone17 = {
                dmg_multiplier   = readInteger(target_address + 0x2294),
                dmg_multipler_dps = readInteger(target_address + 0x2298),
                proj_drb_resistance = readInteger(target_address + 0x229C),
                armor               = readInteger(target_address + 0x22A0),
                armor_angle_check   = readInteger(target_address + 0x22A4),
                max_armor           = readInteger(target_address + 0x22A8),
                ignore_armor_on_self = readInteger(target_address + 0x22AC),
                health              = readFloat(target_address + 0x22B0),
                constitution        = readInteger(target_address + 0x22B4),
                immortal            = readByte(target_address  + 0x22B8),
                affects_main_health = readFloat(target_address + 0x22C0),
                regeneration_enabled = readByte(target_address + 0x2305),
                bleedout_enabled     = readByte(target_address + 0x2306),
                affected_by_explosions = readByte(target_address + 0x2307),
                explosion_dmg_mult     = readFloat(target_address + 0x2308),
                affected_by_collision_impact = readInteger(target_address + 0x230C),
                on_dead_disable_all_actors   = readInteger(target_address + 0x2310),
                explosion_verification       = readInteger(target_address + 0x2314),
                main_health_affect_capped_zh = readInteger(target_address + 0x2318),
                hit_effect_receiver_type     = readInteger(target_address + 0x231C)},
            zone18 = {
                dmg_multiplier   = readInteger(target_address + 0x2494),
                dmg_multipler_dps = readInteger(target_address + 0x2498),
                proj_drb_resistance = readInteger(target_address + 0x249C),
                armor               = readInteger(target_address + 0x24A0),
                armor_angle_check   = readInteger(target_address + 0x24A4),
                max_armor           = readInteger(target_address + 0x24A8),
                ignore_armor_on_self = readInteger(target_address + 0x24AC),
                health              = readFloat(target_address + 0x24B0),
                constitution        = readInteger(target_address + 0x24B4),
                immortal            = readByte(target_address  + 0x24B8),
                affects_main_health = readFloat(target_address + 0x24C0),
                regeneration_enabled = readByte(target_address + 0x2505),
                bleedout_enabled     = readByte(target_address + 0x2506),
                affected_by_explosions = readByte(target_address + 0x2507),
                explosion_dmg_mult     = readFloat(target_address + 0x2508),
                affected_by_collision_impact = readInteger(target_address + 0x250C),
                on_dead_disable_all_actors   = readInteger(target_address + 0x2510),
                explosion_verification       = readInteger(target_address + 0x2514),
                main_health_affect_capped_zh = readInteger(target_address + 0x2518),
                hit_effect_receiver_type     = readInteger(target_address + 0x251C)},
            zone19 = {
                dmg_multiplier   = readInteger(target_address + 0x2694),
                dmg_multipler_dps = readInteger(target_address + 0x2698),
                proj_drb_resistance = readInteger(target_address + 0x269C),
                armor               = readInteger(target_address + 0x26A0),
                armor_angle_check   = readInteger(target_address + 0x26A4),
                max_armor           = readInteger(target_address + 0x26A8),
                ignore_armor_on_self = readInteger(target_address + 0x26AC),
                health              = readFloat(target_address + 0x26B0),
                constitution        = readInteger(target_address + 0x26B4),
                immortal            = readByte(target_address  + 0x26B8),
                affects_main_health = readFloat(target_address + 0x26C0),
                regeneration_enabled = readByte(target_address + 0x2705),
                bleedout_enabled     = readByte(target_address + 0x2706),
                affected_by_explosions = readByte(target_address + 0x2707),
                explosion_dmg_mult     = readFloat(target_address + 0x2708),
                affected_by_collision_impact = readInteger(target_address + 0x270C),
                on_dead_disable_all_actors   = readInteger(target_address + 0x2710),
                explosion_verification       = readInteger(target_address + 0x2714),
                main_health_affect_capped_zh = readInteger(target_address + 0x2718),
                hit_effect_receiver_type     = readInteger(target_address + 0x271C)},
            zone20 = {
                dmg_multiplier   = readInteger(target_address + 0x2894),
                dmg_multipler_dps = readInteger(target_address + 0x2898),
                proj_drb_resistance = readInteger(target_address + 0x289C),
                armor               = readInteger(target_address + 0x28A0),
                armor_angle_check   = readInteger(target_address + 0x28A4),
                max_armor           = readInteger(target_address + 0x28A8),
                ignore_armor_on_self = readInteger(target_address + 0x28AC),
                health              = readFloat(target_address + 0x28B0),
                constitution        = readInteger(target_address + 0x28B4),
                immortal            = readByte(target_address  + 0x28B8),
                affects_main_health = readFloat(target_address + 0x28C0),
                regeneration_enabled = readByte(target_address + 0x2905),
                bleedout_enabled     = readByte(target_address + 0x2906),
                affected_by_explosions = readByte(target_address + 0x2907),
                explosion_dmg_mult     = readFloat(target_address + 0x2908),
                affected_by_collision_impact = readInteger(target_address + 0x290C),
                on_dead_disable_all_actors   = readInteger(target_address + 0x2910),
                explosion_verification       = readInteger(target_address + 0x2914),
                main_health_affect_capped_zh = readInteger(target_address + 0x2918),
                hit_effect_receiver_type     = readInteger(target_address + 0x291C)},
            zone21 = {
                dmg_multiplier   = readInteger(target_address + 0x2A94),
                dmg_multipler_dps = readInteger(target_address + 0x2A98),
                proj_drb_resistance = readInteger(target_address + 0x2A9C),
                armor               = readInteger(target_address + 0x2AA0),
                armor_angle_check   = readInteger(target_address + 0x2AA4),
                max_armor           = readInteger(target_address + 0x2AA8),
                ignore_armor_on_self = readInteger(target_address + 0x2AAC),
                health              = readFloat(target_address + 0x2AB0),
                constitution        = readInteger(target_address + 0x2AB4),
                immortal            = readByte(target_address  + 0x2AB8),
                affects_main_health = readFloat(target_address + 0x2AC0),
                regeneration_enabled = readByte(target_address + 0x2B05),
                bleedout_enabled     = readByte(target_address + 0x2B06),
                affected_by_explosions = readByte(target_address + 0x2B07),
                explosion_dmg_mult     = readFloat(target_address + 0x2B08),
                affected_by_collision_impact = readInteger(target_address + 0x2B0C),
                on_dead_disable_all_actors   = readInteger(target_address + 0x2B10),
                explosion_verification       = readInteger(target_address + 0x2B14),
                main_health_affect_capped_zh = readInteger(target_address + 0x2B18),
                hit_effect_receiver_type     = readInteger(target_address + 0x2B1C)},
            zone22 = {
                dmg_multiplier   = readInteger(target_address + 0x2C94),
                dmg_multipler_dps = readInteger(target_address + 0x2C98),
                proj_drb_resistance = readInteger(target_address + 0x2C9C),
                armor               = readInteger(target_address + 0x2CA0),
                armor_angle_check   = readInteger(target_address + 0x2CA4),
                max_armor           = readInteger(target_address + 0x2CA8),
                ignore_armor_on_self = readInteger(target_address + 0x2CAC),
                health              = readFloat(target_address + 0x2CB0),
                constitution        = readInteger(target_address + 0x2CB4),
                immortal            = readByte(target_address  + 0x2CB8),
                affects_main_health = readFloat(target_address + 0x2CC0),
                regeneration_enabled = readByte(target_address + 0x2D05),
                bleedout_enabled     = readByte(target_address + 0x2D06),
                affected_by_explosions = readByte(target_address + 0x2D07),
                explosion_dmg_mult     = readFloat(target_address + 0x2D08),
                affected_by_collision_impact = readInteger(target_address + 0x2D0C),
                on_dead_disable_all_actors   = readInteger(target_address + 0x2D10),
                explosion_verification       = readInteger(target_address + 0x2D14),
                main_health_affect_capped_zh = readInteger(target_address + 0x2D18),
                hit_effect_receiver_type     = readInteger(target_address + 0x2D1C)},
            zone23 = {
                dmg_multiplier   = readInteger(target_address + 0x2E94),
                dmg_multipler_dps = readInteger(target_address + 0x2E98),
                proj_drb_resistance = readInteger(target_address + 0x2E9C),
                armor               = readInteger(target_address + 0x2EA0),
                armor_angle_check   = readInteger(target_address + 0x2EA4),
                max_armor           = readInteger(target_address + 0x2EA8),
                ignore_armor_on_self = readInteger(target_address + 0x2EAC),
                health              = readFloat(target_address + 0x2EB0),
                constitution        = readInteger(target_address + 0x2EB4),
                immortal            = readByte(target_address  + 0x2EB8),
                affects_main_health = readFloat(target_address + 0x2EC0),
                regeneration_enabled = readByte(target_address + 0x2F05),
                bleedout_enabled     = readByte(target_address + 0x2F06),
                affected_by_explosions = readByte(target_address + 0x2F07),
                explosion_dmg_mult     = readFloat(target_address + 0x2F08),
                affected_by_collision_impact = readInteger(target_address + 0x2F0C),
                on_dead_disable_all_actors   = readInteger(target_address + 0x2F10),
                explosion_verification       = readInteger(target_address + 0x2F14),
                main_health_affect_capped_zh = readInteger(target_address + 0x2F18),
                hit_effect_receiver_type     = readInteger(target_address + 0x2F1C)},
            zone24 = {
                dmg_multiplier   = readInteger(target_address + 0x3094),
                dmg_multipler_dps = readInteger(target_address + 0x3098),
                proj_drb_resistance = readInteger(target_address + 0x309C),
                armor               = readInteger(target_address + 0x30A0),
                armor_angle_check   = readInteger(target_address + 0x30A4),
                max_armor           = readInteger(target_address + 0x30A8),
                ignore_armor_on_self = readInteger(target_address + 0x30AC),
                health              = readFloat(target_address + 0x30B0),
                constitution        = readInteger(target_address + 0x30B4),
                immortal            = readByte(target_address  + 0x30B8),
                affects_main_health = readFloat(target_address + 0x30C0),
                regeneration_enabled = readByte(target_address + 0x3105),
                bleedout_enabled     = readByte(target_address + 0x3106),
                affected_by_explosions = readByte(target_address + 0x3107),
                explosion_dmg_mult     = readFloat(target_address + 0x3108),
                affected_by_collision_impact = readInteger(target_address + 0x310C),
                on_dead_disable_all_actors   = readInteger(target_address + 0x3110),
                explosion_verification       = readInteger(target_address + 0x3114),
                main_health_affect_capped_zh = readInteger(target_address + 0x3118),
                hit_effect_receiver_type     = readInteger(target_address + 0x311C)},
            zone25 = {
                dmg_multiplier   = readInteger(target_address + 0x3294),
                dmg_multipler_dps = readInteger(target_address + 0x3298),
                proj_drb_resistance = readInteger(target_address + 0x329C),
                armor               = readInteger(target_address + 0x32A0),
                armor_angle_check   = readInteger(target_address + 0x32A4),
                max_armor           = readInteger(target_address + 0x32A8),
                ignore_armor_on_self = readInteger(target_address + 0x32AC),
                health              = readFloat(target_address + 0x32B0),
                constitution        = readInteger(target_address + 0x32B4),
                immortal            = readByte(target_address  + 0x32B8),
                affects_main_health = readFloat(target_address + 0x32C0),
                regeneration_enabled = readByte(target_address + 0x3305),
                bleedout_enabled     = readByte(target_address + 0x3306),
                affected_by_explosions = readByte(target_address + 0x3307),
                explosion_dmg_mult     = readFloat(target_address + 0x3308),
                affected_by_collision_impact = readInteger(target_address + 0x330C),
                on_dead_disable_all_actors   = readInteger(target_address + 0x3310),
                explosion_verification       = readInteger(target_address + 0x3314),
                main_health_affect_capped_zh = readInteger(target_address + 0x3318),
                hit_effect_receiver_type     = readInteger(target_address + 0x331C)},
            zone26 = {
                dmg_multiplier   = readInteger(target_address + 0x3494),
                dmg_multipler_dps = readInteger(target_address + 0x3498),
                proj_drb_resistance = readInteger(target_address + 0x349C),
                armor               = readInteger(target_address + 0x34A0),
                armor_angle_check   = readInteger(target_address + 0x34A4),
                max_armor           = readInteger(target_address + 0x34A8),
                ignore_armor_on_self = readInteger(target_address + 0x34AC),
                health              = readFloat(target_address + 0x34B0),
                constitution        = readInteger(target_address + 0x34B4),
                immortal            = readByte(target_address  + 0x34B8),
                affects_main_health = readFloat(target_address + 0x34C0),
                regeneration_enabled = readByte(target_address + 0x3505),
                bleedout_enabled     = readByte(target_address + 0x3506),
                affected_by_explosions = readByte(target_address + 0x3507),
                explosion_dmg_mult     = readFloat(target_address + 0x3508),
                affected_by_collision_impact = readInteger(target_address + 0x350C),
                on_dead_disable_all_actors   = readInteger(target_address + 0x3510),
                explosion_verification       = readInteger(target_address + 0x3514),
                main_health_affect_capped_zh = readInteger(target_address + 0x3518),
                hit_effect_receiver_type     = readInteger(target_address + 0x351C)},
            zone27 = {
                dmg_multiplier   = readInteger(target_address + 0x3694),
                dmg_multipler_dps = readInteger(target_address + 0x3698),
                proj_drb_resistance = readInteger(target_address + 0x369C),
                armor               = readInteger(target_address + 0x36A0),
                armor_angle_check   = readInteger(target_address + 0x36A4),
                max_armor           = readInteger(target_address + 0x36A8),
                ignore_armor_on_self = readInteger(target_address + 0x36AC),
                health              = readFloat(target_address + 0x36B0),
                constitution        = readInteger(target_address + 0x36B4),
                immortal            = readByte(target_address  + 0x36B8),
                affects_main_health = readFloat(target_address + 0x36C0),
                regeneration_enabled = readByte(target_address + 0x3705),
                bleedout_enabled     = readByte(target_address + 0x3706),
                affected_by_explosions = readByte(target_address + 0x3707),
                explosion_dmg_mult     = readFloat(target_address + 0x3708),
                affected_by_collision_impact = readInteger(target_address + 0x370C),
                on_dead_disable_all_actors   = readInteger(target_address + 0x3710),
                explosion_verification       = readInteger(target_address + 0x3714),
                main_health_affect_capped_zh = readInteger(target_address + 0x3718),
                hit_effect_receiver_type     = readInteger(target_address + 0x371C)},
            zone28 = {
                dmg_multiplier   = readInteger(target_address + 0x3894),
                dmg_multipler_dps = readInteger(target_address + 0x3898),
                proj_drb_resistance = readInteger(target_address + 0x389C),
                armor               = readInteger(target_address + 0x38A0),
                armor_angle_check   = readInteger(target_address + 0x38A4),
                max_armor           = readInteger(target_address + 0x38A8),
                ignore_armor_on_self = readInteger(target_address + 0x38AC),
                health              = readFloat(target_address + 0x38B0),
                constitution        = readInteger(target_address + 0x38B4),
                immortal            = readByte(target_address  + 0x38B8),
                affects_main_health = readFloat(target_address + 0x38C0),
                regeneration_enabled = readByte(target_address + 0x3905),
                bleedout_enabled     = readByte(target_address + 0x3906),
                affected_by_explosions = readByte(target_address + 0x3907),
                explosion_dmg_mult     = readFloat(target_address + 0x3908),
                affected_by_collision_impact = readInteger(target_address + 0x390C),
                on_dead_disable_all_actors   = readInteger(target_address + 0x3910),
                explosion_verification       = readInteger(target_address + 0x3914),
                main_health_affect_capped_zh = readInteger(target_address + 0x3918),
                hit_effect_receiver_type     = readInteger(target_address + 0x391C)},
            zone29 = {
                dmg_multiplier   = readInteger(target_address + 0x3A94),
                dmg_multipler_dps = readInteger(target_address + 0x3A98),
                proj_drb_resistance = readInteger(target_address + 0x3A9C),
                armor               = readInteger(target_address + 0x3AA0),
                armor_angle_check   = readInteger(target_address + 0x3AA4),
                max_armor           = readInteger(target_address + 0x3AA8),
                ignore_armor_on_self = readInteger(target_address + 0x3AAC),
                health              = readFloat(target_address + 0x3AB0),
                constitution        = readInteger(target_address + 0x3AB4),
                immortal            = readByte(target_address  + 0x3AB8),
                affects_main_health = readFloat(target_address + 0x3AC0),
                regeneration_enabled = readByte(target_address + 0x3B05),
                bleedout_enabled     = readByte(target_address + 0x3B06),
                affected_by_explosions = readByte(target_address + 0x3B07),
                explosion_dmg_mult     = readFloat(target_address + 0x3B08),
                affected_by_collision_impact = readInteger(target_address + 0x3B0C),
                on_dead_disable_all_actors   = readInteger(target_address + 0x3B10),
                explosion_verification       = readInteger(target_address + 0x3B14),
                main_health_affect_capped_zh = readInteger(target_address + 0x3B18),
                hit_effect_receiver_type     = readInteger(target_address + 0x3B1C)},
            zone30 = {
                dmg_multiplier   = readInteger(target_address + 0x3C94),
                dmg_multipler_dps = readInteger(target_address + 0x3C98),
                proj_drb_resistance = readInteger(target_address + 0x3C9C),
                armor               = readInteger(target_address + 0x3CA0),
                armor_angle_check   = readInteger(target_address + 0x3CA4),
                max_armor           = readInteger(target_address + 0x3CA8),
                ignore_armor_on_self = readInteger(target_address + 0x3CAC),
                health              = readFloat(target_address + 0x3CB0),
                constitution        = readInteger(target_address + 0x3CB4),
                immortal            = readByte(target_address  + 0x3CB8),
                affects_main_health = readFloat(target_address + 0x3CC0),
                regeneration_enabled = readByte(target_address + 0x3D05),
                bleedout_enabled     = readByte(target_address + 0x3D06),
                affected_by_explosions = readByte(target_address + 0x3D07),
                explosion_dmg_mult     = readFloat(target_address + 0x3D08),
                affected_by_collision_impact = readInteger(target_address + 0x3D0C),
                on_dead_disable_all_actors   = readInteger(target_address + 0x3D10),
                explosion_verification       = readInteger(target_address + 0x3D14),
                main_health_affect_capped_zh = readInteger(target_address + 0x3D18),
                hit_effect_receiver_type     = readInteger(target_address + 0x3D1C)},
            zone31 = {
                dmg_multiplier   = readInteger(target_address + 0x3E94),
                dmg_multipler_dps = readInteger(target_address + 0x3E98),
                proj_drb_resistance = readInteger(target_address + 0x3E9C),
                armor               = readInteger(target_address + 0x3EA0),
                armor_angle_check   = readInteger(target_address + 0x3EA4),
                max_armor           = readInteger(target_address + 0x3EA8),
                ignore_armor_on_self = readInteger(target_address + 0x3EAC),
                health              = readFloat(target_address + 0x3EB0),
                constitution        = readInteger(target_address + 0x3EB4),
                immortal            = readByte(target_address  + 0x3EB8),
                affects_main_health = readFloat(target_address + 0x3EC0),
                regeneration_enabled = readByte(target_address + 0x3F05),
                bleedout_enabled     = readByte(target_address + 0x3F06),
                affected_by_explosions = readByte(target_address + 0x3F07),
                explosion_dmg_mult     = readFloat(target_address + 0x3F08),
                affected_by_collision_impact = readInteger(target_address + 0x3F0C),
                on_dead_disable_all_actors   = readInteger(target_address + 0x3F10),
                explosion_verification       = readInteger(target_address + 0x3F14),
                main_health_affect_capped_zh = readInteger(target_address + 0x3F18),
                hit_effect_receiver_type     = readInteger(target_address + 0x3F1C)},
            zone32 = {
                dmg_multiplier   = readInteger(target_address + 0x4094),
                dmg_multipler_dps = readInteger(target_address + 0x4098),
                proj_drb_resistance = readInteger(target_address + 0x409C),
                armor               = readInteger(target_address + 0x40A0),
                armor_angle_check   = readInteger(target_address + 0x40A4),
                max_armor           = readInteger(target_address + 0x40A8),
                ignore_armor_on_self = readInteger(target_address + 0x40AC),
                health              = readFloat(target_address + 0x40B0),
                constitution        = readInteger(target_address + 0x40B4),
                immortal            = readByte(target_address  + 0x40B8),
                affects_main_health = readFloat(target_address + 0x40C0),
                regeneration_enabled = readByte(target_address + 0x4105),
                bleedout_enabled     = readByte(target_address + 0x4106),
                affected_by_explosions = readByte(target_address + 0x4107),
                explosion_dmg_mult     = readFloat(target_address + 0x4108),
                affected_by_collision_impact = readInteger(target_address + 0x410C),
                on_dead_disable_all_actors   = readInteger(target_address + 0x4110),
                explosion_verification       = readInteger(target_address + 0x4114),
                main_health_affect_capped_zh = readInteger(target_address + 0x4118),
                hit_effect_receiver_type     = readInteger(target_address + 0x411C)},
            zone33 = {
                dmg_multiplier   = readInteger(target_address + 0x4294),
                dmg_multipler_dps = readInteger(target_address + 0x4298),
                proj_drb_resistance = readInteger(target_address + 0x429C),
                armor               = readInteger(target_address + 0x42A0),
                armor_angle_check   = readInteger(target_address + 0x42A4),
                max_armor           = readInteger(target_address + 0x42A8),
                ignore_armor_on_self = readInteger(target_address + 0x42AC),
                health              = readFloat(target_address + 0x42B0),
                constitution        = readInteger(target_address + 0x42B4),
                immortal            = readByte(target_address  + 0x42B8),
                affects_main_health = readFloat(target_address + 0x42C0),
                regeneration_enabled = readByte(target_address + 0x4305),
                bleedout_enabled     = readByte(target_address + 0x4306),
                affected_by_explosions = readByte(target_address + 0x4307),
                explosion_dmg_mult     = readFloat(target_address + 0x4308),
                affected_by_collision_impact = readInteger(target_address + 0x430C),
                on_dead_disable_all_actors   = readInteger(target_address + 0x4310),
                explosion_verification       = readInteger(target_address + 0x4314),
                main_health_affect_capped_zh = readInteger(target_address + 0x4318),
                hit_effect_receiver_type     = readInteger(target_address + 0x431C)},
            zone34 = {
                dmg_multiplier   = readInteger(target_address + 0x4494),
                dmg_multipler_dps = readInteger(target_address + 0x4498),
                proj_drb_resistance = readInteger(target_address + 0x449C),
                armor               = readInteger(target_address + 0x44A0),
                armor_angle_check   = readInteger(target_address + 0x44A4),
                max_armor           = readInteger(target_address + 0x44A8),
                ignore_armor_on_self = readInteger(target_address + 0x44AC),
                health              = readFloat(target_address + 0x44B0),
                constitution        = readInteger(target_address + 0x44B4),
                immortal            = readByte(target_address  + 0x44B8),
                affects_main_health = readFloat(target_address + 0x44C0),
                regeneration_enabled = readByte(target_address + 0x4505),
                bleedout_enabled     = readByte(target_address + 0x4506),
                affected_by_explosions = readByte(target_address + 0x4507),
                explosion_dmg_mult     = readFloat(target_address + 0x4508),
                affected_by_collision_impact = readInteger(target_address + 0x450C),
                on_dead_disable_all_actors   = readInteger(target_address + 0x4510),
                explosion_verification       = readInteger(target_address + 0x4514),
                main_health_affect_capped_zh = readInteger(target_address + 0x4518),
                hit_effect_receiver_type     = readInteger(target_address + 0x451C)},
            zone35 = {
                dmg_multiplier   = readInteger(target_address + 0x4694),
                dmg_multipler_dps = readInteger(target_address + 0x4698),
                proj_drb_resistance = readInteger(target_address + 0x469C),
                armor               = readInteger(target_address + 0x46A0),
                armor_angle_check   = readInteger(target_address + 0x46A4),
                max_armor           = readInteger(target_address + 0x46A8),
                ignore_armor_on_self = readInteger(target_address + 0x46AC),
                health              = readFloat(target_address + 0x46B0),
                constitution        = readInteger(target_address + 0x46B4),
                immortal            = readByte(target_address  + 0x46B8),
                affects_main_health = readFloat(target_address + 0x46C0),
                regeneration_enabled = readByte(target_address + 0x4705),
                bleedout_enabled     = readByte(target_address + 0x4706),
                affected_by_explosions = readByte(target_address + 0x4707),
                explosion_dmg_mult     = readFloat(target_address + 0x4708),
                affected_by_collision_impact = readInteger(target_address + 0x470C),
                on_dead_disable_all_actors   = readInteger(target_address + 0x4710),
                explosion_verification       = readInteger(target_address + 0x4714),
                main_health_affect_capped_zh = readInteger(target_address + 0x4718),
                hit_effect_receiver_type     = readInteger(target_address + 0x471C)},
            zone36 = {
                dmg_multiplier   = readInteger(target_address + 0x4894),
                dmg_multipler_dps = readInteger(target_address + 0x4898),
                proj_drb_resistance = readInteger(target_address + 0x489C),
                armor               = readInteger(target_address + 0x48A0),
                armor_angle_check   = readInteger(target_address + 0x48A4),
                max_armor           = readInteger(target_address + 0x48A8),
                ignore_armor_on_self = readInteger(target_address + 0x48AC),
                health              = readFloat(target_address + 0x48B0),
                constitution        = readInteger(target_address + 0x48B4),
                immortal            = readByte(target_address  + 0x48B8),
                affects_main_health = readFloat(target_address + 0x48C0),
                regeneration_enabled = readByte(target_address + 0x4905),
                bleedout_enabled     = readByte(target_address + 0x4906),
                affected_by_explosions = readByte(target_address + 0x4907),
                explosion_dmg_mult     = readFloat(target_address + 0x4908),
                affected_by_collision_impact = readInteger(target_address + 0x490C),
                on_dead_disable_all_actors   = readInteger(target_address + 0x4910),
                explosion_verification       = readInteger(target_address + 0x4914),
                main_health_affect_capped_zh = readInteger(target_address + 0x4918),
                hit_effect_receiver_type     = readInteger(target_address + 0x491C)},
            zone37 = {
                dmg_multiplier   = readInteger(target_address + 0x4A94),
                dmg_multipler_dps = readInteger(target_address + 0x4A98),
                proj_drb_resistance = readInteger(target_address + 0x4A9C),
                armor               = readInteger(target_address + 0x4AA0),
                armor_angle_check   = readInteger(target_address + 0x4AA4),
                max_armor           = readInteger(target_address + 0x4AA8),
                ignore_armor_on_self = readInteger(target_address + 0x4AAC),
                health              = readFloat(target_address + 0x4AB0),
                constitution        = readInteger(target_address + 0x4AB4),
                immortal            = readByte(target_address  + 0x4AB8),
                affects_main_health = readFloat(target_address + 0x4AC0),
                regeneration_enabled = readByte(target_address + 0x4B05),
                bleedout_enabled     = readByte(target_address + 0x4B06),
                affected_by_explosions = readByte(target_address + 0x4B07),
                explosion_dmg_mult     = readFloat(target_address + 0x4B08),
                affected_by_collision_impact = readInteger(target_address + 0x4B0C),
                on_dead_disable_all_actors   = readInteger(target_address + 0x4B10),
                explosion_verification       = readInteger(target_address + 0x4B14),
                main_health_affect_capped_zh = readInteger(target_address + 0x4B18),
                hit_effect_receiver_type     = readInteger(target_address + 0x4B1C)},
            zone38 = {
                dmg_multiplier   = readInteger(target_address + 0x4C94),
                dmg_multipler_dps = readInteger(target_address + 0x4C98),
                proj_drb_resistance = readInteger(target_address + 0x4C9C),
                armor               = readInteger(target_address + 0x4CA0),
                armor_angle_check   = readInteger(target_address + 0x4CA4),
                max_armor           = readInteger(target_address + 0x4CA8),
                ignore_armor_on_self = readInteger(target_address + 0x4CAC),
                health              = readFloat(target_address + 0x4CB0),
                constitution        = readInteger(target_address + 0x4CB4),
                immortal            = readByte(target_address  + 0x4CB8),
                affects_main_health = readFloat(target_address + 0x4CC0),
                regeneration_enabled = readByte(target_address + 0x4D05),
                bleedout_enabled     = readByte(target_address + 0x4D06),
                affected_by_explosions = readByte(target_address + 0x4D07),
                explosion_dmg_mult     = readFloat(target_address + 0x4D08),
                affected_by_collision_impact = readInteger(target_address + 0x4D0C),
                on_dead_disable_all_actors   = readInteger(target_address + 0x4D10),
                explosion_verification       = readInteger(target_address + 0x4D14),
                main_health_affect_capped_zh = readInteger(target_address + 0x4D18),
                hit_effect_receiver_type     = readInteger(target_address + 0x4D1C)},
            },
        elem_dmg  = {
            elem1_type = readInteger(target_address + 0x4DE0),
            elem1_mult = readFloat(target_address   + 0x4DE4),
            elem2_type = readInteger(target_address + 0x4DE8),
            elem2_mult = readFloat(target_address   + 0x4DEC),
            elem3_type = readInteger(target_address + 0x4DF0),
            elem3_mult = readFloat(target_address   + 0x4DF4),
            elem4_type = readInteger(target_address + 0x4DF8),
            elem4_mult = readFloat(target_address   + 0x4DFC)},
        decay     = {
            mode      = readInteger(target_address + 0x4E00),
            accel     = readFloat(target_address   + 0x4E04),
            min_delay = readFloat(target_address   + 0x4E08),
            max_delay = readFloat(target_address   + 0x4E0C),
        },
        -- // UNUSED: death_snd_ids = {},
        -- // UNUSED: on_hit_effect = {},
        -- // UNUSED: while_alive_effect = {},
        -- // UNUSED: on_death_effect = {},
        -- // UNUSED: bled_to_death_effect = {},
        require_demo             = readInteger(target_address + 0x4F64),
        downed_anim              = readInteger(target_address + 0x4F68),
        dead_anim                = readInteger(target_address + 0x4F6C),
        on_downed_hide_vis_group = readInteger(target_address + 0x4F70),
        on_downed_show_vis_group = readInteger(target_address + 0x4F74),
        on_dead_hide_vis_group   = readInteger(target_address + 0x4F78),
        on_dead_show_vis_group   = readInteger(target_address + 0x4F7C),
        on_death_destruct_lvl    = readInteger(target_address + 0x4F80),
        can_die_naturally        = readInteger(target_address + 0x4F84),
        death_propagation        = readInteger(target_address + 0x4F88),
        ui_health_str = {
            str1 = readInteger(target_address + 0x4F8C),
            str2 = readInteger(target_address + 0x4F90),
            str3 = readInteger(target_address + 0x4F94),
            str4 = readInteger(target_address + 0x4F98)}}
    return {backup = deepcopy(output_template), DATA = deepcopy(output_template)}
end

function Apply_HealthConfiguration_Modifications(target_data)
    target_address = target_data.address
    writeInteger(target_address + 0x0000, target_data.health)
    writeFloat(target_address   + 0x0004, target_data.health_changerate)
    writeInteger(target_address + 0x0008, target_data.health_changerate_disabled)
    writeFloat(target_address   + 0x000C, target_data.health_changerate_cooldown)
    writeInteger(target_address + 0x0010, target_data.regeneration_segments)
    writeFloat(target_address   + 0x0014, target_data.regeneration_changerate)
    writeInteger(target_address + 0x0018, target_data.constitution)
    writeFloat(target_address   + 0x001C, target_data.constitution_changerate)
    writeInteger(target_address + 0x0020, target_data.constitution_disables_interactions)
    writeFloat(target_address   + 0x0024, target_data.zone_bleedout_changerate)
    writeInteger(target_address + 0x0028, target_data.unit_size)
    writeFloat(target_address   + 0x002C, target_data.unit_mass)
    writeInteger(target_address + 0x0030, target_data.kill_score)
    writeFloat(target_address   + 0x0034, target_data.wounded_state.sway_multiplier)
    writeFloat(target_address   + 0x0038, target_data.wounded_state.move_speed_multiplier)
    writeInteger(target_address + 0x00F4, target_data.default_dmg_zone_info.dmg_multiplier)
    writeInteger(target_address + 0x00F8, target_data.default_dmg_zone_info.dmg_multipler_dps)
    writeInteger(target_address + 0x00FC, target_data.default_dmg_zone_info.proj_drb_resistance)
    writeInteger(target_address + 0x0100, target_data.default_dmg_zone_info.armor)
    writeInteger(target_address + 0x0104, target_data.default_dmg_zone_info.armor_angle_check)
    writeInteger(target_address + 0x0108, target_data.default_dmg_zone_info.max_armor)
    writeInteger(target_address + 0x010C, target_data.default_dmg_zone_info.ignore_armor_on_self)
    writeFloat(target_address   + 0x0110, target_data.default_dmg_zone_info.health)
    writeInteger(target_address + 0x0114, target_data.default_dmg_zone_info.constitution)
    writeByte(target_address    + 0x0118, target_data.default_dmg_zone_info.immortal)
    writeFloat(target_address   + 0x0120, target_data.default_dmg_zone_info.affects_main_health)
    writeByte(target_address    + 0x0165, target_data.default_dmg_zone_info.regeneration_enabled)
    writeByte(target_address    + 0x0166, target_data.default_dmg_zone_info.bleedout_enabled)
    writeByte(target_address    + 0x0167, target_data.default_dmg_zone_info.affected_by_explosions)
    writeFloat(target_address   + 0x0168, target_data.default_dmg_zone_info.explosion_dmg_mult)
    writeInteger(target_address + 0x016C, target_data.default_dmg_zone_info.affected_by_collision_impact)
    writeInteger(target_address + 0x0170, target_data.default_dmg_zone_info.on_dead_disable_all_actors)
    writeInteger(target_address + 0x0174, target_data.default_dmg_zone_info.explosion_verification)
    writeInteger(target_address + 0x0178, target_data.default_dmg_zone_info.main_health_affect_capped_zh)
    writeInteger(target_address + 0x017C, target_data.default_dmg_zone_info.hit_effect_receiver_type)
    writeInteger(target_address + 0x0294, target_data.dmg_zones.zone1.dmg_multiplier)
    writeInteger(target_address + 0x0298, target_data.dmg_zones.zone1.dmg_multipler_dps)
    writeInteger(target_address + 0x029C, target_data.dmg_zones.zone1.proj_drb_resistance)
    writeInteger(target_address + 0x02A0, target_data.dmg_zones.zone1.armor)
    writeInteger(target_address + 0x02A4, target_data.dmg_zones.zone1.armor_angle_check)
    writeInteger(target_address + 0x02A8, target_data.dmg_zones.zone1.max_armor)
    writeInteger(target_address + 0x02AC, target_data.dmg_zones.zone1.ignore_armor_on_self)
    writeFloat(target_address   + 0x02B0, target_data.dmg_zones.zone1.health)
    writeInteger(target_address + 0x02B4, target_data.dmg_zones.zone1.constitution)
    writeByte(target_address    + 0x02B8, target_data.dmg_zones.zone1.immortal)
    writeFloat(target_address   + 0x02C0, target_data.dmg_zones.zone1.affects_main_health)
    writeByte(target_address    + 0x0305, target_data.dmg_zones.zone1.regeneration_enabled)
    writeByte(target_address    + 0x0306, target_data.dmg_zones.zone1.bleedout_enabled)
    writeByte(target_address    + 0x0307, target_data.dmg_zones.zone1.affected_by_explosions)
    writeFloat(target_address   + 0x0308, target_data.dmg_zones.zone1.explosion_dmg_mult)
    writeInteger(target_address + 0x030C, target_data.dmg_zones.zone1.affected_by_collision_impact)
    writeInteger(target_address + 0x0310, target_data.dmg_zones.zone1.on_dead_disable_all_actors)
    writeInteger(target_address + 0x0314, target_data.dmg_zones.zone1.explosion_verification)
    writeInteger(target_address + 0x0318, target_data.dmg_zones.zone1.main_health_affect_capped_zh)
    writeInteger(target_address + 0x031C, target_data.dmg_zones.zone1.hit_effect_receiver_type)
    -- //! ================     Z O N E 2
    writeInteger(target_address + 0x0494, target_data.dmg_zones.zone2.dmg_multiplier)
    writeInteger(target_address + 0x0498, target_data.dmg_zones.zone2.dmg_multipler_dps)
    writeInteger(target_address + 0x049C, target_data.dmg_zones.zone2.proj_drb_resistance)
    writeInteger(target_address + 0x04A0, target_data.dmg_zones.zone2.armor)
    writeInteger(target_address + 0x04A4, target_data.dmg_zones.zone2.armor_angle_check)
    writeInteger(target_address + 0x04A8, target_data.dmg_zones.zone2.max_armor)
    writeInteger(target_address + 0x04AC, target_data.dmg_zones.zone2.ignore_armor_on_self)
    writeFloat(target_address   + 0x04B0, target_data.dmg_zones.zone2.health)
    writeInteger(target_address + 0x04B4, target_data.dmg_zones.zone2.constitution)
    writeByte(target_address    + 0x04B8, target_data.dmg_zones.zone2.immortal)
    writeFloat(target_address   + 0x04C0, target_data.dmg_zones.zone2.affects_main_health)
    writeByte(target_address    + 0x0505, target_data.dmg_zones.zone2.regeneration_enabled)
    writeByte(target_address    + 0x0506, target_data.dmg_zones.zone2.bleedout_enabled)
    writeByte(target_address    + 0x0507, target_data.dmg_zones.zone2.affected_by_explosions)
    writeFloat(target_address   + 0x0508, target_data.dmg_zones.zone2.explosion_dmg_mult)
    writeInteger(target_address + 0x050C, target_data.dmg_zones.zone2.affected_by_collision_impact)
    writeInteger(target_address + 0x0510, target_data.dmg_zones.zone2.on_dead_disable_all_actors)
    writeInteger(target_address + 0x0514, target_data.dmg_zones.zone2.explosion_verification)
    writeInteger(target_address + 0x0518, target_data.dmg_zones.zone2.main_health_affect_capped_zh)
    writeInteger(target_address + 0x051C, target_data.dmg_zones.zone2.hit_effect_receiver_type)
    -- //! ================     Z O N E 3
    writeInteger(target_address + 0x0694, target_data.dmg_zones.zone3.dmg_multiplier)
    writeInteger(target_address + 0x0698, target_data.dmg_zones.zone3.dmg_multipler_dps)
    writeInteger(target_address + 0x069C, target_data.dmg_zones.zone3.proj_drb_resistance)
    writeInteger(target_address + 0x06A0, target_data.dmg_zones.zone3.armor)
    writeInteger(target_address + 0x06A4, target_data.dmg_zones.zone3.armor_angle_check)
    writeInteger(target_address + 0x06A8, target_data.dmg_zones.zone3.max_armor)
    writeInteger(target_address + 0x06AC, target_data.dmg_zones.zone3.ignore_armor_on_self)
    writeFloat(target_address   + 0x06B0, target_data.dmg_zones.zone3.health)
    writeInteger(target_address + 0x06B4, target_data.dmg_zones.zone3.constitution)
    writeByte(target_address    + 0x06B8, target_data.dmg_zones.zone3.immortal)
    writeFloat(target_address   + 0x06C0, target_data.dmg_zones.zone3.affects_main_health)
    writeByte(target_address    + 0x0705, target_data.dmg_zones.zone3.regeneration_enabled)
    writeByte(target_address    + 0x0706, target_data.dmg_zones.zone3.bleedout_enabled)
    writeByte(target_address    + 0x0707, target_data.dmg_zones.zone3.affected_by_explosions)
    writeFloat(target_address   + 0x0708, target_data.dmg_zones.zone3.explosion_dmg_mult)
    writeInteger(target_address + 0x070C, target_data.dmg_zones.zone3.affected_by_collision_impact)
    writeInteger(target_address + 0x0710, target_data.dmg_zones.zone3.on_dead_disable_all_actors)
    writeInteger(target_address + 0x0714, target_data.dmg_zones.zone3.explosion_verification)
    writeInteger(target_address + 0x0718, target_data.dmg_zones.zone3.main_health_affect_capped_zh)
    writeInteger(target_address + 0x071C, target_data.dmg_zones.zone3.hit_effect_receiver_type)
    -- //! ================     Z O N E 4
    writeInteger(target_address + 0x0894, target_data.dmg_zones.zone4.dmg_multiplier)
    writeInteger(target_address + 0x0898, target_data.dmg_zones.zone4.dmg_multipler_dps)
    writeInteger(target_address + 0x089C, target_data.dmg_zones.zone4.proj_drb_resistance)
    writeInteger(target_address + 0x08A0, target_data.dmg_zones.zone4.armor)
    writeInteger(target_address + 0x08A4, target_data.dmg_zones.zone4.armor_angle_check)
    writeInteger(target_address + 0x08A8, target_data.dmg_zones.zone4.max_armor)
    writeInteger(target_address + 0x08AC, target_data.dmg_zones.zone4.ignore_armor_on_self)
    writeFloat(target_address   + 0x08B0, target_data.dmg_zones.zone4.health)
    writeInteger(target_address + 0x08B4, target_data.dmg_zones.zone4.constitution)
    writeByte(target_address    + 0x08B8, target_data.dmg_zones.zone4.immortal)
    writeFloat(target_address   + 0x08C0, target_data.dmg_zones.zone4.affects_main_health)
    writeByte(target_address    + 0x0905, target_data.dmg_zones.zone4.regeneration_enabled)
    writeByte(target_address    + 0x0906, target_data.dmg_zones.zone4.bleedout_enabled)
    writeByte(target_address    + 0x0907, target_data.dmg_zones.zone4.affected_by_explosions)
    writeFloat(target_address   + 0x0908, target_data.dmg_zones.zone4.explosion_dmg_mult)
    writeInteger(target_address + 0x090C, target_data.dmg_zones.zone4.affected_by_collision_impact)
    writeInteger(target_address + 0x0910, target_data.dmg_zones.zone4.on_dead_disable_all_actors)
    writeInteger(target_address + 0x0914, target_data.dmg_zones.zone4.explosion_verification)
    writeInteger(target_address + 0x0918, target_data.dmg_zones.zone4.main_health_affect_capped_zh)
    writeInteger(target_address + 0x091C, target_data.dmg_zones.zone4.hit_effect_receiver_type)
    -- //! ================     Z O N E 5
    writeInteger(target_address + 0x0A94, target_data.dmg_zones.zone5.dmg_multiplier)
    writeInteger(target_address + 0x0A98, target_data.dmg_zones.zone5.dmg_multipler_dps)
    writeInteger(target_address + 0x0A9C, target_data.dmg_zones.zone5.proj_drb_resistance)
    writeInteger(target_address + 0x0AA0, target_data.dmg_zones.zone5.armor)
    writeInteger(target_address + 0x0AA4, target_data.dmg_zones.zone5.armor_angle_check)
    writeInteger(target_address + 0x0AA8, target_data.dmg_zones.zone5.max_armor)
    writeInteger(target_address + 0x0AAC, target_data.dmg_zones.zone5.ignore_armor_on_self)
    writeFloat(target_address   + 0x0AB0, target_data.dmg_zones.zone5.health)
    writeInteger(target_address + 0x0AB4, target_data.dmg_zones.zone5.constitution)
    writeByte(target_address    + 0x0AB8, target_data.dmg_zones.zone5.immortal)
    writeFloat(target_address   + 0x0AC0, target_data.dmg_zones.zone5.affects_main_health)
    writeByte(target_address    + 0x0B05, target_data.dmg_zones.zone5.regeneration_enabled)
    writeByte(target_address    + 0x0B06, target_data.dmg_zones.zone5.bleedout_enabled)
    writeByte(target_address    + 0x0B07, target_data.dmg_zones.zone5.affected_by_explosions)
    writeFloat(target_address   + 0x0B08, target_data.dmg_zones.zone5.explosion_dmg_mult)
    writeInteger(target_address + 0x0B0C, target_data.dmg_zones.zone5.affected_by_collision_impact)
    writeInteger(target_address + 0x0B10, target_data.dmg_zones.zone5.on_dead_disable_all_actors)
    writeInteger(target_address + 0x0B14, target_data.dmg_zones.zone5.explosion_verification)
    writeInteger(target_address + 0x0B18, target_data.dmg_zones.zone5.main_health_affect_capped_zh)
    writeInteger(target_address + 0x0B1C, target_data.dmg_zones.zone5.hit_effect_receiver_type)
    -- //! ================     Z O N E 6
    writeInteger(target_address + 0x0C94, target_data.dmg_zones.zone6.dmg_multiplier)
    writeInteger(target_address + 0x0C98, target_data.dmg_zones.zone6.dmg_multipler_dps)
    writeInteger(target_address + 0x0C9C, target_data.dmg_zones.zone6.proj_drb_resistance)
    writeInteger(target_address + 0x0CA0, target_data.dmg_zones.zone6.armor)
    writeInteger(target_address + 0x0CA4, target_data.dmg_zones.zone6.armor_angle_check)
    writeInteger(target_address + 0x0CA8, target_data.dmg_zones.zone6.max_armor)
    writeInteger(target_address + 0x0CAC, target_data.dmg_zones.zone6.ignore_armor_on_self)
    writeFloat(target_address   + 0x0CB0, target_data.dmg_zones.zone6.health)
    writeInteger(target_address + 0x0CB4, target_data.dmg_zones.zone6.constitution)
    writeByte(target_address    + 0x0CB8, target_data.dmg_zones.zone6.immortal)
    writeFloat(target_address   + 0x0CC0, target_data.dmg_zones.zone6.affects_main_health)
    writeByte(target_address    + 0x0D05, target_data.dmg_zones.zone6.regeneration_enabled)
    writeByte(target_address    + 0x0D06, target_data.dmg_zones.zone6.bleedout_enabled)
    writeByte(target_address    + 0x0D07, target_data.dmg_zones.zone6.affected_by_explosions)
    writeFloat(target_address   + 0x0D08, target_data.dmg_zones.zone6.explosion_dmg_mult)
    writeInteger(target_address + 0x0D0C, target_data.dmg_zones.zone6.affected_by_collision_impact)
    writeInteger(target_address + 0x0D10, target_data.dmg_zones.zone6.on_dead_disable_all_actors)
    writeInteger(target_address + 0x0D14, target_data.dmg_zones.zone6.explosion_verification)
    writeInteger(target_address + 0x0D18, target_data.dmg_zones.zone6.main_health_affect_capped_zh)
    writeInteger(target_address + 0x0D1C, target_data.dmg_zones.zone6.hit_effect_receiver_type)
    -- //! ================     Z O N E 7
    writeInteger(target_address + 0x0E94, target_data.dmg_zones.zone7.dmg_multiplier)
    writeInteger(target_address + 0x0E98, target_data.dmg_zones.zone7.dmg_multipler_dps)
    writeInteger(target_address + 0x0E9C, target_data.dmg_zones.zone7.proj_drb_resistance)
    writeInteger(target_address + 0x0EA0, target_data.dmg_zones.zone7.armor)
    writeInteger(target_address + 0x0EA4, target_data.dmg_zones.zone7.armor_angle_check)
    writeInteger(target_address + 0x0EA8, target_data.dmg_zones.zone7.max_armor)
    writeInteger(target_address + 0x0EAC, target_data.dmg_zones.zone7.ignore_armor_on_self)
    writeFloat(target_address   + 0x0EB0, target_data.dmg_zones.zone7.health)
    writeInteger(target_address + 0x0EB4, target_data.dmg_zones.zone7.constitution)
    writeByte(target_address    + 0x0EB8, target_data.dmg_zones.zone7.immortal)
    writeFloat(target_address   + 0x0EC0, target_data.dmg_zones.zone7.affects_main_health)
    writeByte(target_address    + 0x0F05, target_data.dmg_zones.zone7.regeneration_enabled)
    writeByte(target_address    + 0x0F06, target_data.dmg_zones.zone7.bleedout_enabled)
    writeByte(target_address    + 0x0F07, target_data.dmg_zones.zone7.affected_by_explosions)
    writeFloat(target_address   + 0x0F08, target_data.dmg_zones.zone7.explosion_dmg_mult)
    writeInteger(target_address + 0x0F0C, target_data.dmg_zones.zone7.affected_by_collision_impact)
    writeInteger(target_address + 0x0F10, target_data.dmg_zones.zone7.on_dead_disable_all_actors)
    writeInteger(target_address + 0x0F14, target_data.dmg_zones.zone7.explosion_verification)
    writeInteger(target_address + 0x0F18, target_data.dmg_zones.zone7.main_health_affect_capped_zh)
    writeInteger(target_address + 0x0F1C, target_data.dmg_zones.zone7.hit_effect_receiver_type)
    -- //! ================     Z O N E 8
    writeInteger(target_address + 0x1094, target_data.dmg_zones.zone8.dmg_multiplier)
    writeInteger(target_address + 0x1098, target_data.dmg_zones.zone8.dmg_multipler_dps)
    writeInteger(target_address + 0x109C, target_data.dmg_zones.zone8.proj_drb_resistance)
    writeInteger(target_address + 0x10A0, target_data.dmg_zones.zone8.armor)
    writeInteger(target_address + 0x10A4, target_data.dmg_zones.zone8.armor_angle_check)
    writeInteger(target_address + 0x10A8, target_data.dmg_zones.zone8.max_armor)
    writeInteger(target_address + 0x10AC, target_data.dmg_zones.zone8.ignore_armor_on_self)
    writeFloat(target_address   + 0x10B0, target_data.dmg_zones.zone8.health)
    writeInteger(target_address + 0x10B4, target_data.dmg_zones.zone8.constitution)
    writeByte(target_address    + 0x10B8, target_data.dmg_zones.zone8.immortal)
    writeFloat(target_address   + 0x10C0, target_data.dmg_zones.zone8.affects_main_health)
    writeByte(target_address    + 0x1105, target_data.dmg_zones.zone8.regeneration_enabled)
    writeByte(target_address    + 0x1106, target_data.dmg_zones.zone8.bleedout_enabled)
    writeByte(target_address    + 0x1107, target_data.dmg_zones.zone8.affected_by_explosions)
    writeFloat(target_address   + 0x1108, target_data.dmg_zones.zone8.explosion_dmg_mult)
    writeInteger(target_address + 0x110C, target_data.dmg_zones.zone8.affected_by_collision_impact)
    writeInteger(target_address + 0x1110, target_data.dmg_zones.zone8.on_dead_disable_all_actors)
    writeInteger(target_address + 0x1114, target_data.dmg_zones.zone8.explosion_verification)
    writeInteger(target_address + 0x1118, target_data.dmg_zones.zone8.main_health_affect_capped_zh)
    writeInteger(target_address + 0x111C, target_data.dmg_zones.zone8.hit_effect_receiver_type)
    -- //! ================     Z O N E 9
    writeInteger(target_address + 0x1294, target_data.dmg_zones.zone9.dmg_multiplier)
    writeInteger(target_address + 0x1298, target_data.dmg_zones.zone9.dmg_multipler_dps)
    writeInteger(target_address + 0x129C, target_data.dmg_zones.zone9.proj_drb_resistance)
    writeInteger(target_address + 0x12A0, target_data.dmg_zones.zone9.armor)
    writeInteger(target_address + 0x12A4, target_data.dmg_zones.zone9.armor_angle_check)
    writeInteger(target_address + 0x12A8, target_data.dmg_zones.zone9.max_armor)
    writeInteger(target_address + 0x12AC, target_data.dmg_zones.zone9.ignore_armor_on_self)
    writeFloat(target_address   + 0x12B0, target_data.dmg_zones.zone9.health)
    writeInteger(target_address + 0x12B4, target_data.dmg_zones.zone9.constitution)
    writeByte(target_address    + 0x12B8, target_data.dmg_zones.zone9.immortal)
    writeFloat(target_address   + 0x12C0, target_data.dmg_zones.zone9.affects_main_health)
    writeByte(target_address    + 0x1305, target_data.dmg_zones.zone9.regeneration_enabled)
    writeByte(target_address    + 0x1306, target_data.dmg_zones.zone9.bleedout_enabled)
    writeByte(target_address    + 0x1307, target_data.dmg_zones.zone9.affected_by_explosions)
    writeFloat(target_address   + 0x1308, target_data.dmg_zones.zone9.explosion_dmg_mult)
    writeInteger(target_address + 0x130C, target_data.dmg_zones.zone9.affected_by_collision_impact)
    writeInteger(target_address + 0x1310, target_data.dmg_zones.zone9.on_dead_disable_all_actors)
    writeInteger(target_address + 0x1314, target_data.dmg_zones.zone9.explosion_verification)
    writeInteger(target_address + 0x1318, target_data.dmg_zones.zone9.main_health_affect_capped_zh)
    writeInteger(target_address + 0x131C, target_data.dmg_zones.zone9.hit_effect_receiver_type)
    -- //! ================     Z O N E 10
    writeInteger(target_address + 0x1494, target_data.dmg_zones.zone10.dmg_multiplier)
    writeInteger(target_address + 0x1498, target_data.dmg_zones.zone10.dmg_multipler_dps)
    writeInteger(target_address + 0x149C, target_data.dmg_zones.zone10.proj_drb_resistance)
    writeInteger(target_address + 0x14A0, target_data.dmg_zones.zone10.armor)
    writeInteger(target_address + 0x14A4, target_data.dmg_zones.zone10.armor_angle_check)
    writeInteger(target_address + 0x14A8, target_data.dmg_zones.zone10.max_armor)
    writeInteger(target_address + 0x14AC, target_data.dmg_zones.zone10.ignore_armor_on_self)
    writeFloat(target_address   + 0x14B0, target_data.dmg_zones.zone10.health)
    writeInteger(target_address + 0x14B4, target_data.dmg_zones.zone10.constitution)
    writeByte(target_address    + 0x14B8, target_data.dmg_zones.zone10.immortal)
    writeFloat(target_address   + 0x14C0, target_data.dmg_zones.zone10.affects_main_health)
    writeByte(target_address    + 0x1505, target_data.dmg_zones.zone10.regeneration_enabled)
    writeByte(target_address    + 0x1506, target_data.dmg_zones.zone10.bleedout_enabled)
    writeByte(target_address    + 0x1507, target_data.dmg_zones.zone10.affected_by_explosions)
    writeFloat(target_address   + 0x1508, target_data.dmg_zones.zone10.explosion_dmg_mult)
    writeInteger(target_address + 0x150C, target_data.dmg_zones.zone10.affected_by_collision_impact)
    writeInteger(target_address + 0x1510, target_data.dmg_zones.zone10.on_dead_disable_all_actors)
    writeInteger(target_address + 0x1514, target_data.dmg_zones.zone10.explosion_verification)
    writeInteger(target_address + 0x1518, target_data.dmg_zones.zone10.main_health_affect_capped_zh)
    writeInteger(target_address + 0x151C, target_data.dmg_zones.zone10.hit_effect_receiver_type)
    -- //! ================     Z O N E 11
    writeInteger(target_address + 0x1694, target_data.dmg_zones.zone11.dmg_multiplier)
    writeInteger(target_address + 0x1698, target_data.dmg_zones.zone11.dmg_multipler_dps)
    writeInteger(target_address + 0x169C, target_data.dmg_zones.zone11.proj_drb_resistance)
    writeInteger(target_address + 0x16A0, target_data.dmg_zones.zone11.armor)
    writeInteger(target_address + 0x16A4, target_data.dmg_zones.zone11.armor_angle_check)
    writeInteger(target_address + 0x16A8, target_data.dmg_zones.zone11.max_armor)
    writeInteger(target_address + 0x16AC, target_data.dmg_zones.zone11.ignore_armor_on_self)
    writeFloat(target_address   + 0x16B0, target_data.dmg_zones.zone11.health)
    writeInteger(target_address + 0x16B4, target_data.dmg_zones.zone11.constitution)
    writeByte(target_address    + 0x16B8, target_data.dmg_zones.zone11.immortal)
    writeFloat(target_address   + 0x16C0, target_data.dmg_zones.zone11.affects_main_health)
    writeByte(target_address    + 0x1705, target_data.dmg_zones.zone11.regeneration_enabled)
    writeByte(target_address    + 0x1706, target_data.dmg_zones.zone11.bleedout_enabled)
    writeByte(target_address    + 0x1707, target_data.dmg_zones.zone11.affected_by_explosions)
    writeFloat(target_address   + 0x1708, target_data.dmg_zones.zone11.explosion_dmg_mult)
    writeInteger(target_address + 0x170C, target_data.dmg_zones.zone11.affected_by_collision_impact)
    writeInteger(target_address + 0x1710, target_data.dmg_zones.zone11.on_dead_disable_all_actors)
    writeInteger(target_address + 0x1714, target_data.dmg_zones.zone11.explosion_verification)
    writeInteger(target_address + 0x1718, target_data.dmg_zones.zone11.main_health_affect_capped_zh)
    writeInteger(target_address + 0x171C, target_data.dmg_zones.zone11.hit_effect_receiver_type)
    -- //! ================     Z O N E 12
    writeInteger(target_address + 0x1894, target_data.dmg_zones.zone12.dmg_multiplier)
    writeInteger(target_address + 0x1898, target_data.dmg_zones.zone12.dmg_multipler_dps)
    writeInteger(target_address + 0x189C, target_data.dmg_zones.zone12.proj_drb_resistance)
    writeInteger(target_address + 0x18A0, target_data.dmg_zones.zone12.armor)
    writeInteger(target_address + 0x18A4, target_data.dmg_zones.zone12.armor_angle_check)
    writeInteger(target_address + 0x18A8, target_data.dmg_zones.zone12.max_armor)
    writeInteger(target_address + 0x18AC, target_data.dmg_zones.zone12.ignore_armor_on_self)
    writeFloat(target_address   + 0x18B0, target_data.dmg_zones.zone12.health)
    writeInteger(target_address + 0x18B4, target_data.dmg_zones.zone12.constitution)
    writeByte(target_address    + 0x18B8, target_data.dmg_zones.zone12.immortal)
    writeFloat(target_address   + 0x18C0, target_data.dmg_zones.zone12.affects_main_health)
    writeByte(target_address    + 0x1905, target_data.dmg_zones.zone12.regeneration_enabled)
    writeByte(target_address    + 0x1906, target_data.dmg_zones.zone12.bleedout_enabled)
    writeByte(target_address    + 0x1907, target_data.dmg_zones.zone12.affected_by_explosions)
    writeFloat(target_address   + 0x1908, target_data.dmg_zones.zone12.explosion_dmg_mult)
    writeInteger(target_address + 0x190C, target_data.dmg_zones.zone12.affected_by_collision_impact)
    writeInteger(target_address + 0x1910, target_data.dmg_zones.zone12.on_dead_disable_all_actors)
    writeInteger(target_address + 0x1914, target_data.dmg_zones.zone12.explosion_verification)
    writeInteger(target_address + 0x1918, target_data.dmg_zones.zone12.main_health_affect_capped_zh)
    writeInteger(target_address + 0x191C, target_data.dmg_zones.zone12.hit_effect_receiver_type)
    -- //! ================     Z O N E 13
    writeInteger(target_address + 0x1A94, target_data.dmg_zones.zone13.dmg_multiplier)
    writeInteger(target_address + 0x1A98, target_data.dmg_zones.zone13.dmg_multipler_dps)
    writeInteger(target_address + 0x1A9C, target_data.dmg_zones.zone13.proj_drb_resistance)
    writeInteger(target_address + 0x1AA0, target_data.dmg_zones.zone13.armor)
    writeInteger(target_address + 0x1AA4, target_data.dmg_zones.zone13.armor_angle_check)
    writeInteger(target_address + 0x1AA8, target_data.dmg_zones.zone13.max_armor)
    writeInteger(target_address + 0x1AAC, target_data.dmg_zones.zone13.ignore_armor_on_self)
    writeFloat(target_address   + 0x1AB0, target_data.dmg_zones.zone13.health)
    writeInteger(target_address + 0x1AB4, target_data.dmg_zones.zone13.constitution)
    writeByte(target_address    + 0x1AB8, target_data.dmg_zones.zone13.immortal)
    writeFloat(target_address   + 0x1AC0, target_data.dmg_zones.zone13.affects_main_health)
    writeByte(target_address    + 0x1B05, target_data.dmg_zones.zone13.regeneration_enabled)
    writeByte(target_address    + 0x1B06, target_data.dmg_zones.zone13.bleedout_enabled)
    writeByte(target_address    + 0x1B07, target_data.dmg_zones.zone13.affected_by_explosions)
    writeFloat(target_address   + 0x1B08, target_data.dmg_zones.zone13.explosion_dmg_mult)
    writeInteger(target_address + 0x1B0C, target_data.dmg_zones.zone13.affected_by_collision_impact)
    writeInteger(target_address + 0x1B10, target_data.dmg_zones.zone13.on_dead_disable_all_actors)
    writeInteger(target_address + 0x1B14, target_data.dmg_zones.zone13.explosion_verification)
    writeInteger(target_address + 0x1B18, target_data.dmg_zones.zone13.main_health_affect_capped_zh)
    writeInteger(target_address + 0x1B1C, target_data.dmg_zones.zone13.hit_effect_receiver_type)
    -- //! ================     Z O N E 14
    writeInteger(target_address + 0x1C94, target_data.dmg_zones.zone14.dmg_multiplier)
    writeInteger(target_address + 0x1C98, target_data.dmg_zones.zone14.dmg_multipler_dps)
    writeInteger(target_address + 0x1C9C, target_data.dmg_zones.zone14.proj_drb_resistance)
    writeInteger(target_address + 0x1CA0, target_data.dmg_zones.zone14.armor)
    writeInteger(target_address + 0x1CA4, target_data.dmg_zones.zone14.armor_angle_check)
    writeInteger(target_address + 0x1CA8, target_data.dmg_zones.zone14.max_armor)
    writeInteger(target_address + 0x1CAC, target_data.dmg_zones.zone14.ignore_armor_on_self)
    writeFloat(target_address   + 0x1CB0, target_data.dmg_zones.zone14.health)
    writeInteger(target_address + 0x1CB4, target_data.dmg_zones.zone14.constitution)
    writeByte(target_address    + 0x1CB8, target_data.dmg_zones.zone14.immortal)
    writeFloat(target_address   + 0x1CC0, target_data.dmg_zones.zone14.affects_main_health)
    writeByte(target_address    + 0x1D05, target_data.dmg_zones.zone14.regeneration_enabled)
    writeByte(target_address    + 0x1D06, target_data.dmg_zones.zone14.bleedout_enabled)
    writeByte(target_address    + 0x1D07, target_data.dmg_zones.zone14.affected_by_explosions)
    writeFloat(target_address   + 0x1D08, target_data.dmg_zones.zone14.explosion_dmg_mult)
    writeInteger(target_address + 0x1D0C, target_data.dmg_zones.zone14.affected_by_collision_impact)
    writeInteger(target_address + 0x1D10, target_data.dmg_zones.zone14.on_dead_disable_all_actors)
    writeInteger(target_address + 0x1D14, target_data.dmg_zones.zone14.explosion_verification)
    writeInteger(target_address + 0x1D18, target_data.dmg_zones.zone14.main_health_affect_capped_zh)
    writeInteger(target_address + 0x1D1C, target_data.dmg_zones.zone14.hit_effect_receiver_type)
    -- //! ================     Z O N E 15
    writeInteger(target_address + 0x1E94, target_data.dmg_zones.zone15.dmg_multiplier)
    writeInteger(target_address + 0x1E98, target_data.dmg_zones.zone15.dmg_multipler_dps)
    writeInteger(target_address + 0x1E9C, target_data.dmg_zones.zone15.proj_drb_resistance)
    writeInteger(target_address + 0x1EA0, target_data.dmg_zones.zone15.armor)
    writeInteger(target_address + 0x1EA4, target_data.dmg_zones.zone15.armor_angle_check)
    writeInteger(target_address + 0x1EA8, target_data.dmg_zones.zone15.max_armor)
    writeInteger(target_address + 0x1EAC, target_data.dmg_zones.zone15.ignore_armor_on_self)
    writeFloat(target_address   + 0x1EB0, target_data.dmg_zones.zone15.health)
    writeInteger(target_address + 0x1EB4, target_data.dmg_zones.zone15.constitution)
    writeByte(target_address    + 0x1EB8, target_data.dmg_zones.zone15.immortal)
    writeFloat(target_address   + 0x1EC0, target_data.dmg_zones.zone15.affects_main_health)
    writeByte(target_address    + 0x1F05, target_data.dmg_zones.zone15.regeneration_enabled)
    writeByte(target_address    + 0x1F06, target_data.dmg_zones.zone15.bleedout_enabled)
    writeByte(target_address    + 0x1F07, target_data.dmg_zones.zone15.affected_by_explosions)
    writeFloat(target_address   + 0x1F08, target_data.dmg_zones.zone15.explosion_dmg_mult)
    writeInteger(target_address + 0x1F0C, target_data.dmg_zones.zone15.affected_by_collision_impact)
    writeInteger(target_address + 0x1F10, target_data.dmg_zones.zone15.on_dead_disable_all_actors)
    writeInteger(target_address + 0x1F14, target_data.dmg_zones.zone15.explosion_verification)
    writeInteger(target_address + 0x1F18, target_data.dmg_zones.zone15.main_health_affect_capped_zh)
    writeInteger(target_address + 0x1F1C, target_data.dmg_zones.zone15.hit_effect_receiver_type)
    -- //! ================     Z O N E 16
    writeInteger(target_address + 0x2094, target_data.dmg_zones.zone16.dmg_multiplier)
    writeInteger(target_address + 0x2098, target_data.dmg_zones.zone16.dmg_multipler_dps)
    writeInteger(target_address + 0x209C, target_data.dmg_zones.zone16.proj_drb_resistance)
    writeInteger(target_address + 0x20A0, target_data.dmg_zones.zone16.armor)
    writeInteger(target_address + 0x20A4, target_data.dmg_zones.zone16.armor_angle_check)
    writeInteger(target_address + 0x20A8, target_data.dmg_zones.zone16.max_armor)
    writeInteger(target_address + 0x20AC, target_data.dmg_zones.zone16.ignore_armor_on_self)
    writeFloat(target_address   + 0x20B0, target_data.dmg_zones.zone16.health)
    writeInteger(target_address + 0x20B4, target_data.dmg_zones.zone16.constitution)
    writeByte(target_address    + 0x20B8, target_data.dmg_zones.zone16.immortal)
    writeFloat(target_address   + 0x20C0, target_data.dmg_zones.zone16.affects_main_health)
    writeByte(target_address    + 0x2105, target_data.dmg_zones.zone16.regeneration_enabled)
    writeByte(target_address    + 0x2106, target_data.dmg_zones.zone16.bleedout_enabled)
    writeByte(target_address    + 0x2107, target_data.dmg_zones.zone16.affected_by_explosions)
    writeFloat(target_address   + 0x2108, target_data.dmg_zones.zone16.explosion_dmg_mult)
    writeInteger(target_address + 0x210C, target_data.dmg_zones.zone16.affected_by_collision_impact)
    writeInteger(target_address + 0x2110, target_data.dmg_zones.zone16.on_dead_disable_all_actors)
    writeInteger(target_address + 0x2114, target_data.dmg_zones.zone16.explosion_verification)
    writeInteger(target_address + 0x2118, target_data.dmg_zones.zone16.main_health_affect_capped_zh)
    writeInteger(target_address + 0x211C, target_data.dmg_zones.zone16.hit_effect_receiver_type)
    -- //! ================     Z O N E 17
    writeInteger(target_address + 0x2294, target_data.dmg_zones.zone17.dmg_multiplier)
    writeInteger(target_address + 0x2298, target_data.dmg_zones.zone17.dmg_multipler_dps)
    writeInteger(target_address + 0x229C, target_data.dmg_zones.zone17.proj_drb_resistance)
    writeInteger(target_address + 0x22A0, target_data.dmg_zones.zone17.armor)
    writeInteger(target_address + 0x22A4, target_data.dmg_zones.zone17.armor_angle_check)
    writeInteger(target_address + 0x22A8, target_data.dmg_zones.zone17.max_armor)
    writeInteger(target_address + 0x22AC, target_data.dmg_zones.zone17.ignore_armor_on_self)
    writeFloat(target_address   + 0x22B0, target_data.dmg_zones.zone17.health)
    writeInteger(target_address + 0x22B4, target_data.dmg_zones.zone17.constitution)
    writeByte(target_address    + 0x22B8, target_data.dmg_zones.zone17.immortal)
    writeFloat(target_address   + 0x22C0, target_data.dmg_zones.zone17.affects_main_health)
    writeByte(target_address    + 0x2305, target_data.dmg_zones.zone17.regeneration_enabled)
    writeByte(target_address    + 0x2306, target_data.dmg_zones.zone17.bleedout_enabled)
    writeByte(target_address    + 0x2307, target_data.dmg_zones.zone17.affected_by_explosions)
    writeFloat(target_address   + 0x2308, target_data.dmg_zones.zone17.explosion_dmg_mult)
    writeInteger(target_address + 0x230C, target_data.dmg_zones.zone17.affected_by_collision_impact)
    writeInteger(target_address + 0x2310, target_data.dmg_zones.zone17.on_dead_disable_all_actors)
    writeInteger(target_address + 0x2314, target_data.dmg_zones.zone17.explosion_verification)
    writeInteger(target_address + 0x2318, target_data.dmg_zones.zone17.main_health_affect_capped_zh)
    writeInteger(target_address + 0x231C, target_data.dmg_zones.zone17.hit_effect_receiver_type)
    -- //! ================     Z O N E 18
    writeInteger(target_address + 0x2494, target_data.dmg_zones.zone18.dmg_multiplier)
    writeInteger(target_address + 0x2498, target_data.dmg_zones.zone18.dmg_multipler_dps)
    writeInteger(target_address + 0x249C, target_data.dmg_zones.zone18.proj_drb_resistance)
    writeInteger(target_address + 0x24A0, target_data.dmg_zones.zone18.armor)
    writeInteger(target_address + 0x24A4, target_data.dmg_zones.zone18.armor_angle_check)
    writeInteger(target_address + 0x24A8, target_data.dmg_zones.zone18.max_armor)
    writeInteger(target_address + 0x24AC, target_data.dmg_zones.zone18.ignore_armor_on_self)
    writeFloat(target_address   + 0x24B0, target_data.dmg_zones.zone18.health)
    writeInteger(target_address + 0x24B4, target_data.dmg_zones.zone18.constitution)
    writeByte(target_address    + 0x24B8, target_data.dmg_zones.zone18.immortal)
    writeFloat(target_address   + 0x24C0, target_data.dmg_zones.zone18.affects_main_health)
    writeByte(target_address    + 0x2505, target_data.dmg_zones.zone18.regeneration_enabled)
    writeByte(target_address    + 0x2506, target_data.dmg_zones.zone18.bleedout_enabled)
    writeByte(target_address    + 0x2507, target_data.dmg_zones.zone18.affected_by_explosions)
    writeFloat(target_address   + 0x2508, target_data.dmg_zones.zone18.explosion_dmg_mult)
    writeInteger(target_address + 0x250C, target_data.dmg_zones.zone18.affected_by_collision_impact)
    writeInteger(target_address + 0x2510, target_data.dmg_zones.zone18.on_dead_disable_all_actors)
    writeInteger(target_address + 0x2514, target_data.dmg_zones.zone18.explosion_verification)
    writeInteger(target_address + 0x2518, target_data.dmg_zones.zone18.main_health_affect_capped_zh)
    writeInteger(target_address + 0x251C, target_data.dmg_zones.zone18.hit_effect_receiver_type)
    writeInteger(target_address + 0x2694, target_data.dmg_zones.zone19.dmg_multiplier)
    writeInteger(target_address + 0x2698, target_data.dmg_zones.zone19.dmg_multipler_dps)
    writeInteger(target_address + 0x269C, target_data.dmg_zones.zone19.proj_drb_resistance)
    writeInteger(target_address + 0x26A0, target_data.dmg_zones.zone19.armor)
    writeInteger(target_address + 0x26A4, target_data.dmg_zones.zone19.armor_angle_check)
    writeInteger(target_address + 0x26A8, target_data.dmg_zones.zone19.max_armor)
    writeInteger(target_address + 0x26AC, target_data.dmg_zones.zone19.ignore_armor_on_self)
    writeFloat(target_address   + 0x26B0, target_data.dmg_zones.zone19.health)
    writeInteger(target_address + 0x26B4, target_data.dmg_zones.zone19.constitution)
    writeByte(target_address    + 0x26B8, target_data.dmg_zones.zone19.immortal)
    writeFloat(target_address   + 0x26C0, target_data.dmg_zones.zone19.affects_main_health)
    writeByte(target_address    + 0x2705, target_data.dmg_zones.zone19.regeneration_enabled)
    writeByte(target_address    + 0x2706, target_data.dmg_zones.zone19.bleedout_enabled)
    writeByte(target_address    + 0x2707, target_data.dmg_zones.zone19.affected_by_explosions)
    writeFloat(target_address   + 0x2708, target_data.dmg_zones.zone19.explosion_dmg_mult)
    writeInteger(target_address + 0x270C, target_data.dmg_zones.zone19.affected_by_collision_impact)
    writeInteger(target_address + 0x2710, target_data.dmg_zones.zone19.on_dead_disable_all_actors)
    writeInteger(target_address + 0x2714, target_data.dmg_zones.zone19.explosion_verification)
    writeInteger(target_address + 0x2718, target_data.dmg_zones.zone19.main_health_affect_capped_zh)
    writeInteger(target_address + 0x271C, target_data.dmg_zones.zone19.hit_effect_receiver_type)
    -- //! ================     Z O N E 20
    writeInteger(target_address + 0x2894, target_data.dmg_zones.zone20.dmg_multiplier)
    writeInteger(target_address + 0x2898, target_data.dmg_zones.zone20.dmg_multipler_dps)
    writeInteger(target_address + 0x289C, target_data.dmg_zones.zone20.proj_drb_resistance)
    writeInteger(target_address + 0x28A0, target_data.dmg_zones.zone20.armor)
    writeInteger(target_address + 0x28A4, target_data.dmg_zones.zone20.armor_angle_check)
    writeInteger(target_address + 0x28A8, target_data.dmg_zones.zone20.max_armor)
    writeInteger(target_address + 0x28AC, target_data.dmg_zones.zone20.ignore_armor_on_self)
    writeFloat(target_address   + 0x28B0, target_data.dmg_zones.zone20.health)
    writeInteger(target_address + 0x28B4, target_data.dmg_zones.zone20.constitution)
    writeByte(target_address    + 0x28B8, target_data.dmg_zones.zone20.immortal)
    writeFloat(target_address   + 0x28C0, target_data.dmg_zones.zone20.affects_main_health)
    writeByte(target_address    + 0x2905, target_data.dmg_zones.zone20.regeneration_enabled)
    writeByte(target_address    + 0x2906, target_data.dmg_zones.zone20.bleedout_enabled)
    writeByte(target_address    + 0x2907, target_data.dmg_zones.zone20.affected_by_explosions)
    writeFloat(target_address   + 0x2908, target_data.dmg_zones.zone20.explosion_dmg_mult)
    writeInteger(target_address + 0x290C, target_data.dmg_zones.zone20.affected_by_collision_impact)
    writeInteger(target_address + 0x2910, target_data.dmg_zones.zone20.on_dead_disable_all_actors)
    writeInteger(target_address + 0x2914, target_data.dmg_zones.zone20.explosion_verification)
    writeInteger(target_address + 0x2918, target_data.dmg_zones.zone20.main_health_affect_capped_zh)
    writeInteger(target_address + 0x291C, target_data.dmg_zones.zone20.hit_effect_receiver_type)
    -- //! ================     Z O N E 21
    writeInteger(target_address + 0x2A94, target_data.dmg_zones.zone21.dmg_multiplier)
    writeInteger(target_address + 0x2A98, target_data.dmg_zones.zone21.dmg_multipler_dps)
    writeInteger(target_address + 0x2A9C, target_data.dmg_zones.zone21.proj_drb_resistance)
    writeInteger(target_address + 0x2AA0, target_data.dmg_zones.zone21.armor)
    writeInteger(target_address + 0x2AA4, target_data.dmg_zones.zone21.armor_angle_check)
    writeInteger(target_address + 0x2AA8, target_data.dmg_zones.zone21.max_armor)
    writeInteger(target_address + 0x2AAC, target_data.dmg_zones.zone21.ignore_armor_on_self)
    writeFloat(target_address   + 0x2AB0, target_data.dmg_zones.zone21.health)
    writeInteger(target_address + 0x2AB4, target_data.dmg_zones.zone21.constitution)
    writeByte(target_address    + 0x2AB8, target_data.dmg_zones.zone21.immortal)
    writeFloat(target_address   + 0x2AC0, target_data.dmg_zones.zone21.affects_main_health)
    writeByte(target_address    + 0x2B05, target_data.dmg_zones.zone21.regeneration_enabled)
    writeByte(target_address    + 0x2B06, target_data.dmg_zones.zone21.bleedout_enabled)
    writeByte(target_address    + 0x2B07, target_data.dmg_zones.zone21.affected_by_explosions)
    writeFloat(target_address   + 0x2B08, target_data.dmg_zones.zone21.explosion_dmg_mult)
    writeInteger(target_address + 0x2B0C, target_data.dmg_zones.zone21.affected_by_collision_impact)
    writeInteger(target_address + 0x2B10, target_data.dmg_zones.zone21.on_dead_disable_all_actors)
    writeInteger(target_address + 0x2B14, target_data.dmg_zones.zone21.explosion_verification)
    writeInteger(target_address + 0x2B18, target_data.dmg_zones.zone21.main_health_affect_capped_zh)
    writeInteger(target_address + 0x2B1C, target_data.dmg_zones.zone21.hit_effect_receiver_type)
    -- //! ================     Z O N E 22
    writeInteger(target_address + 0x2C94, target_data.dmg_zones.zone22.dmg_multiplier)
    writeInteger(target_address + 0x2C98, target_data.dmg_zones.zone22.dmg_multipler_dps)
    writeInteger(target_address + 0x2C9C, target_data.dmg_zones.zone22.proj_drb_resistance)
    writeInteger(target_address + 0x2CA0, target_data.dmg_zones.zone22.armor)
    writeInteger(target_address + 0x2CA4, target_data.dmg_zones.zone22.armor_angle_check)
    writeInteger(target_address + 0x2CA8, target_data.dmg_zones.zone22.max_armor)
    writeInteger(target_address + 0x2CAC, target_data.dmg_zones.zone22.ignore_armor_on_self)
    writeFloat(target_address   + 0x2CB0, target_data.dmg_zones.zone22.health)
    writeInteger(target_address + 0x2CB4, target_data.dmg_zones.zone22.constitution)
    writeByte(target_address    + 0x2CB8, target_data.dmg_zones.zone22.immortal)
    writeFloat(target_address   + 0x2CC0, target_data.dmg_zones.zone22.affects_main_health)
    writeByte(target_address    + 0x2D05, target_data.dmg_zones.zone22.regeneration_enabled)
    writeByte(target_address    + 0x2D06, target_data.dmg_zones.zone22.bleedout_enabled)
    writeByte(target_address    + 0x2D07, target_data.dmg_zones.zone22.affected_by_explosions)
    writeFloat(target_address   + 0x2D08, target_data.dmg_zones.zone22.explosion_dmg_mult)
    writeInteger(target_address + 0x2D0C, target_data.dmg_zones.zone22.affected_by_collision_impact)
    writeInteger(target_address + 0x2D10, target_data.dmg_zones.zone22.on_dead_disable_all_actors)
    writeInteger(target_address + 0x2D14, target_data.dmg_zones.zone22.explosion_verification)
    writeInteger(target_address + 0x2D18, target_data.dmg_zones.zone22.main_health_affect_capped_zh)
    writeInteger(target_address + 0x2D1C, target_data.dmg_zones.zone22.hit_effect_receiver_type)
    -- //! ================     Z O N E 23
    writeInteger(target_address + 0x2E94, target_data.dmg_zones.zone23.dmg_multiplier)
    writeInteger(target_address + 0x2E98, target_data.dmg_zones.zone23.dmg_multipler_dps)
    writeInteger(target_address + 0x2E9C, target_data.dmg_zones.zone23.proj_drb_resistance)
    writeInteger(target_address + 0x2EA0, target_data.dmg_zones.zone23.armor)
    writeInteger(target_address + 0x2EA4, target_data.dmg_zones.zone23.armor_angle_check)
    writeInteger(target_address + 0x2EA8, target_data.dmg_zones.zone23.max_armor)
    writeInteger(target_address + 0x2EAC, target_data.dmg_zones.zone23.ignore_armor_on_self)
    writeFloat(target_address   + 0x2EB0, target_data.dmg_zones.zone23.health)
    writeInteger(target_address + 0x2EB4, target_data.dmg_zones.zone23.constitution)
    writeByte(target_address    + 0x2EB8, target_data.dmg_zones.zone23.immortal)
    writeFloat(target_address   + 0x2EC0, target_data.dmg_zones.zone23.affects_main_health)
    writeByte(target_address    + 0x2F05, target_data.dmg_zones.zone23.regeneration_enabled)
    writeByte(target_address    + 0x2F06, target_data.dmg_zones.zone23.bleedout_enabled)
    writeByte(target_address    + 0x2F07, target_data.dmg_zones.zone23.affected_by_explosions)
    writeFloat(target_address   + 0x2F08, target_data.dmg_zones.zone23.explosion_dmg_mult)
    writeInteger(target_address + 0x2F0C, target_data.dmg_zones.zone23.affected_by_collision_impact)
    writeInteger(target_address + 0x2F10, target_data.dmg_zones.zone23.on_dead_disable_all_actors)
    writeInteger(target_address + 0x2F14, target_data.dmg_zones.zone23.explosion_verification)
    writeInteger(target_address + 0x2F18, target_data.dmg_zones.zone23.main_health_affect_capped_zh)
    writeInteger(target_address + 0x2F1C, target_data.dmg_zones.zone23.hit_effect_receiver_type)
    writeInteger(target_address + 0x3094, target_data.dmg_zones.zone24.dmg_multiplier)
    writeInteger(target_address + 0x3098, target_data.dmg_zones.zone24.dmg_multipler_dps)
    writeInteger(target_address + 0x309C, target_data.dmg_zones.zone24.proj_drb_resistance)
    writeInteger(target_address + 0x30A0, target_data.dmg_zones.zone24.armor)
    writeInteger(target_address + 0x30A4, target_data.dmg_zones.zone24.armor_angle_check)
    writeInteger(target_address + 0x30A8, target_data.dmg_zones.zone24.max_armor)
    writeInteger(target_address + 0x30AC, target_data.dmg_zones.zone24.ignore_armor_on_self)
    writeFloat(target_address   + 0x30B0, target_data.dmg_zones.zone24.health)
    writeInteger(target_address + 0x30B4, target_data.dmg_zones.zone24.constitution)
    writeByte(target_address    + 0x30B8, target_data.dmg_zones.zone24.immortal)
    writeFloat(target_address   + 0x30C0, target_data.dmg_zones.zone24.affects_main_health)
    writeByte(target_address    + 0x3105, target_data.dmg_zones.zone24.regeneration_enabled)
    writeByte(target_address    + 0x3106, target_data.dmg_zones.zone24.bleedout_enabled)
    writeByte(target_address    + 0x3107, target_data.dmg_zones.zone24.affected_by_explosions)
    writeFloat(target_address   + 0x3108, target_data.dmg_zones.zone24.explosion_dmg_mult)
    writeInteger(target_address + 0x310C, target_data.dmg_zones.zone24.affected_by_collision_impact)
    writeInteger(target_address + 0x3110, target_data.dmg_zones.zone24.on_dead_disable_all_actors)
    writeInteger(target_address + 0x3114, target_data.dmg_zones.zone24.explosion_verification)
    writeInteger(target_address + 0x3118, target_data.dmg_zones.zone24.main_health_affect_capped_zh)
    writeInteger(target_address + 0x311C, target_data.dmg_zones.zone24.hit_effect_receiver_type)
    writeInteger(target_address + 0x3294, target_data.dmg_zones.zone25.dmg_multiplier)
    writeInteger(target_address + 0x3298, target_data.dmg_zones.zone25.dmg_multipler_dps)
    writeInteger(target_address + 0x329C, target_data.dmg_zones.zone25.proj_drb_resistance)
    writeInteger(target_address + 0x32A0, target_data.dmg_zones.zone25.armor)
    writeInteger(target_address + 0x32A4, target_data.dmg_zones.zone25.armor_angle_check)
    writeInteger(target_address + 0x32A8, target_data.dmg_zones.zone25.max_armor)
    writeInteger(target_address + 0x32AC, target_data.dmg_zones.zone25.ignore_armor_on_self)
    writeFloat(target_address   + 0x32B0, target_data.dmg_zones.zone25.health)
    writeInteger(target_address + 0x32B4, target_data.dmg_zones.zone25.constitution)
    writeByte(target_address    + 0x32B8, target_data.dmg_zones.zone25.immortal)
    writeFloat(target_address   + 0x32C0, target_data.dmg_zones.zone25.affects_main_health)
    writeByte(target_address    + 0x3305, target_data.dmg_zones.zone25.regeneration_enabled)
    writeByte(target_address    + 0x3306, target_data.dmg_zones.zone25.bleedout_enabled)
    writeByte(target_address    + 0x3307, target_data.dmg_zones.zone25.affected_by_explosions)
    writeFloat(target_address   + 0x3308, target_data.dmg_zones.zone25.explosion_dmg_mult)
    writeInteger(target_address + 0x330C, target_data.dmg_zones.zone25.affected_by_collision_impact)
    writeInteger(target_address + 0x3310, target_data.dmg_zones.zone25.on_dead_disable_all_actors)
    writeInteger(target_address + 0x3314, target_data.dmg_zones.zone25.explosion_verification)
    writeInteger(target_address + 0x3318, target_data.dmg_zones.zone25.main_health_affect_capped_zh)
    writeInteger(target_address + 0x331C, target_data.dmg_zones.zone25.hit_effect_receiver_type)
    writeInteger(target_address + 0x3494, target_data.dmg_zones.zone26.dmg_multiplier)
    writeInteger(target_address + 0x3498, target_data.dmg_zones.zone26.dmg_multipler_dps)
    writeInteger(target_address + 0x349C, target_data.dmg_zones.zone26.proj_drb_resistance)
    writeInteger(target_address + 0x34A0, target_data.dmg_zones.zone26.armor)
    writeInteger(target_address + 0x34A4, target_data.dmg_zones.zone26.armor_angle_check)
    writeInteger(target_address + 0x34A8, target_data.dmg_zones.zone26.max_armor)
    writeInteger(target_address + 0x34AC, target_data.dmg_zones.zone26.ignore_armor_on_self)
    writeFloat(target_address   + 0x34B0, target_data.dmg_zones.zone26.health)
    writeInteger(target_address + 0x34B4, target_data.dmg_zones.zone26.constitution)
    writeByte(target_address    + 0x34B8, target_data.dmg_zones.zone26.immortal)
    writeFloat(target_address   + 0x34C0, target_data.dmg_zones.zone26.affects_main_health)
    writeByte(target_address    + 0x3505, target_data.dmg_zones.zone26.regeneration_enabled)
    writeByte(target_address    + 0x3506, target_data.dmg_zones.zone26.bleedout_enabled)
    writeByte(target_address    + 0x3507, target_data.dmg_zones.zone26.affected_by_explosions)
    writeFloat(target_address   + 0x3508, target_data.dmg_zones.zone26.explosion_dmg_mult)
    writeInteger(target_address + 0x350C, target_data.dmg_zones.zone26.affected_by_collision_impact)
    writeInteger(target_address + 0x3510, target_data.dmg_zones.zone26.on_dead_disable_all_actors)
    writeInteger(target_address + 0x3514, target_data.dmg_zones.zone26.explosion_verification)
    writeInteger(target_address + 0x3518, target_data.dmg_zones.zone26.main_health_affect_capped_zh)
    writeInteger(target_address + 0x351C, target_data.dmg_zones.zone26.hit_effect_receiver_type)
    writeInteger(target_address + 0x3694, target_data.dmg_zones.zone27.dmg_multiplier)
    writeInteger(target_address + 0x3698, target_data.dmg_zones.zone27.dmg_multipler_dps)
    writeInteger(target_address + 0x369C, target_data.dmg_zones.zone27.proj_drb_resistance)
    writeInteger(target_address + 0x36A0, target_data.dmg_zones.zone27.armor)
    writeInteger(target_address + 0x36A4, target_data.dmg_zones.zone27.armor_angle_check)
    writeInteger(target_address + 0x36A8, target_data.dmg_zones.zone27.max_armor)
    writeInteger(target_address + 0x36AC, target_data.dmg_zones.zone27.ignore_armor_on_self)
    writeFloat(target_address   + 0x36B0, target_data.dmg_zones.zone27.health)
    writeInteger(target_address + 0x36B4, target_data.dmg_zones.zone27.constitution)
    writeByte(target_address    + 0x36B8, target_data.dmg_zones.zone27.immortal)
    writeFloat(target_address   + 0x36C0, target_data.dmg_zones.zone27.affects_main_health)
    writeByte(target_address    + 0x3705, target_data.dmg_zones.zone27.regeneration_enabled)
    writeByte(target_address    + 0x3706, target_data.dmg_zones.zone27.bleedout_enabled)
    writeByte(target_address    + 0x3707, target_data.dmg_zones.zone27.affected_by_explosions)
    writeFloat(target_address   + 0x3708, target_data.dmg_zones.zone27.explosion_dmg_mult)
    writeInteger(target_address + 0x370C, target_data.dmg_zones.zone27.affected_by_collision_impact)
    writeInteger(target_address + 0x3710, target_data.dmg_zones.zone27.on_dead_disable_all_actors)
    writeInteger(target_address + 0x3714, target_data.dmg_zones.zone27.explosion_verification)
    writeInteger(target_address + 0x3718, target_data.dmg_zones.zone27.main_health_affect_capped_zh)
    writeInteger(target_address + 0x371C, target_data.dmg_zones.zone27.hit_effect_receiver_type)
    writeInteger(target_address + 0x3894, target_data.dmg_zones.zone28.dmg_multiplier)
    writeInteger(target_address + 0x3898, target_data.dmg_zones.zone28.dmg_multipler_dps)
    writeInteger(target_address + 0x389C, target_data.dmg_zones.zone28.proj_drb_resistance)
    writeInteger(target_address + 0x38A0, target_data.dmg_zones.zone28.armor)
    writeInteger(target_address + 0x38A4, target_data.dmg_zones.zone28.armor_angle_check)
    writeInteger(target_address + 0x38A8, target_data.dmg_zones.zone28.max_armor)
    writeInteger(target_address + 0x38AC, target_data.dmg_zones.zone28.ignore_armor_on_self)
    writeFloat(target_address   + 0x38B0, target_data.dmg_zones.zone28.health)
    writeInteger(target_address + 0x38B4, target_data.dmg_zones.zone28.constitution)
    writeByte(target_address    + 0x38B8, target_data.dmg_zones.zone28.immortal)
    writeFloat(target_address   + 0x38C0, target_data.dmg_zones.zone28.affects_main_health)
    writeByte(target_address    + 0x3905, target_data.dmg_zones.zone28.regeneration_enabled)
    writeByte(target_address    + 0x3906, target_data.dmg_zones.zone28.bleedout_enabled)
    writeByte(target_address    + 0x3907, target_data.dmg_zones.zone28.affected_by_explosions)
    writeFloat(target_address   + 0x3908, target_data.dmg_zones.zone28.explosion_dmg_mult)
    writeInteger(target_address + 0x390C, target_data.dmg_zones.zone28.affected_by_collision_impact)
    writeInteger(target_address + 0x3910, target_data.dmg_zones.zone28.on_dead_disable_all_actors)
    writeInteger(target_address + 0x3914, target_data.dmg_zones.zone28.explosion_verification)
    writeInteger(target_address + 0x3918, target_data.dmg_zones.zone28.main_health_affect_capped_zh)
    writeInteger(target_address + 0x391C, target_data.dmg_zones.zone28.hit_effect_receiver_type)
    writeInteger(target_address + 0x3A94, target_data.dmg_zones.zone29.dmg_multiplier)
    writeInteger(target_address + 0x3A98, target_data.dmg_zones.zone29.dmg_multipler_dps)
    writeInteger(target_address + 0x3A9C, target_data.dmg_zones.zone29.proj_drb_resistance)
    writeInteger(target_address + 0x3AA0, target_data.dmg_zones.zone29.armor)
    writeInteger(target_address + 0x3AA4, target_data.dmg_zones.zone29.armor_angle_check)
    writeInteger(target_address + 0x3AA8, target_data.dmg_zones.zone29.max_armor)
    writeInteger(target_address + 0x3AAC, target_data.dmg_zones.zone29.ignore_armor_on_self)
    writeFloat(target_address   + 0x3AB0, target_data.dmg_zones.zone29.health)
    writeInteger(target_address + 0x3AB4, target_data.dmg_zones.zone29.constitution)
    writeByte(target_address    + 0x3AB8, target_data.dmg_zones.zone29.immortal)
    writeFloat(target_address   + 0x3AC0, target_data.dmg_zones.zone29.affects_main_health)
    writeByte(target_address    + 0x3B05, target_data.dmg_zones.zone29.regeneration_enabled)
    writeByte(target_address    + 0x3B06, target_data.dmg_zones.zone29.bleedout_enabled)
    writeByte(target_address    + 0x3B07, target_data.dmg_zones.zone29.affected_by_explosions)
    writeFloat(target_address   + 0x3B08, target_data.dmg_zones.zone29.explosion_dmg_mult)
    writeInteger(target_address + 0x3B0C, target_data.dmg_zones.zone29.affected_by_collision_impact)
    writeInteger(target_address + 0x3B10, target_data.dmg_zones.zone29.on_dead_disable_all_actors)
    writeInteger(target_address + 0x3B14, target_data.dmg_zones.zone29.explosion_verification)
    writeInteger(target_address + 0x3B18, target_data.dmg_zones.zone29.main_health_affect_capped_zh)
    writeInteger(target_address + 0x3B1C, target_data.dmg_zones.zone29.hit_effect_receiver_type)
    writeInteger(target_address + 0x3C94, target_data.dmg_zones.zone30.dmg_multiplier)
    writeInteger(target_address + 0x3C98, target_data.dmg_zones.zone30.dmg_multipler_dps)
    writeInteger(target_address + 0x3C9C, target_data.dmg_zones.zone30.proj_drb_resistance)
    writeInteger(target_address + 0x3CA0, target_data.dmg_zones.zone30.armor)
    writeInteger(target_address + 0x3CA4, target_data.dmg_zones.zone30.armor_angle_check)
    writeInteger(target_address + 0x3CA8, target_data.dmg_zones.zone30.max_armor)
    writeInteger(target_address + 0x3CAC, target_data.dmg_zones.zone30.ignore_armor_on_self)
    writeFloat(target_address   + 0x3CB0, target_data.dmg_zones.zone30.health)
    writeInteger(target_address + 0x3CB4, target_data.dmg_zones.zone30.constitution)
    writeByte(target_address    + 0x3CB8, target_data.dmg_zones.zone30.immortal)
    writeFloat(target_address   + 0x3CC0, target_data.dmg_zones.zone30.affects_main_health)
    writeByte(target_address    + 0x3D05, target_data.dmg_zones.zone30.regeneration_enabled)
    writeByte(target_address    + 0x3D06, target_data.dmg_zones.zone30.bleedout_enabled)
    writeByte(target_address    + 0x3D07, target_data.dmg_zones.zone30.affected_by_explosions)
    writeFloat(target_address   + 0x3D08, target_data.dmg_zones.zone30.explosion_dmg_mult)
    writeInteger(target_address + 0x3D0C, target_data.dmg_zones.zone30.affected_by_collision_impact)
    writeInteger(target_address + 0x3D10, target_data.dmg_zones.zone30.on_dead_disable_all_actors)
    writeInteger(target_address + 0x3D14, target_data.dmg_zones.zone30.explosion_verification)
    writeInteger(target_address + 0x3D18, target_data.dmg_zones.zone30.main_health_affect_capped_zh)
    writeInteger(target_address + 0x3D1C, target_data.dmg_zones.zone30.hit_effect_receiver_type)
    writeInteger(target_address + 0x3E94, target_data.dmg_zones.zone31.dmg_multiplier)
    writeInteger(target_address + 0x3E98, target_data.dmg_zones.zone31.dmg_multipler_dps)
    writeInteger(target_address + 0x3E9C, target_data.dmg_zones.zone31.proj_drb_resistance)
    writeInteger(target_address + 0x3EA0, target_data.dmg_zones.zone31.armor)
    writeInteger(target_address + 0x3EA4, target_data.dmg_zones.zone31.armor_angle_check)
    writeInteger(target_address + 0x3EA8, target_data.dmg_zones.zone31.max_armor)
    writeInteger(target_address + 0x3EAC, target_data.dmg_zones.zone31.ignore_armor_on_self)
    writeFloat(target_address   + 0x3EB0, target_data.dmg_zones.zone31.health)
    writeInteger(target_address + 0x3EB4, target_data.dmg_zones.zone31.constitution)
    writeByte(target_address    + 0x3EB8, target_data.dmg_zones.zone31.immortal)
    writeFloat(target_address   + 0x3EC0, target_data.dmg_zones.zone31.affects_main_health)
    writeByte(target_address    + 0x3F05, target_data.dmg_zones.zone31.regeneration_enabled)
    writeByte(target_address    + 0x3F06, target_data.dmg_zones.zone31.bleedout_enabled)
    writeByte(target_address    + 0x3F07, target_data.dmg_zones.zone31.affected_by_explosions)
    writeFloat(target_address   + 0x3F08, target_data.dmg_zones.zone31.explosion_dmg_mult)
    writeInteger(target_address + 0x3F0C, target_data.dmg_zones.zone31.affected_by_collision_impact)
    writeInteger(target_address + 0x3F10, target_data.dmg_zones.zone31.on_dead_disable_all_actors)
    writeInteger(target_address + 0x3F14, target_data.dmg_zones.zone31.explosion_verification)
    writeInteger(target_address + 0x3F18, target_data.dmg_zones.zone31.main_health_affect_capped_zh)
    writeInteger(target_address + 0x3F1C, target_data.dmg_zones.zone31.hit_effect_receiver_type)
    writeInteger(target_address + 0x4094, target_data.dmg_zones.zone32.dmg_multiplier)
    writeInteger(target_address + 0x4098, target_data.dmg_zones.zone32.dmg_multipler_dps)
    writeInteger(target_address + 0x409C, target_data.dmg_zones.zone32.proj_drb_resistance)
    writeInteger(target_address + 0x40A0, target_data.dmg_zones.zone32.armor)
    writeInteger(target_address + 0x40A4, target_data.dmg_zones.zone32.armor_angle_check)
    writeInteger(target_address + 0x40A8, target_data.dmg_zones.zone32.max_armor)
    writeInteger(target_address + 0x40AC, target_data.dmg_zones.zone32.ignore_armor_on_self)
    writeFloat(target_address   + 0x40B0, target_data.dmg_zones.zone32.health)
    writeInteger(target_address + 0x40B4, target_data.dmg_zones.zone32.constitution)
    writeByte(target_address    + 0x40B8, target_data.dmg_zones.zone32.immortal)
    writeFloat(target_address   + 0x40C0, target_data.dmg_zones.zone32.affects_main_health)
    writeByte(target_address    + 0x4105, target_data.dmg_zones.zone32.regeneration_enabled)
    writeByte(target_address    + 0x4106, target_data.dmg_zones.zone32.bleedout_enabled)
    writeByte(target_address    + 0x4107, target_data.dmg_zones.zone32.affected_by_explosions)
    writeFloat(target_address   + 0x4108, target_data.dmg_zones.zone32.explosion_dmg_mult)
    writeInteger(target_address + 0x410C, target_data.dmg_zones.zone32.affected_by_collision_impact)
    writeInteger(target_address + 0x4110, target_data.dmg_zones.zone32.on_dead_disable_all_actors)
    writeInteger(target_address + 0x4114, target_data.dmg_zones.zone32.explosion_verification)
    writeInteger(target_address + 0x4118, target_data.dmg_zones.zone32.main_health_affect_capped_zh)
    writeInteger(target_address + 0x411C, target_data.dmg_zones.zone32.hit_effect_receiver_type)
    writeInteger(target_address + 0x4294, target_data.dmg_zones.zone33.dmg_multiplier)
    writeInteger(target_address + 0x4298, target_data.dmg_zones.zone33.dmg_multipler_dps)
    writeInteger(target_address + 0x429C, target_data.dmg_zones.zone33.proj_drb_resistance)
    writeInteger(target_address + 0x42A0, target_data.dmg_zones.zone33.armor)
    writeInteger(target_address + 0x42A4, target_data.dmg_zones.zone33.armor_angle_check)
    writeInteger(target_address + 0x42A8, target_data.dmg_zones.zone33.max_armor)
    writeInteger(target_address + 0x42AC, target_data.dmg_zones.zone33.ignore_armor_on_self)
    writeFloat(target_address   + 0x42B0, target_data.dmg_zones.zone33.health)
    writeInteger(target_address + 0x42B4, target_data.dmg_zones.zone33.constitution)
    writeByte(target_address    + 0x42B8, target_data.dmg_zones.zone33.immortal)
    writeFloat(target_address   + 0x42C0, target_data.dmg_zones.zone33.affects_main_health)
    writeByte(target_address    + 0x4305, target_data.dmg_zones.zone33.regeneration_enabled)
    writeByte(target_address    + 0x4306, target_data.dmg_zones.zone33.bleedout_enabled)
    writeByte(target_address    + 0x4307, target_data.dmg_zones.zone33.affected_by_explosions)
    writeFloat(target_address   + 0x4308, target_data.dmg_zones.zone33.explosion_dmg_mult)
    writeInteger(target_address + 0x430C, target_data.dmg_zones.zone33.affected_by_collision_impact)
    writeInteger(target_address + 0x4310, target_data.dmg_zones.zone33.on_dead_disable_all_actors)
    writeInteger(target_address + 0x4314, target_data.dmg_zones.zone33.explosion_verification)
    writeInteger(target_address + 0x4318, target_data.dmg_zones.zone33.main_health_affect_capped_zh)
    writeInteger(target_address + 0x431C, target_data.dmg_zones.zone33.hit_effect_receiver_type)
    writeInteger(target_address + 0x4494, target_data.dmg_zones.zone34.dmg_multiplier)
    writeInteger(target_address + 0x4498, target_data.dmg_zones.zone34.dmg_multipler_dps)
    writeInteger(target_address + 0x449C, target_data.dmg_zones.zone34.proj_drb_resistance)
    writeInteger(target_address + 0x44A0, target_data.dmg_zones.zone34.armor)
    writeInteger(target_address + 0x44A4, target_data.dmg_zones.zone34.armor_angle_check)
    writeInteger(target_address + 0x44A8, target_data.dmg_zones.zone34.max_armor)
    writeInteger(target_address + 0x44AC, target_data.dmg_zones.zone34.ignore_armor_on_self)
    writeFloat(target_address   + 0x44B0, target_data.dmg_zones.zone34.health)
    writeInteger(target_address + 0x44B4, target_data.dmg_zones.zone34.constitution)
    writeByte(target_address    + 0x44B8, target_data.dmg_zones.zone34.immortal)
    writeFloat(target_address   + 0x44C0, target_data.dmg_zones.zone34.affects_main_health)
    writeByte(target_address    + 0x4505, target_data.dmg_zones.zone34.regeneration_enabled)
    writeByte(target_address    + 0x4506, target_data.dmg_zones.zone34.bleedout_enabled)
    writeByte(target_address    + 0x4507, target_data.dmg_zones.zone34.affected_by_explosions)
    writeFloat(target_address   + 0x4508, target_data.dmg_zones.zone34.explosion_dmg_mult)
    writeInteger(target_address + 0x450C, target_data.dmg_zones.zone34.affected_by_collision_impact)
    writeInteger(target_address + 0x4510, target_data.dmg_zones.zone34.on_dead_disable_all_actors)
    writeInteger(target_address + 0x4514, target_data.dmg_zones.zone34.explosion_verification)
    writeInteger(target_address + 0x4518, target_data.dmg_zones.zone34.main_health_affect_capped_zh)
    writeInteger(target_address + 0x451C, target_data.dmg_zones.zone34.hit_effect_receiver_type)
    -- //! ================     Z O N E 35
    writeInteger(target_address + 0x4694, target_data.dmg_zones.zone35.dmg_multiplier)
    writeInteger(target_address + 0x4698, target_data.dmg_zones.zone35.dmg_multipler_dps)
    writeInteger(target_address + 0x469C, target_data.dmg_zones.zone35.proj_drb_resistance)
    writeInteger(target_address + 0x46A0, target_data.dmg_zones.zone35.armor)
    writeInteger(target_address + 0x46A4, target_data.dmg_zones.zone35.armor_angle_check)
    writeInteger(target_address + 0x46A8, target_data.dmg_zones.zone35.max_armor)
    writeInteger(target_address + 0x46AC, target_data.dmg_zones.zone35.ignore_armor_on_self)
    writeFloat(target_address   + 0x46B0, target_data.dmg_zones.zone35.health)
    writeInteger(target_address + 0x46B4, target_data.dmg_zones.zone35.constitution)
    writeByte(target_address    + 0x46B8, target_data.dmg_zones.zone35.immortal)
    writeFloat(target_address   + 0x46C0, target_data.dmg_zones.zone35.affects_main_health)
    writeByte(target_address    + 0x4705, target_data.dmg_zones.zone35.regeneration_enabled)
    writeByte(target_address    + 0x4706, target_data.dmg_zones.zone35.bleedout_enabled)
    writeByte(target_address    + 0x4707, target_data.dmg_zones.zone35.affected_by_explosions)
    writeFloat(target_address   + 0x4708, target_data.dmg_zones.zone35.explosion_dmg_mult)
    writeInteger(target_address + 0x470C, target_data.dmg_zones.zone35.affected_by_collision_impact)
    writeInteger(target_address + 0x4710, target_data.dmg_zones.zone35.on_dead_disable_all_actors)
    writeInteger(target_address + 0x4714, target_data.dmg_zones.zone35.explosion_verification)
    writeInteger(target_address + 0x4718, target_data.dmg_zones.zone35.main_health_affect_capped_zh)
    writeInteger(target_address + 0x471C, target_data.dmg_zones.zone35.hit_effect_receiver_type)
    writeInteger(target_address + 0x4894, target_data.dmg_zones.zone36.dmg_multiplier)
    writeInteger(target_address + 0x4898, target_data.dmg_zones.zone36.dmg_multipler_dps)
    writeInteger(target_address + 0x489C, target_data.dmg_zones.zone36.proj_drb_resistance)
    writeInteger(target_address + 0x48A0, target_data.dmg_zones.zone36.armor)
    writeInteger(target_address + 0x48A4, target_data.dmg_zones.zone36.armor_angle_check)
    writeInteger(target_address + 0x48A8, target_data.dmg_zones.zone36.max_armor)
    writeInteger(target_address + 0x48AC, target_data.dmg_zones.zone36.ignore_armor_on_self)
    writeFloat(target_address   + 0x48B0, target_data.dmg_zones.zone36.health)
    writeInteger(target_address + 0x48B4, target_data.dmg_zones.zone36.constitution)
    writeByte(target_address    + 0x48B8, target_data.dmg_zones.zone36.immortal)
    writeFloat(target_address   + 0x48C0, target_data.dmg_zones.zone36.affects_main_health)
    writeByte(target_address    + 0x4905, target_data.dmg_zones.zone36.regeneration_enabled)
    writeByte(target_address    + 0x4906, target_data.dmg_zones.zone36.bleedout_enabled)
    writeByte(target_address    + 0x4907, target_data.dmg_zones.zone36.affected_by_explosions)
    writeFloat(target_address   + 0x4908, target_data.dmg_zones.zone36.explosion_dmg_mult)
    writeInteger(target_address + 0x490C, target_data.dmg_zones.zone36.affected_by_collision_impact)
    writeInteger(target_address + 0x4910, target_data.dmg_zones.zone36.on_dead_disable_all_actors)
    writeInteger(target_address + 0x4914, target_data.dmg_zones.zone36.explosion_verification)
    writeInteger(target_address + 0x4918, target_data.dmg_zones.zone36.main_health_affect_capped_zh)
    writeInteger(target_address + 0x491C, target_data.dmg_zones.zone36.hit_effect_receiver_type)
    writeInteger(target_address + 0x4A94, target_data.dmg_zones.zone37.dmg_multiplier)
    writeInteger(target_address + 0x4A98, target_data.dmg_zones.zone37.dmg_multipler_dps)
    writeInteger(target_address + 0x4A9C, target_data.dmg_zones.zone37.proj_drb_resistance)
    writeInteger(target_address + 0x4AA0, target_data.dmg_zones.zone37.armor)
    writeInteger(target_address + 0x4AA4, target_data.dmg_zones.zone37.armor_angle_check)
    writeInteger(target_address + 0x4AA8, target_data.dmg_zones.zone37.max_armor)
    writeInteger(target_address + 0x4AAC, target_data.dmg_zones.zone37.ignore_armor_on_self)
    writeFloat(target_address   + 0x4AB0, target_data.dmg_zones.zone37.health)
    writeInteger(target_address + 0x4AB4, target_data.dmg_zones.zone37.constitution)
    writeByte(target_address    + 0x4AB8, target_data.dmg_zones.zone37.immortal)
    writeFloat(target_address   + 0x4AC0, target_data.dmg_zones.zone37.affects_main_health)
    writeByte(target_address    + 0x4B05, target_data.dmg_zones.zone37.regeneration_enabled)
    writeByte(target_address    + 0x4B06, target_data.dmg_zones.zone37.bleedout_enabled)
    writeByte(target_address    + 0x4B07, target_data.dmg_zones.zone37.affected_by_explosions)
    writeFloat(target_address   + 0x4B08, target_data.dmg_zones.zone37.explosion_dmg_mult)
    writeInteger(target_address + 0x4B0C, target_data.dmg_zones.zone37.affected_by_collision_impact)
    writeInteger(target_address + 0x4B10, target_data.dmg_zones.zone37.on_dead_disable_all_actors)
    writeInteger(target_address + 0x4B14, target_data.dmg_zones.zone37.explosion_verification)
    writeInteger(target_address + 0x4B18, target_data.dmg_zones.zone37.main_health_affect_capped_zh)
    writeInteger(target_address + 0x4B1C, target_data.dmg_zones.zone37.hit_effect_receiver_type)
    -- // Zone 38
    writeInteger(target_address + 0x4C94, target_data.dmg_zones.zone38.dmg_multiplier)
    writeInteger(target_address + 0x4C98, target_data.dmg_zones.zone38.dmg_multipler_dps)
    writeInteger(target_address + 0x4C9C, target_data.dmg_zones.zone38.proj_drb_resistance)
    writeInteger(target_address + 0x4CA0, target_data.dmg_zones.zone38.armor)
    writeInteger(target_address + 0x4CA4, target_data.dmg_zones.zone38.armor_angle_check)
    writeInteger(target_address + 0x4CA8, target_data.dmg_zones.zone38.max_armor)
    writeInteger(target_address + 0x4CAC, target_data.dmg_zones.zone38.ignore_armor_on_self)
    writeFloat(target_address   + 0x4CB0, target_data.dmg_zones.zone38.health)
    writeInteger(target_address + 0x4CB4, target_data.dmg_zones.zone38.constitution)
    writeByte(target_address    + 0x4CB8, target_data.dmg_zones.zone38.immortal)
    writeFloat(target_address   + 0x4CC0, target_data.dmg_zones.zone38.affects_main_health)
    writeByte(target_address    + 0x4D05, target_data.dmg_zones.zone38.regeneration_enabled)
    writeByte(target_address    + 0x4D06, target_data.dmg_zones.zone38.bleedout_enabled)
    writeByte(target_address    + 0x4D07, target_data.dmg_zones.zone38.affected_by_explosions)
    writeFloat(target_address   + 0x4D08, target_data.dmg_zones.zone38.explosion_dmg_mult)
    writeInteger(target_address + 0x4D0C, target_data.dmg_zones.zone38.affected_by_collision_impact)
    writeInteger(target_address + 0x4D10, target_data.dmg_zones.zone38.on_dead_disable_all_actors)
    writeInteger(target_address + 0x4D14, target_data.dmg_zones.zone38.explosion_verification)
    writeInteger(target_address + 0x4D18, target_data.dmg_zones.zone38.main_health_affect_capped_zh)
    writeInteger(target_address + 0x4D1C, target_data.dmg_zones.zone38.hit_effect_receiver_type)
    -- // Elemental damage
    writeInteger(target_address + 0x4DE0, target_data.elem_dmg.elem1_type)
    writeFloat(target_address   + 0x4DE4, target_data.elem_dmg.elem1_mult)
    writeInteger(target_address + 0x4DE8, target_data.elem_dmg.elem2_type)
    writeFloat(target_address   + 0x4DEC, target_data.elem_dmg.elem2_mult)
    writeInteger(target_address + 0x4DF0, target_data.elem_dmg.elem3_type)
    writeFloat(target_address   + 0x4DF4, target_data.elem_dmg.elem3_mult)
    writeInteger(target_address + 0x4DF8, target_data.elem_dmg.elem4_type)
    writeFloat(target_address   + 0x4DFC, target_data.elem_dmg.elem4_mult)
    -- // Decay
    writeInteger(target_address + 0x4E00, target_data.decay.mode)
    writeFloat(target_address   + 0x4E04, target_data.decay.accel)
    writeFloat(target_address   + 0x4E08, target_data.decay.min_delay)
    writeFloat(target_address   + 0x4E0C, target_data.decay.max_delay)
    -- // Others
    writeInteger(target_address + 0x4F64, target_data.require_demo)
    writeInteger(target_address + 0x4F68, target_data.downed_anim)
    writeInteger(target_address + 0x4F6C, target_data.dead_anim)
    writeInteger(target_address + 0x4F70, target_data.on_downed_hide_vis_group)
    writeInteger(target_address + 0x4F74, target_data.on_downed_show_vis_group)
    writeInteger(target_address + 0x4F78, target_data.on_dead_hide_vis_group)
    writeInteger(target_address + 0x4F7C, target_data.on_dead_show_vis_group)
    writeInteger(target_address + 0x4F80, target_data.on_death_destruct_lvl)
    writeInteger(target_address + 0x4F84, target_data.can_die_naturally)
    writeInteger(target_address + 0x4F88, target_data.death_propagation)
    writeInteger(target_address + 0x4F8C, target_data.ui_health_str.str1)
    writeInteger(target_address + 0x4F90, target_data.ui_health_str.str2)
    writeInteger(target_address + 0x4F94, target_data.ui_health_str.str3)
    writeInteger(target_address + 0x4F98, target_data.ui_health_str.str4)
end



{$asm}
[DISABLE]
</AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>244</ID>
      <Description>"• ВКЛЮЧИТЬ •"</Description>
      <Options moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
[DISABLE]
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>111</ID>
          <Description>"Данный функционал можно отредактировать вручную"</Description>
          <Options moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
          <Color>C4C400</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
[DISABLE]
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>216</ID>
              <Description>"【﻿ＡＵＴＯＭＡＴＩＣ　ＷＥＡＰＯＮＳ】"</Description>
              <Options moHideChildren="1" moManualExpandCollapse="1" moDeactivateChildrenAsWell="1"/>
              <Color>808000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{
    Game Name:     Helldivers 2
    Game Version:  1.001.203
    Author:        MEOWSISI || MIAUSISI
    Date:          2024-12-13
    Table Version: 3.0.0

    AUTOMATIC WEAPONS
    -----------------

    This script initializes the data of the following weapons:

    RIFLES
    ------
    - AR-23  Liberator Standard
    - AR-23A Liberator Carbine
    - AR-23C Liberator Concussive
    - AR-23P Liberator Penetrator
    - AR-61  Tenderizer
    - BR-14  Adjudicator

    MACHINE GUNS
    ------------
    - LMG-105 Stalwart
    - MG-43   Machine Gun
    - HMG-206 Heavy Machine Gun

    SMGS
    ----
    - MP-98  Knight
    - SMG-32 Reprimand
    - SMG-37 Defender
    - SMG-79 Pummeler
}
{$lua}
-- //!         Please, DO!!! NOT!!! TOUCH!!! THIS!!! FILE!!!



-- //! ==============================================================
-- //! =====================    R I F L E S     =====================
-- //! ==============================================================


-- //! === AR-23 Lib. Std || AR-23A Lib. Carbine || M-105 Stalwart === \\!
liberator_std_damage     = Read_DamageSettings_Data(60)
liberator_std_projectile = Read_ProjectileInfo_Data(145, 10845250369047350884)
liberator_std_weaponinfo = Read_WeaponInfo_Data(10845250369047350884)
liberator_std_tagsinfo   = Read_TagsInfo_Data(10845250369047350884)

lib_carbine_weaponinfo   = Read_WeaponInfo_Data(12100643055971655455)
lib_carbine_tagsinfo     = Read_TagsInfo_Data(12100643055971655455)

lmg_stalwart_weaponinfo  = Read_WeaponInfo_Data(1573296579562737333)


-- //! ================ AR-23C Liberator Concussive ================
lib_concussive_damage     = Read_DamageSettings_Data(59)
lib_concussive_projectile = Read_ProjectileInfo_Data(148, 14942687850090605537)
lib_concussive_weaponinfo = Read_WeaponInfo_Data(14942687850090605537)
lib_concussive_tagsinfo   = Read_TagsInfo_Data(14942687850090605537)

-- //! ================  AR-23P Liberator Penetrator  ===============
lib_penetrator_damage     = Read_DamageSettings_Data(57)
lib_penetrator_projectile = Read_ProjectileInfo_Data(146, 4885016034561106550)
lib_penetrator_weaponinfo = Read_WeaponInfo_Data(4885016034561106550)
lib_penetrator_tagsinfo   = Read_TagsInfo_Data(4885016034561106550)

-- //! ======================  AR-61 Tenderizer  ======================
tenderizer_damage     = Read_DamageSettings_Data(81)
tenderizer_projectile = Read_ProjectileInfo_Data(173, 14845617694460717074)
tenderizer_weaponinfo = Read_WeaponInfo_Data(14845617694460717074)
tenderizer_magazine   = Read_Magazine_Data(14845617694460717074)
tenderizer_tagsinfo   = Read_TagsInfo_Data(14845617694460717074)

-- //! ======================  BR-14 Adjudicator  ======================
--                          MIGRATED TO GAS WEAPONS!


-- //! ==============================================================
-- //! =================   M A C H I N E   G U N S   ================
-- //! ==============================================================


-- //! ====================   MG-43 Machine Gun   ====================
machinegun_damage     = Read_DamageSettings_Data(74)
machinegun_projectile = Read_ProjectileInfo_Data(162, 1279722939363854678)
machinegun_weaponinfo = Read_WeaponInfo_Data(1279722939363854678)
machinegun_magazine   = Read_Magazine_Data(1279722939363854678)

-- //! ================   HMG-206 Heavy Machine Gun   ================
heavymg_damage     = Read_DamageSettings_Data(135)
heavymg_projectile = Read_ProjectileInfo_Data(185, 2401215835282261016)
heavymg_weaponinfo = Read_WeaponInfo_Data(2401215835282261016)
heavymg_magazine   = Read_Magazine_Data(2401215835282261016)

-- //! ==============================================================
-- //! ==========================   S M G S   =======================
-- //! ==============================================================


-- //! =================    SMG-32 Reprimand    =====================
reprimand_damage     = Read_DamageSettings_Data(51)
reprimand_projectile = Read_ProjectileInfo_Data(129, 10717884433990741653)
reprimand_weaponinfo = Read_WeaponInfo_Data(10717884433990741653)
reprimand_magazine   = Read_Magazine_Data(10717884433990741653)
reprimand_taginfo    = Read_TagsInfo_Data(10717884433990741653)

-- //! =================    SMG-37 Defender    =======================
defender_damage     = Read_DamageSettings_Data(42)
defender_projectile = Read_ProjectileInfo_Data(159, 5641428405267160100)
defender_weaponinfo = Read_WeaponInfo_Data(5641428405267160100)
defender_taginfo    = Read_TagsInfo_Data(5641428405267160100)
defender_magazine   = Read_Defender_CustomMagazine_Data()

-- //! =================    SMG-79 Pummeler    =======================
pummeler_damage     = Read_DamageSettings_Data(49)
pummeler_projectile = Read_ProjectileInfo_Data(136, 578623101395158887)
pummeler_reload     = Read_Reload_Data(578623101395158887)
pummeler_magazine   = Read_Magazine_Data(578623101395158887)
pummeler_weaponinfo = Read_WeaponInfo_Data(578623101395158887)
pummeler_taginfo    = Read_TagsInfo_Data(578623101395158887)

-- //! ============    MP-98 Knight  &amp;&amp; StA-11 SMG  ============
knight_kzonesmg_damage = Read_DamageSettings_Data(34)
kzonesmg_magazine = Read_Magazine_Data(5450511615252257986)


{$asm}
[DISABLE]
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>226</ID>
                  <Description>"[𝐒𝐌𝐆𝐒] 𝐒𝐌𝐆-𝟑𝟕 𝐃𝐞𝐟𝐞𝐧𝐝𝐞𝐫"</Description>
                  <Color>FFFF82</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
    /*
    Game Name:     Helldivers 2
    Game Version:  1.001.203
    Author:        MEOWSISI || MIAUSISI
    Date:          2024-12-13
    Table Version: 3.0.0

    SMG-37 Defender
    ---------------

    EXCELS AT:
    - Close-quarters combat.
    - High rate of fire.
    - High damage output.
    - High mobility.

    MEDIOCRE AT:
    - Long-range combat.
    - Heavy armored targets.

    CHANGELOG:
    - Adjusted damage from 75||8 to 66||11.
    - Increased fire rate from 520 rpm to 1380 rpm.
    - Increased Armor Pen. values from 2||2||2||0 to 4||3||3||2.
    - Increased magazine size from 45 to 90, initial from 5 to 7,
      max from 7 to 9, and refill from 7 to 9.
    - Speed up reload duration from 2.8s to 1.3s.

    COMMENTS FROM DEVELOPMENT:
    - The SMGs were a tough deal, mainly because I could not find a way to
      make them different from the Assault Rifles, and at the same time making
      them viable on high difficulties.
    - From the 3 SMGs that I have available, the Defender is the all-rounder
      one, boasting excellent burst damage output, high rate of fire, and
      faster reload.
    - If you prefer to always fight on the front lines, the Defender is better
      suited than the Liberator, mainly because its higher damage output and
      high horizontal recoil make that weapon a beast when dealing with swarms
      of enemies.
    - The tradeoff is that the high horizonal recoil makes the Defender way less
      accurate on long range, so you will have to get closer to the enemies to
      make the most of it.

    NOTE FROM AUTHOR REGARDING MAGAZINE:
    - The Defender on the game is equipped with a custom magazine:
      the "SMG 12x25mm. Extended".
    - This magazine overrides the default magazine of the weapon, so if you try
      to modify the magazine on the usual way, it won't work.
    - That's why the variable to modify the Defender magazine is called
      "Read_Defender_CustomMagazine_Data" instead of "Read_Magazine_Data".
    */
}

{$lua}
-- //! ==========          You can adjust the values here:
defender_damage.DATA.damage_std = 66
defender_damage.DATA.damage_drb = 11
Set_ArmorPenetration_Type(defender_damage.DATA, defender_taginfo.DATA, "MediumArmorPen")

defender_projectile.DATA.rpm.y = 1380

defender_weaponinfo.DATA.multip.recoilx = 2.30
defender_weaponinfo.DATA.recoil.randx   = 5.00
defender_weaponinfo.DATA.multip.climbx  = 1.00
defender_weaponinfo.DATA.spread.multipx = 10.00

defender_magazine.DATA.magazine_capacity = 90
defender_magazine.DATA.magazine_initial  = 7
defender_magazine.DATA.magazine_max      = 9
defender_magazine.DATA.magazine_refill   = 9
defender_magazine.DATA.reload_duration   = 1.6




-- //! =======================================================
-- //!               DO NOT CHANGE the code below:
-- //! =======================================================
Apply_DamageSettings_Modifications(defender_damage.DATA)
Apply_ProjectileInfo_Modifications(defender_projectile.DATA)
Apply_WeaponInfo_Modifications(defender_weaponinfo.DATA)
Apply_Defender_CustomMagazine_Modifications(defender_magazine.DATA)
Apply_TagsInfo_Modifications(defender_taginfo.DATA)

{$asm}
[DISABLE]
{$lua}

Apply_DamageSettings_Modifications(defender_damage.backup)
Apply_ProjectileInfo_Modifications(defender_projectile.backup)
Apply_WeaponInfo_Modifications(defender_weaponinfo.backup)
Apply_Defender_CustomMagazine_Modifications(defender_magazine.backup)
Apply_TagsInfo_Modifications(defender_taginfo.backup)

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>227</ID>
                  <Description>"[𝐒𝐌𝐆𝐒] 𝐒𝐌𝐆-𝟕𝟗 𝐏𝐮𝐦𝐦𝐞𝐥𝐞𝐫"</Description>
                  <Color>FFFF82</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
    /*
    Game Name:     Helldivers 2
    Game Version:  1.002.003
    Author:        MEOWSISI || MIAUSISI
    Date:          2025-01-06
    Table Version: 3.1.0

    SMG-79 Pummeler
    ---------------

    EXCELS AT:
    - Close-quarters combat.
    - High rate of fire.
    - High stun capabilities.
    - High mobility.

    MEDIOCRE AT:
    - Long-range combat.
    - Heavy armored targets.

    CHANGELOG:
    - Adjusted damage to 66||9.
    - Increased Armor Pen. values to 3||2||2||2.
    - Added stun effects.
    - Increased projectile speed and RPM.
    - Increased magazine size to 75.
    - Increased horizontal recoil and spread.


    COMMENTS FROM DEVELOPMENT:
    - The Pummeler is a fun weapon to use! The stun effects compensate for the
      lower damage output and the high recoil.
    - Similar to the Defender, the Pummeler is a close-quarters weapon, but with
      a higher focus on stunning enemies.
    */
}

{$lua}
-- //! ==========          You can adjust the values here:
pummeler_damage.DATA.damage_std = 66
pummeler_damage.DATA.damage_drb = 9
Set_ArmorPenetration_Type(pummeler_damage.DATA, pummeler_taginfo.DATA, "MediumArmorPen")
pummeler_damage.DATA.momentum.stagger = 75
pummeler_damage.DATA.momentum.knkback = 75
pummeler_damage.DATA.stt_eff_1.target_type = 37
pummeler_damage.DATA.stt_eff_1.target_time = 2.0
pummeler_damage.DATA.stt_eff_2.target_type = 38
pummeler_damage.DATA.stt_eff_2.target_time = 2.6
pummeler_damage.DATA.stt_eff_3.target_type = 7
pummeler_damage.DATA.stt_eff_3.target_time = 10.0

pummeler_projectile.DATA.speed = 1900
pummeler_projectile.DATA.drag  = 0.06
pummeler_projectile.DATA.gravity_multiplier = 0.1
pummeler_projectile.DATA.rpm.y = 999

pummeler_magazine.DATA.magazine_size = 75
pummeler_reload.DATA.duration = 1.4

pummeler_weaponinfo.DATA.multip.recoilx = 1.75
pummeler_weaponinfo.DATA.recoil.randx   = 4.00
pummeler_weaponinfo.DATA.multip.climbx  = 1.00
pummeler_weaponinfo.DATA.spread.multipx = 10.00


-- //! =======================================================
-- //!               DO NOT CHANGE the code below:
-- //! =======================================================
Apply_DamageSettings_Modifications(pummeler_damage.DATA)
Apply_ProjectileInfo_Modifications(pummeler_projectile.DATA)
Apply_MagazineSettings_Modifications(pummeler_magazine.DATA)
Apply_ReloadSettings_Modifications(pummeler_reload.DATA)
Apply_WeaponInfo_Modifications(pummeler_weaponinfo.DATA)
Apply_TagsInfo_Modifications(pummeler_taginfo.DATA)

{$asm}
[DISABLE]
{$lua}

Apply_DamageSettings_Modifications(pummeler_damage.backup)
Apply_ProjectileInfo_Modifications(pummeler_projectile.backup)
Apply_MagazineSettings_Modifications(pummeler_magazine.backup)
Apply_ReloadSettings_Modifications(pummeler_reload.backup)
Apply_WeaponInfo_Modifications(pummeler_weaponinfo.backup)
Apply_TagsInfo_Modifications(pummeler_taginfo.backup)

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>229</ID>
                  <Description>"[𝐒𝐌𝐆𝐒] 𝐒𝐌𝐆-𝟑𝟐 𝐑𝐞𝐩𝐫𝐢𝐦𝐚𝐧𝐝"</Description>
                  <Color>FFFF82</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
    /*
    Game Name:     Helldivers 2
    Game Version:  1.001.203
    Author:        MEOWSISI || MIAUSISI
    Date:          2024-12-13
    Table Version: 3.0.0

    SMG-32 Reprimand
    ---------------

    EXCELS AT:
    - Close-quarters combat.
    - Decent rate of fire.
    - Reduces armor of enemies and slows them.

    MEDIOCRE AT:
    - Long-range combat.
    - Swarms of enemies.

    CHANGELOG:
    - Adjusted damage to 80||25.
    - Increased Armor Pen. values to 4||4||4||4.
    - Added armor reduction and slow effects.
    - Increased projectile speed to 2200.
    - Increased magazine size to 66.


    COMMENTS FROM DEVELOPMENT:
    - This is a bit of experiment: I'm not fond of this weapon, because it overlaps
      a ton with the Liberator-class rifles.
    - I'm experimenting on giving this weapon a more supportive role, by reducing
      the armor of enemies and slowing them down.
    - The weapon is not meant to be a damage dealer, but a support weapon to help
      the team to deal with armored enemies.
    */
}

{$lua}
-- //! ==========          You can adjust the values here:
reprimand_damage.DATA.damage_std = 80
reprimand_damage.DATA.damage_drb = 25
reprimand_damage.DATA.momentum.stagger = 25
reprimand_damage.DATA.momentum.knkback = 25

Set_ArmorPenetration_Type(reprimand_damage.DATA, reprimand_taginfo.DATA, "MediumArmorPen")
Set_DamageElement_Type(reprimand_damage.DATA, "SHREDDER")

reprimand_projectile.DATA.speed = 2200
reprimand_projectile.DATA.drag  = 0.06
reprimand_projectile.DATA.gravity_multiplier = 0.1
reprimand_projectile.DATA.rpm.y = 666

reprimand_magazine.DATA.magazine_size = 66

reprimand_weaponinfo.DATA.spread.infox = 0
reprimand_weaponinfo.DATA.spread.infoy = 0
reprimand_weaponinfo.DATA.spread.multipx = 0
reprimand_weaponinfo.DATA.spread.multipy = 0
reprimand_weaponinfo.DATA.multip.recoilx = 0.9
reprimand_weaponinfo.DATA.multip.recoily = 0.72

-- //! =======================================================
-- //!               DO NOT CHANGE the code below:
-- //! =======================================================
Apply_DamageSettings_Modifications(reprimand_damage.DATA)
Apply_ProjectileInfo_Modifications(reprimand_projectile.DATA)
Apply_MagazineSettings_Modifications(reprimand_magazine.DATA)
Apply_WeaponInfo_Modifications(reprimand_weaponinfo.DATA)
Apply_TagsInfo_Modifications(reprimand_taginfo.DATA)

{$asm}
[DISABLE]
{$lua}

Apply_DamageSettings_Modifications(reprimand_damage.backup)
Apply_ProjectileInfo_Modifications(reprimand_projectile.backup)
Apply_MagazineSettings_Modifications(reprimand_magazine.backup)
Apply_WeaponInfo_Modifications(reprimand_weaponinfo.backup)
Apply_TagsInfo_Modifications(reprimand_taginfo.backup)

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>330</ID>
                  <Description>"[𝐒𝐌𝐆𝐒] 𝐌𝐏-𝟗𝟖 𝐊𝐧𝐢𝐠𝐡𝐭 || 𝐒𝐭𝐀-𝟏𝟏 𝐒𝐌𝐆"</Description>
                  <Color>FFFF82</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
    /*
    Game Name:     Helldivers 2
    Game Version:  1.001.203
    Author:        MEOWSISI || MIAUSISI
    Date:          2024-12-13
    Table Version: 3.0.0

    MP-98 Knight || StA-11 SMG
    ---------------

    EXCELS AT:
    - Close-quarters combat.
    - Very fast rate of fire.
    - Applies gas effects to enemies.
    - Swarms of enemies.

    MEDIOCRE AT:
    - Long-range combat.
    - Tough enemies.

    CHANGELOG:
    - Added gas effects.

    COMMENTS FROM DEVELOPMENT:
    - I don't have the Knight :( but when I noticed that the new SMG
      shared its damage properties, I decided to do something about them.
    - I think that adding the gas effects shall be enough; when I
      added the gas effect on the Breaker S&amp;P it was overpowered as hell
      because I have also added more damage. In fact, I had to nerf the
      damage properties for the Breaker S&amp;P because it will solo almost
      anything.
    - In any case, as always, I always read your comments! Let me know
      if it is underpowered/overpowered.
    */
}

{$lua}
-- //! ==========          You can adjust the values here:
Set_DamageElement_Type(knight_kzonesmg_damage.DATA, "GAS")

kzonesmg_magazine.DATA.magazine_size   = 90
kzonesmg_magazine.DATA.magazine_init   = 7
kzonesmg_magazine.DATA.magazine_refill = 7
kzonesmg_magazine.DATA.magazine_max    = 7

Apply_DamageSettings_Modifications(knight_kzonesmg_damage.DATA)
Apply_MagazineSettings_Modifications(kzonesmg_magazine.DATA)

{$asm}
[DISABLE]
{$lua}

Apply_DamageSettings_Modifications(knight_kzonesmg_damage.backup)
Apply_MagazineSettings_Modifications(kzonesmg_magazine.backup)

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>200</ID>
                  <Description>"[𝐑𝐈𝐅𝐋𝐄𝐒] 𝐀𝐑-𝟐𝟑𝐏 𝐋𝐢𝐛. 𝐏𝐞𝐧𝐞𝐭𝐫𝐚𝐭𝐨𝐫"</Description>
                  <Color>FFB111</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
    /*
    Game Name:     Helldivers 2
    Game Version:  1.002.003
    Author:        MEOWSISI || MIAUSISI
    Date:          2025-01-05
    Table Version: 3.1.0

    AR-23P Liberator Penetrator
    ---------------------------

    EXCELS AT:
    -  High penetration power.
    -  Good damage output.
    -  Long-range combat.

    MEDIOCRE AT:
    -  Swarms of enemies.

    CHANGELOG:
    - Adjusted damage to 110||92.
    - Increased Armor Pen. values to 6||6||6||5.
    - Increased projectile speed to 2800.
    - Improved weapon recoil and handling.

    COMMENTS FROM DEVELOPMENT:
    - The Liberator Penetrator is the go-to weapon for Automatons. It's one
      of the few weapons that can penetrate through heavy armor consistently.
    - It's very accurate at long distances, and behaves well on mid-range
      combat, but its long reload time and decent magazine size make it a bit of
      a gambling choice for close-quarters combat.
    */
}

{$lua}
-- //! ==========          You can adjust the values here:
lib_penetrator_damage.DATA.damage_std = 110
lib_penetrator_damage.DATA.damage_drb = 92
Set_ArmorPenetration_Type(lib_penetrator_damage.DATA, lib_penetrator_tagsinfo.DATA, "HeavyArmorPen")
lib_penetrator_damage.DATA.momentum.stagger = 35

lib_penetrator_projectile.DATA.speed = 2500
lib_penetrator_projectile.DATA.drag  = 0.03
lib_penetrator_projectile.DATA.gravity_multiplier   = 0.2
lib_penetrator_projectile.DATA.penetration_slowdown = 0.0

lib_penetrator_weaponinfo.DATA.multip.recoilx = 0.84
lib_penetrator_weaponinfo.DATA.multip.recoily = 0.84
lib_penetrator_weaponinfo.DATA.multip.climbx = 0.84
lib_penetrator_weaponinfo.DATA.multip.climby = 0.84
lib_penetrator_weaponinfo.DATA.multip.driftx = 0.84
lib_penetrator_weaponinfo.DATA.multip.drifty = 0.84
lib_penetrator_weaponinfo.DATA.handling.scope_responsiveness = 25.0
lib_penetrator_weaponinfo.DATA.handling.ergonomics = 65.0
lib_penetrator_weaponinfo.DATA.handling.scope_sway = 0.45
lib_penetrator_weaponinfo.DATA.handling.sway_multiplier = 0.45


-- //! =======================================================
-- //!               DO NOT CHANGE the code below:
-- //! =======================================================
Apply_DamageSettings_Modifications(lib_penetrator_damage.DATA)
Apply_ProjectileInfo_Modifications(lib_penetrator_projectile.DATA)
Apply_WeaponInfo_Modifications(lib_penetrator_weaponinfo.DATA)
Apply_TagsInfo_Modifications(lib_penetrator_tagsinfo.DATA)

{$asm}
[DISABLE]
{$lua}

Apply_DamageSettings_Modifications(lib_penetrator_damage.backup)
Apply_ProjectileInfo_Modifications(lib_penetrator_projectile.backup)
Apply_WeaponInfo_Modifications(lib_penetrator_weaponinfo.backup)
Apply_TagsInfo_Modifications(lib_penetrator_tagsinfo.backup)

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>8</ID>
                  <Description>"[𝐑𝐈𝐅𝐋𝐄𝐒] 𝐀𝐑-𝟐𝟑𝐂 𝐋𝐢𝐛. 𝐂𝐨𝐧𝐜𝐮𝐬𝐬𝐢𝐯𝐞"</Description>
                  <Color>FFB111</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
    /*
    Game Name:     Helldivers 2
    Game Version:  1.001.203
    Author:        MEOWSISI || MIAUSISI
    Date:          2024-12-13
    Table Version: 3.0.0

    AR-23P Liberator Concussive
    ---------------------------

    EXCELS AT:
    -  Staggering enemies.
    -  Good damage output.

    MEDIOCRE AT:
    -  Swarms of enemies.

    CHANGELOG:
    - Adjusted damage to 86||86.
    - Increased Armor Pen. values to 4||3||3||2.
    - Added stun effects.

    COMMENTS FROM DEVELOPMENT:
    - The big brother of the SMG-79 Pummeler, the Liberator Concussive is a
      weapon that excels at staggering enemies at any distance.
    - The weapon is not meant to be a damage dealer, but a support weapon to help
      the team to deal with dangerous enemies.
    */
}

{$lua}
-- //! ==========          You can adjust the values here:
lib_concussive_damage.DATA.damage_std = 86
lib_concussive_damage.DATA.damage_drb = 86
Set_ArmorPenetration_Type(lib_concussive_damage.DATA, lib_concussive_tagsinfo.DATA, "LightArmorPen")
lib_concussive_damage.DATA.momentum.stagger = 105
lib_concussive_damage.DATA.momentum.knkback = 105
Set_DamageElement_Type(lib_concussive_damage.DATA, "STUN")

lib_concussive_projectile.DATA.mass  = 270
lib_concussive_projectile.DATA.speed = 1800
lib_concussive_projectile.DATA.drag  = 0.0
lib_concussive_projectile.DATA.gravity_multiplier   = 0.0
lib_concussive_projectile.DATA.penetration_slowdown = 0.1


-- //! =======================================================
-- //!               DO NOT CHANGE the code below:
-- //! =======================================================
Apply_DamageSettings_Modifications(lib_concussive_damage.DATA)
Apply_ProjectileInfo_Modifications(lib_concussive_projectile.DATA)
Apply_TagsInfo_Modifications(lib_concussive_tagsinfo.DATA)

{$asm}
[DISABLE]
{$lua}

Apply_DamageSettings_Modifications(lib_concussive_damage.backup)
Apply_ProjectileInfo_Modifications(lib_concussive_projectile.backup)
Apply_TagsInfo_Modifications(lib_concussive_tagsinfo.backup)

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>12</ID>
                  <Description>"[𝐑𝐈𝐅𝐋𝐄𝐒] 𝐋𝐢𝐛. 𝐒𝐭𝐚𝐧𝐝𝐚𝐫𝐝/𝐂𝐚𝐫𝐚𝐛𝐢𝐧𝐞 || 𝐒𝐭𝐚𝐥𝐰𝐚𝐫𝐭"</Description>
                  <Options moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
                  <Color>FFB111</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
    /*
    Game Name:     Helldivers 2
    Game Version:  1.001.203
    Author:        MEOWSISI || MIAUSISI
    Date:          2024-12-13
    Table Version: 3.0.0

    AR-23 Standard Liberator || AR-23A Lib. Carbine || LMG-105 Stalwart
    -------------------------------------------------------------------

    EXCELS AT:
    -  Versatile weapons.
    -  Good damage output.
    -  Good armor penetration.
    -  All-rounder weapons.

    CHANGELOG:
    - Adjusted damage to 132||66.
    - Increased Armor Pen. values to 4||3||3||2.
    - Increased projectile speed to 2800.
    - Improved weapon recoil and handling.

    COMMENTS FROM DEVELOPMENT:
    - I reworked the values on the Std. Liberator to make it the template of
      all other rifles. Now it properly works as the best all-rounder weapon.
    - If you are not sure what weapon to use, the Standard Liberator is the
      best choice for any situation.
    - The damage changes alter how the Lib. Carbine and the Stalwart behave:
      the Carbine excels now at close-combat situations, while the
      Stalwart is the sustained-dps weapon of choice.
    */
}

{$lua}
-- //! ==========          You can adjust the values here:
liberator_std_damage.DATA.damage_std = 132
liberator_std_damage.DATA.damage_drb = 66
Set_ArmorPenetration_Type(liberator_std_damage.DATA, liberator_std_tagsinfo.DATA, "MediumArmorPen")
liberator_std_damage.DATA.momentum.stagger = 35

liberator_std_projectile.DATA.speed = 2800
liberator_std_projectile.DATA.drag  = 0.08
liberator_std_projectile.DATA.gravity_multiplier   = 0.1
liberator_std_projectile.DATA.penetration_slowdown = 0.17


liberator_std_weaponinfo.DATA.multip.recoilx = 0.69
liberator_std_weaponinfo.DATA.multip.recoily = 0.69
liberator_std_weaponinfo.DATA.multip.climbx = 0.69
liberator_std_weaponinfo.DATA.multip.climby = 0.69
liberator_std_weaponinfo.DATA.multip.driftx = 0.69
liberator_std_weaponinfo.DATA.multip.drifty = 0.69
liberator_std_weaponinfo.DATA.handling.scope_responsiveness = 50.0
liberator_std_weaponinfo.DATA.handling.ergonomics = 85.0
liberator_std_weaponinfo.DATA.handling.scope_sway = 0.21
liberator_std_weaponinfo.DATA.handling.sway_multiplier = 0.21

-- //! =======================================================
-- //!               DO NOT CHANGE the code below:
-- //! =======================================================
Apply_DamageSettings_Modifications(liberator_std_damage.DATA)
Apply_ProjectileInfo_Modifications(liberator_std_projectile.DATA)
Apply_WeaponInfo_Modifications(liberator_std_weaponinfo.DATA)
Apply_TagsInfo_Modifications(liberator_std_tagsinfo.DATA)


{$asm}
[DISABLE]
{$lua}

Apply_DamageSettings_Modifications(liberator_std_damage.backup)
Apply_ProjectileInfo_Modifications(liberator_std_projectile.backup)
Apply_WeaponInfo_Modifications(liberator_std_weaponinfo.backup)
Apply_TagsInfo_Modifications(liberator_std_tagsinfo.backup)


</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>201</ID>
                  <Description>"[𝐑𝐈𝐅𝐋𝐄𝐒] 𝐀𝐑-𝟔𝟏 𝐓𝐞𝐧𝐝𝐞𝐫𝐢𝐳𝐞𝐫"</Description>
                  <Color>FFB111</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
    /*
    Game Name:     Helldivers 2
    Game Version:  1.001.203
    Author:        MEOWSISI || MIAUSISI
    Date:          2024-12-13
    Table Version: 3.0.0

    AR-61 Tenderizer
    ----------------

    EXCELS AT:
    -  Versatile weapon.
    -  Good armor penetration.
    -  All-rounder weapon.
    -  Stealth capabilities.

    MEDIOCRE AT:
    - Damage per bullet.
    - Dealing with very bulky enemies.

    CHANGELOG:
    - Adjusted damage to 66||48.
    - Increased Armor Pen. values to 4||3||2||2.
    - Added stealth capabilities.
    - Adjusted magazine size to 66.

    COMMENTS FROM DEVELOPMENT:
    - The Tenderizer is one of the rifles I didn't like that much initially.
    - I reworked the values to make it a stealth weapon, with good armor penetration.
    - The variable RPM, combined with a bigger magazine, makes it a decent pick
      on all situations.
    */
}

{$lua}
-- //! ==========          You can adjust the values here:
tenderizer_damage.DATA.damage_std = 66
tenderizer_damage.DATA.damage_drb = 48
Set_ArmorPenetration_Type(tenderizer_damage.DATA, tenderizer_tagsinfo.DATA, "MediumArmorPen")

tenderizer_projectile.DATA.speed = 2600
tenderizer_projectile.DATA.drag  = 0.0
tenderizer_projectile.DATA.gravity_multiplier   = 0.0
tenderizer_projectile.DATA.penetration_slowdown = 0.166
tenderizer_projectile.DATA.muzzle_flash = 955444492565880359
tenderizer_projectile.DATA.silenced = 1


tenderizer_weaponinfo.DATA.handling.scope_responsiveness = 60.0
tenderizer_weaponinfo.DATA.handling.ergonomics = 85.0
tenderizer_weaponinfo.DATA.handling.scope_sway = 0.0
tenderizer_weaponinfo.DATA.handling.sway_multiplier = 0.0
tenderizer_weaponinfo.DATA.suppresed.is_suppressed = 1
tenderizer_weaponinfo.DATA.suppresed.visibility = 0.05
tenderizer_weaponinfo.DATA.suppresed.weapon_scream = 0
tenderizer_weaponinfo.DATA.suppresed.noise_template = 12
tenderizer_magazine.DATA.magazine_size = 66


-- //! =======================================================
-- //!               DO NOT CHANGE the code below:
-- //! =======================================================
Apply_DamageSettings_Modifications(tenderizer_damage.DATA)
Apply_ProjectileInfo_Modifications(tenderizer_projectile.DATA)
Apply_WeaponInfo_Modifications(tenderizer_weaponinfo.DATA)
Apply_MagazineSettings_Modifications(tenderizer_magazine.DATA)
Apply_TagsInfo_Modifications(tenderizer_tagsinfo.DATA)

{$asm}
[DISABLE]
{$lua}

Apply_DamageSettings_Modifications(tenderizer_damage.backup)
Apply_ProjectileInfo_Modifications(tenderizer_projectile.backup)
Apply_WeaponInfo_Modifications(tenderizer_weaponinfo.backup)
Apply_MagazineSettings_Modifications(tenderizer_magazine.backup)
Apply_TagsInfo_Modifications(tenderizer_tagsinfo.backup)

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>11</ID>
                  <Description>"[𝐒𝐔𝐏𝐏𝐎𝐑𝐓] 𝐌𝐆-𝟒𝟑 𝐌𝐚𝐜𝐡𝐢𝐧𝐞 𝐆𝐮𝐧"</Description>
                  <Color>E87400</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
    /*
    Game Name:     Helldivers 2
    Game Version:  1.001.203
    Author:        MEOWSISI || MIAUSISI
    Date:          2024-12-13
    Table Version: 3.0.0

    MG-43 Machine Gun
    -----------------

    EXCELS AT:
    -  High rate of fire
    -  High magazine capacity
    -  High suppression capabilities
    -  Good armor penetration

    MEDIOCRE AT:
    -  Long-range precision shots.

    CHANGELOG:
    - Adjusted damage to 138||80.
    - Increased Armor Pen. values to 4||4||4||4.
    - Increased momentum values.
    - Increased projectile speed to 2800, and reduced air resistance.
    - Increased magazine size to 300, initial magazines to 3,
      and max magazines to 4.
    - Improved scope responsiveness and ergonomics.

    COMMENTS FROM DEVELOPMENT:
    - The MG-43 is a versatile weapon, capable of suppressing enemies and
      dealing with armored targets.
    - The best weapon for dealing with swarms of medium-armored enemies,
      but not the best for sniping.
    */
}

{$lua}
-- //! ==========          You can adjust the values here:
machinegun_damage.DATA.damage_std = 100
machinegun_damage.DATA.damage_drb = 80
machinegun_damage.DATA.ap_vals.ap1 = 4
machinegun_damage.DATA.ap_vals.ap2 = 4
machinegun_damage.DATA.ap_vals.ap3 = 4
machinegun_damage.DATA.ap_vals.ap4 = 4
machinegun_damage.DATA.momentum.knkback = 55
machinegun_damage.DATA.momentum.stagger = 55

machinegun_projectile.DATA.speed = 2800
machinegun_projectile.DATA.drag  = 0.00
machinegun_projectile.DATA.gravity_multiplier   = 0.85
machinegun_projectile.DATA.penetration_slowdown = 0.02

machinegun_weaponinfo.DATA.handling.scope_responsiveness = 15.0
machinegun_weaponinfo.DATA.handling.ergonomics = 35.0

machinegun_magazine.DATA.magazine_size = 300
machinegun_magazine.DATA.magazine = 3
machinegun_magazine.DATA.magazine_refill = 3
machinegun_magazine.DATA.magazine_max = 3
-- //! =======================================================
-- //!               DO NOT CHANGE the code below:
-- //! =======================================================
Apply_DamageSettings_Modifications(machinegun_damage.DATA)
Apply_ProjectileInfo_Modifications(machinegun_projectile.DATA)
Apply_WeaponInfo_Modifications(machinegun_weaponinfo.DATA)
Apply_MagazineSettings_Modifications(machinegun_magazine.DATA)

{$asm}
[DISABLE]
{$lua}

Apply_DamageSettings_Modifications(machinegun_damage.backup)
Apply_ProjectileInfo_Modifications(machinegun_projectile.backup)
Apply_WeaponInfo_Modifications(machinegun_weaponinfo.backup)
Apply_MagazineSettings_Modifications(machinegun_magazine.backup)

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>10</ID>
                  <Description>"[𝐒𝐔𝐏𝐏𝐎𝐑𝐓] 𝐇𝐌𝐆-𝟐𝟎𝟔 𝐇𝐞𝐚𝐯𝐲 𝐌𝐚𝐜𝐡𝐢𝐧𝐞 𝐆𝐮𝐧"</Description>
                  <Color>E87400</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
    /*
    Game Name:     Helldivers 2
    Game Version:  1.001.203
    Author:        MEOWSISI || MIAUSISI
    Date:          2024-12-13
    Table Version: 3.0.0

    HMG-205 Heavy Machine Gun
    -------------------------

    EXCELS AT:
    - Unparallel armor penetration.
    - Cleaning up armored enemies.
    - Defending positions

    MEDIOCRE AT:
    - Long-range combat.
    - Dealign with agile enemies.

    CHANGELOG:
    - Adjusted damage to 133||133.
    - Increased Armor Pen. values to 8||8||8||7.
    - Improved projectile speed.
    - Drastically increased magazine size to 175.
    - Increased maximum magazines to 3.

    COMMENTS FROM DEVELOPMENT:
    - The HMG-205 is now the beast it was always meant to be, capable of
      dealing with any armored enemy.
    - The weapon is not meant for long-range combat, but for defending
      positions, or slowly advancing with the team.
    */
}

{$lua}
-- //! ==========          You can adjust the values here:
heavymg_damage.DATA.damage_std = 115
heavymg_damage.DATA.damage_drb = 115
heavymg_damage.DATA.ap_vals.ap1 = 6
heavymg_damage.DATA.ap_vals.ap2 = 5
heavymg_damage.DATA.ap_vals.ap3 = 5
heavymg_damage.DATA.ap_vals.ap4 = 5
heavymg_damage.DATA.momentum.knkback = 75
heavymg_damage.DATA.momentum.stagger = 75

heavymg_projectile.DATA.mass = 500
heavymg_projectile.DATA.speed = 2100
heavymg_projectile.DATA.drag   = 0.0
heavymg_projectile.DATA.gravity_multiplier   = 0.0
heavymg_projectile.DATA.penetration_slowdown = 0.00

heavymg_weaponinfo.DATA.recoil.x = 28.0
heavymg_weaponinfo.DATA.recoil.y = 38.0
heavymg_weaponinfo.DATA.spread.infox = 2
heavymg_weaponinfo.DATA.spread.infoy = 2
heavymg_weaponinfo.DATA.handling.scope_responsiveness = 20.0
heavymg_weaponinfo.DATA.handling.ergonomics = 16.0

heavymg_magazine.DATA.magazine_size   = 200
heavymg_magazine.DATA.magazine_init   = 2
heavymg_magazine.DATA.magazine_refill = 2
heavymg_magazine.DATA.magazine_max    = 2

-- //! =======================================================
-- //!               DO NOT CHANGE the code below:
-- //! =======================================================
Apply_DamageSettings_Modifications(heavymg_damage.DATA)
Apply_ProjectileInfo_Modifications(heavymg_projectile.DATA)
Apply_WeaponInfo_Modifications(heavymg_weaponinfo.DATA)
Apply_MagazineSettings_Modifications(heavymg_magazine.DATA)

{$asm}
[DISABLE]
{$lua}

Apply_DamageSettings_Modifications(heavymg_damage.backup)
Apply_ProjectileInfo_Modifications(heavymg_projectile.backup)
Apply_WeaponInfo_Modifications(heavymg_weaponinfo.backup)
Apply_MagazineSettings_Modifications(heavymg_magazine.backup)

</AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>245</ID>
              <Description>"【﻿ＳＨＯＴＧＵＮＳ】"</Description>
              <Options moHideChildren="1" moManualExpandCollapse="1" moDeactivateChildrenAsWell="1"/>
              <Color>808000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{
    Game Name:     Helldivers 2
    Game Version:  1.001.203
    Author:        MEOWSISI || MIAUSISI
    Date:          2024-12-13
    Table Version: 3.0.0

    SHOTGUNS
    -----------------

    This script initializes the data of the following weapons:

    PUMP-ACTION SHOTGUNS
    --------------------
    - SG-8  Punisher
    - SG-8S Slugger
    - SG-451 Cookout
    - SG-20 Halt

    AUTOMATIC SHOTGUNS
    ------------
    - SG-225 Breaker
    - SG-225IE Breaker Incendiary
    - SG-225SP Breaker Spray&amp;Pray
}
{$lua}
-- //!         Please, DO!!! NOT!!! TOUCH!!! THIS!!! FILE!!!

-- //! ==============================================================
-- //! ===================    S H O T G U N S     ===================
-- //! ==============================================================




-- //! ====================     SG-8 Punisher     ===================
punisher_damage     = Read_DamageSettings_Data(100)
punisher_projectile = Read_ProjectileInfo_Data(211, 4749824949454633632)
punisher_weaponinfo = Read_WeaponInfo_Data(4749824949454633632)
punisher_rounds     = Read_Rounds_Data(4749824949454633632)
punisher_tagsinfo   = Read_TagsInfo_Data(4749824949454633632)

-- //! ================ SG-8S Slugger ================
slugger_damage     = Read_DamageSettings_Data(113)
slugger_projectile = Read_ProjectileInfo_Data(225, 5725374950499373869)
slugger_weaponinfo = Read_WeaponInfo_Data(5725374950499373869)
slugger_rounds     = Read_Rounds_Data(5725374950499373869)
slugger_tagsinfo   = Read_TagsInfo_Data(5725374950499373869)

-- //! ================ SG-451 Cookout ================
cookout_damage     = Read_DamageSettings_Data(101)
cookout_projectile = Read_ProjectileInfo_Data(213, 15214248472323070124)
cookout_weaponinfo = Read_WeaponInfo_Data(15214248472323070124)
cookout_rounds     = Read_Rounds_Data(15214248472323070124)
cookout_tagsinfo   = Read_TagsInfo_Data(15214248472323070124)


-- //! ================== SG-20 Halt =====================
halt_shreddr_damage = Read_DamageSettings_Data(103)
halt_stagger_damage = Read_DamageSettings_Data(112)

-- //! ================ SG-225 Breaker ================
breaker_damage     = Read_DamageSettings_Data(116)
breaker_projectile = Read_ProjectileInfo_Data(202, 5050852199397921576)
breaker_weaponinfo = Read_WeaponInfo_Data(5050852199397921576)
breaker_tagsinfo   = Read_TagsInfo_Data(5050852199397921576)


-- //! ========== SG-225IE Breaker Incendiary ==========
incbreaker_damage     = Read_DamageSettings_Data(119)
incbreaker_projectile = Read_ProjectileInfo_Data(205, 13918995818598980231)
incbreaker_weaponinfo = Read_WeaponInfo_Data(13918995818598980231)
incbreaker_magazine   = Read_Magazine_Data(13918995818598980231)
incbreaker_tagsinfo   = Read_TagsInfo_Data(13918995818598980231)

{$asm}
[DISABLE]
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>16</ID>
                  <Description>"[𝐏𝐔𝐌𝐏] 𝐒𝐆-𝟖 𝐏𝐮𝐧𝐢𝐬𝐡𝐞𝐫"</Description>
                  <Color>FFFF82</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
    /*
    Game Name:     Helldivers 2
    Game Version:  1.001.203
    Author:        MEOWSISI || MIAUSISI
    Date:          2024-12-13
    Table Version: 3.0.0

    SG-8 Punisher
    ---------------

    EXCELS AT:
    - Crowds of slow but tough enemies
    - Close-quarters combat.
    - High damage output.

    MEDIOCRE AT:
    - Dealing with far-away enemies.
    - Crowds of fast enemies.

    CHANGELOG:
    - Increased amount of pellets to 32.
    - Adjuster damage per pellet to 22||14.

    COMMENTS FROM DEVELOPMENT:
    - Punisher is now a very fun weapon to use! The PUMP factor is very noticeable:
      you will blend almost all enemies at close range, and help friends very far away too!
    - You need to be careful thou with running out of bullets!
    */
}

{$lua}
-- //! ==========          You can adjust the values here:
punisher_damage.DATA.damage_std = 16
punisher_damage.DATA.damage_drb = 12
Set_ArmorPenetration_Type(punisher_damage.DATA, punisher_tagsinfo.DATA, "MediumArmorPen")
punisher_damage.DATA.momentum.knkback = 55
punisher_damage.DATA.momentum.stagger = 55

punisher_projectile.DATA.calibre = 36
punisher_projectile.DATA.mass    = 10
punisher_projectile.DATA.speed   = 2000
punisher_projectile.DATA.drag    = 0.16
punisher_projectile.DATA.life_time = 6.0
punisher_projectile.DATA.num_projectiles      = 32
punisher_projectile.DATA.gravity_multiplier   = 1.6
punisher_projectile.DATA.penetration_slowdown = 0.16

punisher_weaponinfo.DATA.spread.infox = 415
punisher_weaponinfo.DATA.spread.infoy = 415
punisher_weaponinfo.DATA.spread.multipx = 1.0
punisher_weaponinfo.DATA.spread.multipy = 1.0

punisher_rounds.DATA.primary.spreadx_mult   = 2.0
punisher_rounds.DATA.primary.spready_mult   = 2.0
punisher_rounds.DATA.secondary.spreadx_mult = 2.0
punisher_rounds.DATA.secondary.spready_mult = 2.0



-- //! =======================================================
-- //!               DO NOT CHANGE the code below:
-- //! =======================================================
Apply_DamageSettings_Modifications(punisher_damage.DATA)
Apply_ProjectileInfo_Modifications(punisher_projectile.DATA)
Apply_WeaponInfo_Modifications(punisher_weaponinfo.DATA)
Apply_RoundsSettings_Modifications(punisher_rounds.DATA)
Apply_TagsInfo_Modifications(punisher_tagsinfo.DATA)

{$asm}
[DISABLE]
{$lua}

Apply_DamageSettings_Modifications(punisher_damage.backup)
Apply_ProjectileInfo_Modifications(punisher_projectile.backup)
Apply_WeaponInfo_Modifications(punisher_weaponinfo.backup)
Apply_RoundsSettings_Modifications(punisher_rounds.backup)
Apply_TagsInfo_Modifications(punisher_tagsinfo.backup)


</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>17</ID>
                  <Description>"[𝐏𝐔𝐌𝐏] 𝐒𝐆-𝟖𝐒 𝐒𝐥𝐮𝐠𝐠𝐞𝐫"</Description>
                  <Color>FFFF82</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
    /*
    Game Name:     Helldivers 2
    Game Version:  1.001.203
    Author:        MEOWSISI || MIAUSISI
    Date:          2024-12-13
    Table Version: 3.0.0

    SG-8S Slugger
    ---------------

    EXCELS AT:
    - Heavy, slow enemies.
    - Close-quarters combat.
    - High damage output.

    MEDIOCRE AT:
    - Dealing with far-away enemies.
    - Crowds of fast enemies.

    CHANGELOG:
    - Adjusted damage to 1024||768.
    - Increased Armor Pen. values to 5||4||4||4.
    - Added stun effects.
    - Increased knockback and stagger values.

    COMMENTS FROM DEVELOPMENT:
    - The Slugger is the only primary weapon with anti-tank capabilities.

    */
}

{$lua}
-- //! ==========          You can adjust the values here:
slugger_damage.DATA.damage_std = 1024
slugger_damage.DATA.damage_drb = 786
Set_ArmorPenetration_Type(slugger_damage.DATA, slugger_tagsinfo.DATA, "LightAntiTank")
slugger_damage.DATA.momentum.knkback = 85
slugger_damage.DATA.momentum.stagger = 85
Set_DamageElement_Type(slugger_damage.DATA, "STUN")

slugger_projectile.DATA.calibre   = 66
slugger_projectile.DATA.mass      = 360
slugger_projectile.DATA.speed     = 2200
slugger_projectile.DATA.drag      = 0.00
slugger_projectile.DATA.life_time = 1.2
slugger_projectile.DATA.gravity_multiplier   = 1.4
slugger_projectile.DATA.penetration_slowdown = 0.0

slugger_weaponinfo.DATA.handling.sway_mlt = 0.26
slugger_weaponinfo.DATA.handling.scope_sway = 0.26
slugger_weaponinfo.DATA.handling.scope_responsiveness = 42
slugger_weaponinfo.DATA.handling.ergonomics = 76

slugger_rounds.DATA.primary.recoilx_mult   = 0.82
slugger_rounds.DATA.primary.recoily_mult   = 0.82


-- //! =======================================================
-- //!               DO NOT CHANGE the code below:
-- //! =======================================================
Apply_DamageSettings_Modifications(slugger_damage.DATA)
Apply_ProjectileInfo_Modifications(slugger_projectile.DATA)
Apply_WeaponInfo_Modifications(slugger_weaponinfo.DATA)
Apply_RoundsSettings_Modifications(slugger_rounds.DATA)
Apply_TagsInfo_Modifications(slugger_tagsinfo.DATA)

{$asm}
[DISABLE]
{$lua}

Apply_DamageSettings_Modifications(slugger_damage.backup)
Apply_ProjectileInfo_Modifications(slugger_projectile.backup)
Apply_WeaponInfo_Modifications(slugger_weaponinfo.backup)
Apply_RoundsSettings_Modifications(slugger_rounds.backup)
Apply_TagsInfo_Modifications(slugger_tagsinfo.backup)


</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>23</ID>
                  <Description>"[𝐏𝐔𝐌𝐏] 𝐒𝐆-𝟒𝟓𝟏 𝐂𝐨𝐨𝐤𝐨𝐮𝐭"</Description>
                  <Color>FFFF82</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.100
  Date   : 2024-09-28
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  TODO - Sorry, this is a quick hotfix, no time to write down something :c
}
{$lua}

cookout_damage.DATA.damage_std = 12
cookout_damage.DATA.damage_drb = 8
Set_ArmorPenetration_Type(cookout_damage.DATA, cookout_tagsinfo.DATA, "MediumArmorPen")
cookout_damage.DATA.momentum.knkback = 60
cookout_damage.DATA.momentum.stagger = 90
cookout_damage.DATA.stt_eff_2.target_type = 32
cookout_damage.DATA.stt_eff_2.target_time = 100

cookout_projectile.DATA.calibre = 40
cookout_projectile.DATA.mass    = 10
cookout_projectile.DATA.speed   = 2200
cookout_projectile.DATA.drag    = 0.1
cookout_projectile.DATA.life_time = 6.0
cookout_projectile.DATA.num_projectiles      = 32
cookout_projectile.DATA.penetration_slowdown = 0.16
cookout_projectile.DATA.gravity_multiplier   = 0.3

cookout_weaponinfo.DATA.spread.infox = 275
cookout_weaponinfo.DATA.spread.infoy = 275
cookout_weaponinfo.DATA.spread.multipx = 1.0
cookout_weaponinfo.DATA.spread.multipy = 1.0

cookout_rounds.DATA.primary.spreadx_mult   = 1.35
cookout_rounds.DATA.primary.spready_mult   = 1.35
cookout_rounds.DATA.secondary.spreadx_mult = 1.35
cookout_rounds.DATA.secondary.spready_mult = 1.35

Apply_DamageSettings_Modifications(cookout_damage.DATA)
Apply_ProjectileInfo_Modifications(cookout_projectile.DATA)
Apply_WeaponInfo_Modifications(cookout_weaponinfo.DATA)
Apply_RoundsSettings_Modifications(cookout_rounds.DATA)
Apply_TagsInfo_Modifications(cookout_tagsinfo.DATA)


{$asm}
[DISABLE]
{$lua}

Apply_DamageSettings_Modifications(cookout_damage.backup)
Apply_ProjectileInfo_Modifications(cookout_projectile.backup)
Apply_WeaponInfo_Modifications(cookout_weaponinfo.backup)
Apply_RoundsSettings_Modifications(cookout_rounds.backup)
Apply_TagsInfo_Modifications(cookout_tagsinfo.backup)


</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>58</ID>
                  <Description>"[𝐏𝐔𝐌𝐏] 𝐒𝐆-𝟐𝟎 𝐇𝐚𝐥𝐭"</Description>
                  <Options moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
                  <Color>FFFF82</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.100
  Date   : 2024-09-28
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  TODO - Sorry, this is a quick hotfix, no time to write down something :c
}
{$lua}
-- //! =============================================================
-- //! ================================= DAMAGE

-- //! =========== HALT: Armor Shredding Rounds
halt_shreddr_damage.DATA.damage_std = 17
halt_shreddr_damage.DATA.damage_drb = 14
halt_shreddr_damage.DATA.ap_vals.ap1 = 4
halt_shreddr_damage.DATA.ap_vals.ap2 = 3
halt_shreddr_damage.DATA.ap_vals.ap3 = 3
halt_shreddr_damage.DATA.ap_vals.ap4 = 2
halt_shreddr_damage.DATA.momentum.knkback = 55
halt_shreddr_damage.DATA.momentum.stagger = 55
Set_DamageElement_Type(halt_shreddr_damage.DATA, "SHREDDER")


-- //! =========== HALT: Staggering Rounds
halt_stagger_damage.DATA.damage_std = 12
halt_stagger_damage.DATA.damage_drb = 7
halt_stagger_damage.DATA.ap_vals.ap1 = 4
halt_stagger_damage.DATA.ap_vals.ap2 = 3
halt_stagger_damage.DATA.ap_vals.ap3 = 2
halt_stagger_damage.DATA.ap_vals.ap4 = 2
halt_stagger_damage.DATA.momentum.knkback = 55
halt_stagger_damage.DATA.momentum.stagger = 55
Set_DamageElement_Type(halt_stagger_damage.DATA, "STUN")



Apply_DamageSettings_Modifications(halt_shreddr_damage.DATA)
Apply_DamageSettings_Modifications(halt_stagger_damage.DATA)

-- //! =============================================================
-- //! ============================== PROJECTILES
registerSymbol("halt_prj_apen", ProjectileSettingsLocalizator(215))
registerSymbol("halt_prj_stun", ProjectileSettingsLocalizator(224))
{$asm}

halt_prj_apen + 018:
  dd (float)14
halt_prj_apen + 01C:
  dd #32
halt_prj_apen + 020:
  dd (float)2100
halt_prj_apen + 024:
  dd (float)12

halt_prj_stun + 018:
  dd (float)14
halt_prj_stun + 01C:
  dd #32
halt_prj_stun + 020:
  dd (float)3100
halt_prj_stun + 024:
  dd (float)12
[DISABLE]



halt_prj_apen + 018:
  dd (float)8
halt_prj_apen + 01C:
  dd #11
halt_prj_apen + 020:
  dd (float)385
halt_prj_apen + 024:
  dd (float)6

halt_prj_stun + 018:
  dd (float)5.5
halt_prj_stun + 01C:
  dd #20
halt_prj_stun + 020:
  dd (float)800
halt_prj_stun + 024:
  dd (float)4.5
unregisterSymbol(halt_prj_apen)
unregisterSymbol(halt_prj_stun)

{$lua}

Apply_DamageSettings_Modifications(halt_shreddr_damage.backup)
Apply_DamageSettings_Modifications(halt_stagger_damage.backup)



</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>355</ID>
                      <Description>"[EXPERIMENTAL] Description changes"</Description>
                      <Color>FFFF82</Color>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
{
    /*
    Game Name:     Helldivers 2
    Game Version:  1.001.203
    Author:        MEOWSISI || MIAUSISI
    Date:          2024-12-13
    Table Version: 3.0.0


    */
}
TextInit2 + 7B0E:
  db 'This shotgun is equipped with both an armor-shredding magazine, and stuns rounds. Excellent for supporting your allies.    '
[DISABLE]

TextInit2 + 7B0E:
  db 'A humane compliance weapon with two separate magazines: one for armor-penetrating flechette rounds and one for stun rounds.'

</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>18</ID>
                  <Description>"[𝐀𝐔𝐓𝐎] 𝐒𝐆-𝟐𝟐𝟓 𝐁𝐫𝐞𝐚𝐤𝐞𝐫"</Description>
                  <Color>FFB111</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.100
  Date   : 2024-09-28
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  TODO - Sorry, this is a quick hotfix, no time to write down something :c
}
{$lua}

breaker_damage.DATA.damage_std = 9
breaker_damage.DATA.damage_drb = 6
Set_ArmorPenetration_Type(breaker_damage.DATA, breaker_tagsinfo.DATA, "HeavyArmorPen")
breaker_damage.DATA.momentum.knkback = 5
breaker_damage.DATA.momentum.stagger = 5

breaker_projectile.DATA.calibre = 12
breaker_projectile.DATA.mass    = 2
breaker_projectile.DATA.speed   = 2000
breaker_projectile.DATA.drag    = 0.0
breaker_projectile.DATA.life_time = 0.08
breaker_projectile.DATA.num_projectiles      = 48
breaker_projectile.DATA.penetration_slowdown = 0.5
breaker_projectile.DATA.gravity_multiplier   = 0.0

breaker_weaponinfo.DATA.spread.infox = 395
breaker_weaponinfo.DATA.spread.infoy = 275
breaker_weaponinfo.DATA.spread.multipx = 1.0
breaker_weaponinfo.DATA.spread.multipy = 1.0
breaker_weaponinfo.DATA.spread.multipx = 1.0
breaker_weaponinfo.DATA.spread.multipy = 1.0
breaker_weaponinfo.DATA.multip.recoilx = 3.70
breaker_weaponinfo.DATA.recoil.randx   = 6.65
breaker_weaponinfo.DATA.multip.climbx  = 0.85

Apply_DamageSettings_Modifications(breaker_damage.DATA)
Apply_ProjectileInfo_Modifications(breaker_projectile.DATA)
Apply_WeaponInfo_Modifications(breaker_weaponinfo.DATA)
Apply_TagsInfo_Modifications(breaker_tagsinfo.DATA)


{$asm}
[DISABLE]
{$lua}


Apply_DamageSettings_Modifications(breaker_damage.backup)
Apply_ProjectileInfo_Modifications(breaker_projectile.backup)
Apply_WeaponInfo_Modifications(breaker_weaponinfo.backup)
Apply_TagsInfo_Modifications(breaker_tagsinfo.backup)


</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>19</ID>
                  <Description>"[𝐀𝐔𝐓𝐎] 𝐒𝐆-𝟐𝟐𝟓𝐈𝐄 𝐁𝐫𝐞𝐚𝐤𝐞𝐫 𝐈𝐧𝐜."</Description>
                  <Color>FFB111</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.100
  Date   : 2024-09-28
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  SG-225IE Breaker Incendiary
  ---------------------------


}
{$lua}

incbreaker_damage.DATA.damage_std = 3
incbreaker_damage.DATA.damage_drb = 3
Set_ArmorPenetration_Type(incbreaker_damage.DATA, incbreaker_tagsinfo, "HeavyArmorPen")
incbreaker_damage.DATA.momentum.knkback = 10
incbreaker_damage.DATA.momentum.stagger = 10
Set_DamageElement_Type(incbreaker_damage.DATA, "FIRE")

incbreaker_projectile.DATA.calibre = 12
incbreaker_projectile.DATA.mass    = 2
incbreaker_projectile.DATA.speed   = 2000
incbreaker_projectile.DATA.drag    = 0.0
incbreaker_projectile.DATA.life_time = 0.04
incbreaker_projectile.DATA.num_projectiles      = 48
incbreaker_projectile.DATA.penetration_slowdown = 0.5
incbreaker_projectile.DATA.gravity_multiplier   = 0.0



incbreaker_weaponinfo.DATA.spread.infox = 335
incbreaker_weaponinfo.DATA.spread.infoy = 125
incbreaker_weaponinfo.DATA.spread.multipx = 1.0
incbreaker_weaponinfo.DATA.spread.multipy = 1.0
incbreaker_weaponinfo.DATA.spread.multipx = 1.0
incbreaker_weaponinfo.DATA.spread.multipy = 1.0
incbreaker_weaponinfo.DATA.multip.recoilx = 3.70
incbreaker_weaponinfo.DATA.recoil.randx   = 8.65
incbreaker_weaponinfo.DATA.multip.climbx  = 0.45
incbreaker_weaponinfo.DATA.multip.driftx  = 0.25

incbreaker_magazine.DATA.magazine = 4
incbreaker_magazine.DATA.magazine_refill = 6
incbreaker_magazine.DATA.magazine_max = 6

Apply_DamageSettings_Modifications(incbreaker_damage.DATA)
Apply_ProjectileInfo_Modifications(incbreaker_projectile.DATA)
Apply_WeaponInfo_Modifications(incbreaker_weaponinfo.DATA)
Apply_MagazineSettings_Modifications(incbreaker_magazine.DATA)


{$asm}
[DISABLE]
{$lua}


Apply_DamageSettings_Modifications(incbreaker_damage.backup)
Apply_ProjectileInfo_Modifications(incbreaker_projectile.backup)
Apply_WeaponInfo_Modifications(incbreaker_weaponinfo.backup)
Apply_MagazineSettings_Modifications(incbreaker_magazine.backup)


</AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>258</ID>
              <Description>"【ＥＸＰＬＯＳＩＶＥＳ】"</Description>
              <Options moHideChildren="1" moManualExpandCollapse="1" moDeactivateChildrenAsWell="1"/>
              <Color>808000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{
    Game Name:     Helldivers 2
    Game Version:  1.001.203
    Author:        MEOWSISI || MIAUSISI
    Date:          2024-12-13
    Table Version: 3.0.0

    Explosive weapons
    -----------------

    This script initializes the data of the following weapons:

    GRENADES
    --------------------
    - G-6 Frag
    - G-12 HE

    WEAPONS
    ------------
    - Autocannon
    - Recoilless Rifle
}
{$lua}
-- //!         Please, DO!!! NOT!!! TOUCH!!! THIS!!! FILE!!!

-- //! ==============================================================
-- //! ===================    G R E N A D E S     ===================
-- //! ==============================================================


-- //! ==================== G-6 Frag =========================
g6frag_damage    = Read_DamageSettings_Data(229)
g6frag_explosive = Read_ExplosiveSettings_Data(47)

-- //! ================ G-12  HE ===================
g12HE_damage     = Read_DamageSettings_Data(245)
g12HE_explosive  = Read_ExplosiveSettings_Data(52)

-- //! ================ G-16  Impact =========================
g16HE_damage     = Read_DamageSettings_Data(246)
g16HE_explosive  = Read_ExplosiveSettings_Data(53)

-- //! =================== G-123 Thermite =======================
thermite_dps_damage       = Read_DamageSettings_Data(350)
thermite_explosion_damage = Read_DamageSettings_Data(233)
thermite_explosive        = Read_ExplosiveSettings_Data(51)


-- //! ==============================================================
-- //! ===================    W E A P O N S     ===================
-- //! ==============================================================

-- //! ======================================================
-- //!                         AUTOCANNON
-- //! ======================================================
autocannon_reload = Read_Reload_Data(12164217308285983839)
autocannon_prj_damage = Read_DamageSettings_Data(141)
autocannon_projectile = Read_ProjectileInfo_Data(19, 12164217308285983839)
autocannon_exp_damage = Read_DamageSettings_Data(249)
autocannon_explosive  = Read_ExplosiveSettings_Data(83)

-- //! ======================================================
-- //!                     RECOILLESS RIFLE
-- //! ======================================================
recoilless_rifle_reload = Read_Reload_Data(11493422068836852751)
recoilless_rifle_prj_damage = Read_DamageSettings_Data(151)
recoilless_rifle_projectile = Read_ProjectileInfo_Data(64, 11493422068836852751)
recoilless_rifle_exp_damage = Read_DamageSettings_Data(258)
recoilless_rifle_explosive  = Read_ExplosiveSettings_Data(77)

-- //! ======================================================
-- //!                     EXPENDABLE ANTI TANK
-- //! ======================================================
expendable_at_reload = Read_Reload_Data(11493422068836852751)
expendable_at_prj_damage = Read_DamageSettings_Data(150)
expendable_at_projectile = Read_ProjectileInfo_Data(60, 9264801226655597011)

-- //! ======================================================
-- //!                          COMMANDO
-- //! ======================================================
commando_proj_damage     = Read_DamageSettings_Data(160)
commando_proj_projectile = Read_ProjectileInfo_Data(80, 6453678319562593995)

-- //! ======================================================
-- //!                          RAILGUN
-- //! ======================================================

railgun_projectile  = Read_ProjectileInfo_Data(244, 3358853937828503136)
railgun_weaponinfo  = Read_WeaponInfo_Data(3358853937828503136)
railgun_custominfo  = Read_WeaponCustomization_Data(3358853937828503136)
railgun_customscope = Read_Railgun_CustomScope_Data()
-- //! ======================================================
-- //!                      GRENADE LAUNCHER
-- //! ======================================================
grenadelauncher_proj_damage = Read_DamageSettings_Data(14)
grenadelauncher_projectile  = Read_ProjectileInfo_Data(52, 211331680192206384)
grenadelauncher_exp_damage  = Read_DamageSettings_Data(253)
grenadelauncher_explosive   = Read_ExplosiveSettings_Data(68)

{$asm}
[DISABLE]

</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>117494</ID>
                  <Description>"[𝐆𝐑𝐄𝐍𝐀𝐃𝐄𝐒] 𝐆-𝟏𝟐 &amp;&amp; 𝐆-𝟏𝟔 𝐇𝐄 𝐆𝐫𝐞𝐧𝐚𝐝𝐞𝐬"</Description>
                  <Color>FFFF82</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.100
  Date   : 2024-09-28
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  TODO - Sorry, this is a quick hotfix, no time to write down something :c
}
{$lua}

g12HE_damage.DATA.damage_std  = 1400
g12HE_damage.DATA.damage_drb  = 1400
g12HE_damage.DATA.ap_vals.ap1 = 6
g12HE_damage.DATA.ap_vals.ap2 = 6
g12HE_damage.DATA.ap_vals.ap3 = 6
g12HE_damage.DATA.ap_vals.ap4 = 6
g12HE_damage.DATA.demolition  = 39
g12HE_damage.DATA.momentum.knkback = 55
g12HE_damage.DATA.momentum.stagger = 55

g16HE_damage.DATA.damage_std  = 1100
g16HE_damage.DATA.damage_drb  = 1100
g16HE_damage.DATA.ap_vals.ap1 = 6
g16HE_damage.DATA.ap_vals.ap2 = 6
g16HE_damage.DATA.ap_vals.ap3 = 6
g16HE_damage.DATA.ap_vals.ap4 = 6
g16HE_damage.DATA.demolition  = 39
g16HE_damage.DATA.momentum.knkback = 70
g16HE_damage.DATA.momentum.stagger = 70


g12HE_explosive.DATA.inner_radius   = 8
g12HE_explosive.DATA.outer_radius   = 8.5
g12HE_explosive.DATA.stagger_radius = 11

g16HE_explosive.DATA.inner_radius   = 9
g16HE_explosive.DATA.outer_radius   = 9.5
g16HE_explosive.DATA.stagger_radius = 11

-- Apply Modifications
Apply_DamageSettings_Modifications(g12HE_damage.DATA)
Apply_DamageSettings_Modifications(g16HE_damage.DATA)
Apply_ExplosiveSettings_Modifications(g12HE_explosive.DATA)
Apply_ExplosiveSettings_Modifications(g16HE_explosive.DATA)



{$asm}
[DISABLE]
{$lua}

Apply_DamageSettings_Modifications(g12HE_damage.backup)
Apply_DamageSettings_Modifications(g16HE_damage.backup)
Apply_ExplosiveSettings_Modifications(g12HE_explosive.backup)
Apply_ExplosiveSettings_Modifications(g16HE_explosive.backup)

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>145</ID>
                  <Description>"[𝐆𝐑𝐄𝐍𝐀𝐃𝐄𝐒] 𝐆-𝟏𝟐𝟑 𝐓𝐡𝐞𝐫𝐦𝐢𝐭𝐞"</Description>
                  <Color>FFFF82</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.203
  Date   : 2024-12-07
  Author : MIAUSISI

  G-123 Thermite
  --------------

  - Improved DPS
  - Improved AP.
  - Improved explosion properties.
}
{$lua}

-- Thermite DPS
thermite_dps_damage.DATA.damage_std  = 250
thermite_dps_damage.DATA.damage_drb  = 250
thermite_dps_damage.DATA.ap_vals.ap4 = 7
thermite_dps_damage.DATA.demolition  = 30


thermite_explosion_damage.DATA.damage_std  = 2200
thermite_explosion_damage.DATA.damage_drb  = 2200
thermite_explosion_damage.DATA.ap_vals.ap1 = 7
thermite_explosion_damage.DATA.ap_vals.ap2 = 7
thermite_explosion_damage.DATA.ap_vals.ap3 = 7
thermite_explosion_damage.DATA.ap_vals.ap4 = 7
thermite_explosion_damage.DATA.demolition  = 50
thermite_explosion_damage.DATA.momentum.knkback = 75
thermite_explosion_damage.DATA.momentum.stagger = 75

thermite_explosive.DATA.inner_radius   = 4.0
thermite_explosive.DATA.outer_radius   = 4.5
thermite_explosive.DATA.stagger_radius = 5.0

Apply_DamageSettings_Modifications(thermite_dps_damage.DATA)
Apply_DamageSettings_Modifications(thermite_explosion_damage.DATA)
Apply_ExplosiveSettings_Modifications(thermite_explosive.DATA)


{$asm}
[DISABLE]
{$lua}

Apply_DamageSettings_Modifications(thermite_dps_damage.backup)
Apply_DamageSettings_Modifications(thermite_explosion_damage.backup)
Apply_ExplosiveSettings_Modifications(thermite_explosive.backup)

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>117495</ID>
                  <Description>"[𝐆𝐑𝐄𝐍𝐀𝐃𝐄𝐒] 𝐆-𝟔 𝐅𝐫𝐚𝐠"</Description>
                  <Color>FFFF82</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.203
  Date   : 2024-09-28
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  TODO - Sorry, this is a quick hotfix, no time to write down something :c
}
{$lua}

g6frag_damage.DATA.damage_std  = 900
g6frag_damage.DATA.damage_drb  = 900
g6frag_damage.DATA.ap_vals.ap1 = 5
g6frag_damage.DATA.ap_vals.ap2 = 5
g6frag_damage.DATA.ap_vals.ap3 = 5
g6frag_damage.DATA.ap_vals.ap4 = 5
g6frag_damage.DATA.demolition  = 35
g6frag_damage.DATA.momentum.knkback = 85
g6frag_damage.DATA.momentum.stagger = 85

g6frag_explosive.DATA.inner_radius   = 8
g6frag_explosive.DATA.outer_radius   = 12
g6frag_explosive.DATA.stagger_radius = 14

Apply_DamageSettings_Modifications(g6frag_damage.DATA)
Apply_ExplosiveSettings_Modifications(g6frag_explosive.DATA)


{$asm}
[DISABLE]
{$lua}

Apply_DamageSettings_Modifications(g6frag_damage.backup)
Apply_ExplosiveSettings_Modifications(g6frag_explosive.backup)

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>179</ID>
                  <Description>"[𝐒𝐔𝐏𝐏𝐎𝐑𝐓] 𝐄𝐀𝐓-𝟏𝟕 𝐄𝐱𝐩𝐞𝐧𝐝𝐚𝐛𝐥𝐞 𝐀𝐧𝐭𝐢-𝐓𝐚𝐧𝐤"</Description>
                  <Color>E87400</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.203
  Date   : 2024-11-24
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  GR-8 Recoilless Rifle
  ------------

  PROJECTILE:
  - ProjectileType_Grenade_85mm_HEAT
  - DamageInfoType_Projectile_Grenade_85mm_HEAT
  EXPLOSION:
  - ExplosionType_Grenade_85mm_HEAT
  - DamageInfoType_Explosion_Projectile_Grenade_85mm_HEAT
}
{$lua}
-- // ===============   Projectile
expendable_at_prj_damage.DATA.damage_std  = 2300
expendable_at_prj_damage.DATA.damage_drb  = 2300
expendable_at_prj_damage.DATA.ap_vals.ap1 = 6
expendable_at_prj_damage.DATA.ap_vals.ap2 = 6
expendable_at_prj_damage.DATA.ap_vals.ap3 = 6
expendable_at_prj_damage.DATA.ap_vals.ap4 = 6
expendable_at_prj_damage.DATA.demolition  = 35
expendable_at_prj_damage.DATA.momentum.stagger  = 60
expendable_at_prj_damage.DATA.momentum.knkback  = 60

expendable_at_projectile.DATA.speed = 2350
expendable_at_projectile.DATA.drag = 0.0
expendable_at_projectile.DATA.gravity_multiplier = 1.0

Apply_DamageSettings_Modifications(expendable_at_prj_damage.DATA)
Apply_ProjectileInfo_Modifications(expendable_at_projectile.DATA)

{$asm}
[DISABLE]
{$lua}

Apply_DamageSettings_Modifications(expendable_at_prj_damage.backup)
Apply_ProjectileInfo_Modifications(expendable_at_projectile.backup)


</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>180</ID>
                  <Description>"[𝐒𝐔𝐏𝐏𝐎𝐑𝐓] 𝐀𝐂-𝟖 𝐀𝐮𝐭𝐨𝐜𝐚𝐧𝐧𝐨𝐧"</Description>
                  <Color>E87400</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.203
  Date   : 2024-12-07
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  AC-8 Autocannon
  ------------
  PROJECTILE:
  - ProjectileType_Cannon_20mm_APHET
  - DamageInfoType_Projectile_Cannon_20mm_APHET

  EXPLOSION:
  - ExplosionType_APHET_20mm
  - DamageInfoType_Explosion_Projectile_Cannon_20mm_APHET

}
{$lua}

-- //! ==============    Reload Speed
autocannon_reload.DATA.duration = 3.25

-- // ===============   Projectile
autocannon_prj_damage.DATA.damage_std  = 450
autocannon_prj_damage.DATA.damage_drb  = 450
autocannon_prj_damage.DATA.ap_vals.ap1 = 6
autocannon_prj_damage.DATA.ap_vals.ap2 = 6
autocannon_prj_damage.DATA.ap_vals.ap3 = 6
autocannon_prj_damage.DATA.ap_vals.ap4 = 6
autocannon_prj_damage.DATA.demolition  = 40
autocannon_prj_damage.DATA.momentum.stagger  = 60
autocannon_prj_damage.DATA.momentum.knkback  = 60

autocannon_projectile.DATA.calibre = 36
autocannon_projectile.DATA.speed = 1280
autocannon_projectile.DATA.drag = 0.0
autocannon_projectile.DATA.gravity_multiplier = 0.0


-- // ===============   Explosion
autocannon_exp_damage.DATA.damage_std  = 250
autocannon_exp_damage.DATA.damage_drb  = 250
autocannon_exp_damage.DATA.ap_vals.ap1 = 5
autocannon_exp_damage.DATA.ap_vals.ap2 = 5
autocannon_exp_damage.DATA.ap_vals.ap3 = 4
autocannon_exp_damage.DATA.ap_vals.ap4 = 4
autocannon_exp_damage.DATA.demolition  = 40
autocannon_exp_damage.DATA.momentum.stagger  = 70
autocannon_exp_damage.DATA.momentum.knkback  = 75

autocannon_explosive.DATA.inner_radius   = 4.5
autocannon_explosive.DATA.outer_radius   = 6.5
autocannon_explosive.DATA.stagger_radius = 10.0


Apply_DamageSettings_Modifications(autocannon_prj_damage.DATA)
Apply_ProjectileInfo_Modifications(autocannon_projectile.DATA)
Apply_ReloadSettings_Modifications(autocannon_reload.DATA)
Apply_DamageSettings_Modifications(autocannon_exp_damage.DATA)
Apply_ExplosiveSettings_Modifications(autocannon_explosive.DATA)

{$asm}
[DISABLE]
{$lua}


Apply_DamageSettings_Modifications(autocannon_prj_damage.backup)
Apply_ProjectileInfo_Modifications(autocannon_projectile.backup)
Apply_ReloadSettings_Modifications(autocannon_reload.backup)
Apply_DamageSettings_Modifications(autocannon_exp_damage.backup)
Apply_ExplosiveSettings_Modifications(autocannon_explosive.backup)


</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>336</ID>
                  <Description>"[𝐒𝐔𝐏𝐏𝐎𝐑𝐓] 𝐆𝐋-𝟐𝟏 𝐆. 𝐋𝐚𝐮𝐧𝐜𝐡𝐞𝐫"</Description>
                  <Color>E87400</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.203
  Date   : 2024-11-24
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  GR-8 Recoilless Rifle
  ------------

  PROJECTILE:
  - ProjectileType_Grenade_85mm_HEAT
  - DamageInfoType_Projectile_Grenade_85mm_HEAT
  EXPLOSION:
  - ExplosionType_Grenade_85mm_HEAT
  - DamageInfoType_Explosion_Projectile_Grenade_85mm_HEAT
}
{$lua}

-- // ===============   Projectile
grenadelauncher_proj_damage.DATA.damage_std  = 132
grenadelauncher_proj_damage.DATA.damage_drb  = 66
grenadelauncher_proj_damage.DATA.ap_vals.ap1 = 6
grenadelauncher_proj_damage.DATA.ap_vals.ap2 = 6
grenadelauncher_proj_damage.DATA.ap_vals.ap3 = 6
grenadelauncher_proj_damage.DATA.ap_vals.ap4 = 6
grenadelauncher_proj_damage.DATA.demolition  = 33
grenadelauncher_proj_damage.DATA.momentum.stagger  = 66
grenadelauncher_proj_damage.DATA.momentum.knkback  = 66

grenadelauncher_projectile.DATA.speed = 160
grenadelauncher_projectile.DATA.drag = 0.16


grenadelauncher_exp_damage.DATA.damage_std  = 666
grenadelauncher_exp_damage.DATA.damage_drb  = 333
grenadelauncher_exp_damage.DATA.ap_vals.ap1 = 6
grenadelauncher_exp_damage.DATA.ap_vals.ap2 = 6
grenadelauncher_exp_damage.DATA.ap_vals.ap3 = 6
grenadelauncher_exp_damage.DATA.ap_vals.ap4 = 6
grenadelauncher_exp_damage.DATA.demolition  = 55
grenadelauncher_exp_damage.DATA.momentum.stagger  = 96
grenadelauncher_exp_damage.DATA.momentum.knkback  = 96


grenadelauncher_explosive.DATA.inner_radius   = 5.5
grenadelauncher_explosive.DATA.outer_radius   = 8.5
grenadelauncher_explosive.DATA.stagger_radius = 9.0


Apply_DamageSettings_Modifications(grenadelauncher_proj_damage.DATA)
Apply_ProjectileInfo_Modifications(grenadelauncher_projectile.DATA)
Apply_DamageSettings_Modifications(grenadelauncher_exp_damage.DATA)
Apply_ExplosiveSettings_Modifications(grenadelauncher_explosive.DATA)


{$asm}
[DISABLE]
{$lua}


Apply_DamageSettings_Modifications(grenadelauncher_proj_damage.backup)
Apply_ProjectileInfo_Modifications(grenadelauncher_projectile.backup)
Apply_DamageSettings_Modifications(grenadelauncher_exp_damage.backup)
Apply_ExplosiveSettings_Modifications(grenadelauncher_explosive.backup)


</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>333</ID>
                  <Description>"[𝐒𝐔𝐏𝐏𝐎𝐑𝐓] 𝐆𝐑-𝟖 𝐑𝐞𝐜𝐨𝐢𝐥𝐥𝐞𝐬𝐬 𝐑𝐢𝐟𝐥𝐞"</Description>
                  <Color>E87400</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.203
  Date   : 2024-11-24
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  GR-8 Recoilless Rifle
  ------------

  PROJECTILE:
  - ProjectileType_Grenade_85mm_HEAT
  - DamageInfoType_Projectile_Grenade_85mm_HEAT
  EXPLOSION:
  - ExplosionType_Grenade_85mm_HEAT
  - DamageInfoType_Explosion_Projectile_Grenade_85mm_HEAT
}
{$lua}
-- //! ==============    Reload Speed
recoilless_rifle_reload.DATA.duration = 4.0

-- // ===============   Projectile
recoilless_rifle_prj_damage.DATA.damage_std  = 3850
recoilless_rifle_prj_damage.DATA.damage_drb  = 3850
recoilless_rifle_prj_damage.DATA.ap_vals.ap1 = 6
recoilless_rifle_prj_damage.DATA.ap_vals.ap2 = 6
recoilless_rifle_prj_damage.DATA.ap_vals.ap3 = 6
recoilless_rifle_prj_damage.DATA.ap_vals.ap4 = 6
recoilless_rifle_prj_damage.DATA.demolition  = 40
recoilless_rifle_prj_damage.DATA.momentum.stagger  = 60
recoilless_rifle_prj_damage.DATA.momentum.knkback  = 60

recoilless_rifle_projectile.DATA.speed = 950
recoilless_rifle_projectile.DATA.drag = 0.0
recoilless_rifle_projectile.DATA.gravity_multiplier = 0.0


-- // ===============   Explosion
recoilless_rifle_exp_damage.DATA.damage_std  = 1300
recoilless_rifle_exp_damage.DATA.damage_drb  = 1300
recoilless_rifle_exp_damage.DATA.ap_vals.ap1 = 6
recoilless_rifle_exp_damage.DATA.ap_vals.ap2 = 5
recoilless_rifle_exp_damage.DATA.ap_vals.ap3 = 5
recoilless_rifle_exp_damage.DATA.ap_vals.ap4 = 5
recoilless_rifle_exp_damage.DATA.demolition  = 40
recoilless_rifle_exp_damage.DATA.momentum.stagger  = 70
recoilless_rifle_exp_damage.DATA.momentum.knkback  = 75

recoilless_rifle_explosive.DATA.inner_radius   = 4.5
recoilless_rifle_explosive.DATA.outer_radius   = 6.0
recoilless_rifle_explosive.DATA.stagger_radius = 9.0


Apply_DamageSettings_Modifications(recoilless_rifle_prj_damage.DATA)
Apply_ProjectileInfo_Modifications(recoilless_rifle_projectile.DATA)
Apply_ReloadSettings_Modifications(recoilless_rifle_reload.DATA)
Apply_DamageSettings_Modifications(recoilless_rifle_exp_damage.DATA)
Apply_ExplosiveSettings_Modifications(recoilless_rifle_explosive.DATA)

{$asm}
[DISABLE]
{$lua}

Apply_DamageSettings_Modifications(recoilless_rifle_prj_damage.backup)
Apply_ProjectileInfo_Modifications(recoilless_rifle_projectile.backup)
Apply_ReloadSettings_Modifications(recoilless_rifle_reload.backup)
Apply_DamageSettings_Modifications(recoilless_rifle_exp_damage.backup)
Apply_ExplosiveSettings_Modifications(recoilless_rifle_explosive.backup)

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>334</ID>
                  <Description>"[𝐒𝐔𝐏𝐏𝐎𝐑𝐓] 𝐌𝐋𝐒-𝟒𝐗 𝐂𝐨𝐦𝐦𝐚𝐧𝐝𝐨"</Description>
                  <Color>E87400</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.203
  Date   : 2024-11-24
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  GR-8 Recoilless Rifle
  ------------

  PROJECTILE:
  - ProjectileType_Grenade_85mm_HEAT
  - DamageInfoType_Projectile_Grenade_85mm_HEAT
  EXPLOSION:
  - ExplosionType_Grenade_85mm_HEAT
  - DamageInfoType_Explosion_Projectile_Grenade_85mm_HEAT
}
{$lua}
-- // ===============   Projectile
commando_proj_damage.DATA.damage_std  = 400
commando_proj_damage.DATA.damage_drb  = 400
commando_proj_damage.DATA.ap_vals.ap1 = 6
commando_proj_damage.DATA.ap_vals.ap2 = 6
commando_proj_damage.DATA.ap_vals.ap3 = 6
commando_proj_damage.DATA.ap_vals.ap4 = 6
commando_proj_damage.DATA.demolition  = 35
commando_proj_damage.DATA.momentum.stagger  = 60
commando_proj_damage.DATA.momentum.knkback  = 60

commando_proj_projectile.DATA.speed = 2350
commando_proj_projectile.DATA.drag = 0.0
commando_proj_projectile.DATA.gravity_multiplier = 1.0
commando_proj_projectile.DATA.explosion_type_on_impact = 43


Apply_DamageSettings_Modifications(commando_proj_damage.DATA)
Apply_ProjectileInfo_Modifications(commando_proj_projectile.DATA)

{$asm}
[DISABLE]
{$lua}

Apply_DamageSettings_Modifications(commando_proj_damage.backup)
Apply_ProjectileInfo_Modifications(commando_proj_projectile.backup)


</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>335</ID>
                  <Description>"[𝐒𝐔𝐏𝐏𝐎𝐑𝐓] 𝐑𝐒-𝟒𝟐𝟐 𝐑𝐚𝐢𝐥𝐠𝐮𝐧"</Description>
                  <Color>E87400</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.203
  Date   : 2024-11-24
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  RS-422 RAILGUN
  --------------
}
{$lua}
-- // ===============   Projectile
railgun_projectile.DATA.speed = 2550
railgun_projectile.DATA.drag = 0.0
railgun_projectile.DATA.gravity_multiplier = 0.0
railgun_projectile.DATA.damage_info_type = 137
railgun_projectile.DATA.explosion_type_on_impact = 54

railgun_weaponinfo.DATA.scope.aimzoomx = 1
railgun_weaponinfo.DATA.scope.aimzoomy = 1
railgun_weaponinfo.DATA.scope.aimzoomz = 1
railgun_weaponinfo.DATA.scope.zeroingx = 50
railgun_weaponinfo.DATA.scope.zeroingy = 100
railgun_weaponinfo.DATA.scope.zeroingz = 150
railgun_weaponinfo.DATA.handling.sway_mlt = 0
railgun_weaponinfo.DATA.handling.scope_sway = 0

railgun_customscope.DATA.scope_offsetx = 0
railgun_customscope.DATA.scope_offsety = 0
railgun_customscope.DATA.scope_offsetz = 0
railgun_customscope.DATA.aim_zoomx = 1
railgun_customscope.DATA.aim_zoomy = 2
railgun_customscope.DATA.aim_zoomz = 4

Apply_ProjectileInfo_Modifications(railgun_projectile.DATA)
Apply_WeaponInfo_Modifications(railgun_weaponinfo.DATA)
Apply_Railgun_CustomScope_Modifications(railgun_customscope.DATA)

{$asm}
[DISABLE]
{$lua}


Apply_ProjectileInfo_Modifications(railgun_projectile.backup)
Apply_WeaponInfo_Modifications(railgun_weaponinfo.backup)
Apply_Railgun_CustomScope_Modifications(railgun_customscope.backup)


</AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>266</ID>
              <Description>"【﻿ＬＡＳＥＲ　ＷＥＡＰＯＮＳ】"</Description>
              <Options moHideChildren="1" moManualExpandCollapse="1" moDeactivateChildrenAsWell="1"/>
              <Color>808000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{
    Game Name:     Helldivers 2
    Game Version:  1.001.203
    Author:        MEOWSISI || MIAUSISI
    Date:          2024-12-13
    Table Version: 3.0.0

    Laser Weapons
    --------------

}
{$lua}
-- //!         Please, DO!!! NOT!!! TOUCH!!! THIS!!! FILE!!!

-- //! ==============================================================
-- //! ===================    S I D E A R M     ===================
-- //! ==============================================================

-- //! ==================== LAS-7 Dagger
dagger_damage = Read_DamageSettings_Data(336)

-- //! ==============================================================
-- //! ===================    P R I M A R Y     ===================
-- //! ==============================================================

-- //! ====================     LAS-5 Scythe
scythe_damage = Read_DamageSettings_Data(337)

-- //! ====================     LAS-16 Sickle
sickle_damage = Read_DamageSettings_Data(24)
sickle_heat   = Read_HeatSettings_Data(9675404802175538082)
sickle_projectile = Read_ProjectileInfo_Data(246, 9675404802175538082)
-- //! ==============================================================
-- //! ===================    S U P P O R T     ===================
-- //! ==============================================================

-- //! ====================     LAS-98 Laser Cannon
lasercannon_damage = Read_DamageSettings_Data(342)
lasercannon_beam   = Read_BeamSettings_Data(6)

-- //! ====================     LAS-99 Quasar Cannon
quasar_proj_damage = Read_DamageSettings_Data(260)
quasar_expl_damage = Read_DamageSettings_Data(261)
quasar_explosion   = Read_ExplosiveSettings_Data(84)
quasar_heat_info   = Read_HeatSettings_Data(3865797767236207742)


{$asm}
[DISABLE]

</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>117496</ID>
                  <Description>"[𝐒𝐈𝐃𝐄𝐀𝐑𝐌] 𝐋𝐀𝐒-𝟕 𝐃𝐚𝐠𝐠𝐞𝐫"</Description>
                  <Color>FFFF82</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
/*
    Game Name:     Helldivers 2
    Game Version:  1.001.203
    Author:        MEOWSISI || MIAUSISI
    Date:          2024-12-13
    Table Version: 3.0.0

    LAS-98 Laser Cannon
    ------------
*/
}
{$lua}

dagger_damage.DATA.damage_std  = 404
dagger_damage.DATA.damage_drb  = 403
dagger_damage.DATA.ap_vals.ap1 = 4
dagger_damage.DATA.ap_vals.ap2 = 3
dagger_damage.DATA.ap_vals.ap3 = 3
dagger_damage.DATA.ap_vals.ap4 = 3
dagger_damage.DATA.demolition  = 5
dagger_damage.DATA.momentum.knkback = 5
dagger_damage.DATA.momentum.stagger = 5
Set_DamageElement_Type(dagger_damage.DATA, "FIRE")

Apply_DamageSettings_Modifications(dagger_damage.DATA)


{$asm}
[DISABLE]
{$lua}

Apply_DamageSettings_Modifications(dagger_damage.backup)

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>36</ID>
                  <Description>"[𝐏𝐑𝐈𝐌𝐀𝐑𝐘] 𝐋𝐀𝐒-𝟓 𝐒𝐜𝐲𝐭𝐡𝐞"</Description>
                  <Color>FFB111</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
/*
    Game Name:     Helldivers 2
    Game Version:  1.001.203
    Author:        MEOWSISI || MIAUSISI
    Date:          2024-12-13
    Table Version: 3.0.0

    LAS-5 Scythe
    ------------
*/
}
{$lua}

scythe_damage.DATA.damage_std  = 404
scythe_damage.DATA.damage_drb  = 404
scythe_damage.DATA.ap_vals.ap1 = 7
scythe_damage.DATA.ap_vals.ap2 = 7
scythe_damage.DATA.ap_vals.ap3 = 7
scythe_damage.DATA.ap_vals.ap4 = 7
scythe_damage.DATA.demolition  = 5
scythe_damage.DATA.momentum.knkback = 5
scythe_damage.DATA.momentum.stagger = 5
Set_DamageElement_Type(scythe_damage.DATA, "FIRE")

Apply_DamageSettings_Modifications(scythe_damage.DATA)


{$asm}
[DISABLE]
{$lua}

Apply_DamageSettings_Modifications(scythe_damage.backup)

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>35</ID>
                  <Description>"[𝐏𝐑𝐈𝐌𝐀𝐑𝐘] 𝐋𝐀𝐒-𝟏𝟔 𝐒𝐢𝐜𝐤𝐥𝐞"</Description>
                  <Color>FFB111</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
/*
    Game Name:     Helldivers 2
    Game Version:  1.001.203
    Author:        MEOWSISI || MIAUSISI
    Date:          2024-12-13
    Table Version: 3.0.0

    LAS-16 Sickle
    ------------
*/
}
{$lua}

sickle_damage.DATA.damage_std  = 600
sickle_damage.DATA.damage_drb  = 600
sickle_damage.DATA.ap_vals.ap1 = 400
sickle_damage.DATA.ap_vals.ap2 = 400
sickle_damage.DATA.ap_vals.ap3 = 400
sickle_damage.DATA.ap_vals.ap4 = 400
sickle_damage.DATA.demolition  = 5
sickle_damage.DATA.momentum.knkback = 5
sickle_damage.DATA.momentum.stagger = 5
Set_DamageElement_Type(sickle_damage.DATA, "FIRE")


sickle_projectile.DATA.rpm.y = 950

sickle_heat.DATA.temp_loss_per_second = 90.76
sickle_heat.DATA.temp_loss_modifier_extreme_heat = 99.9
sickle_heat.DATA.temp_loss_modifier_extreme_cold = 29.5
sickle_heat.DATA.temp_loss_per_second_overheated = 9000000.76
sickle_heat.DATA.charge_gain_per_second = 1000000.1
sickle_heat.DATA.charge_loss_per_second = 10000000.1

Apply_DamageSettings_Modifications(sickle_damage.DATA)
Apply_ProjectileInfo_Modifications(sickle_projectile.DATA)
Apply_HeatSettings_Modifications(sickle_heat.DATA)


{$asm}

[DISABLE]
{$lua}

Apply_DamageSettings_Modifications(sickle_damage.backup)
Apply_ProjectileInfo_Modifications(sickle_projectile.backup)
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>117497</ID>
                  <Description>"[𝐒𝐔𝐏𝐏𝐎𝐑𝐓] 𝐋𝐀𝐒-𝟗𝟖 𝐋𝐚𝐬𝐞𝐫 𝐂𝐚𝐧𝐧𝐨𝐧"</Description>
                  <Color>E87400</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
/*
    Game Name:     Helldivers 2
    Game Version:  1.001.203
    Author:        MEOWSISI || MIAUSISI
    Date:          2024-12-13
    Table Version: 3.0.0

    LAS-98 Laser Cannon
    ------------
*/
}
{$lua}

lasercannon_damage.DATA.damage_std  = 550
lasercannon_damage.DATA.damage_drb  = 550
lasercannon_damage.DATA.ap_vals.ap1 = 7
lasercannon_damage.DATA.ap_vals.ap2 = 7
lasercannon_damage.DATA.ap_vals.ap3 = 7
lasercannon_damage.DATA.ap_vals.ap4 = 7
lasercannon_damage.DATA.demolition  = 35
lasercannon_damage.DATA.momentum.knkback = 5
lasercannon_damage.DATA.momentum.stagger = 5
Set_DamageElement_Type(lasercannon_damage.DATA, "FIRE")

lasercannon_beam.DATA.length  = 1000

Apply_DamageSettings_Modifications(lasercannon_damage.DATA)
Apply_BeamSettings_Modifications(lasercannon_beam.DATA)


{$asm}

[DISABLE]
{$lua}

Apply_DamageSettings_Modifications(lasercannon_damage.backup)
Apply_BeamSettings_Modifications(lasercannon_beam.backup)

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>117498</ID>
                  <Description>"[𝐒𝐔𝐏𝐏𝐎𝐑𝐓] 𝐋𝐀𝐒-𝟗𝟗 𝐐𝐮𝐚𝐬𝐚𝐫 𝐂𝐚𝐧𝐧𝐨𝐧"</Description>
                  <Color>E87400</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
/*
    Game Name:     Helldivers 2
    Game Version:  1.001.203
    Author:        MEOWSISI || MIAUSISI
    Date:          2024-12-13
    Table Version: 3.0.0

    LAS-99 Quasar Cannon
    --------------------
*/
}
{$lua}

quasar_proj_damage.DATA.damage_std  = 1750
quasar_proj_damage.DATA.damage_drb  = 1750
quasar_proj_damage.DATA.ap_vals.ap1 = 6
quasar_proj_damage.DATA.ap_vals.ap2 = 6
quasar_proj_damage.DATA.ap_vals.ap3 = 6
quasar_proj_damage.DATA.ap_vals.ap4 = 6
quasar_proj_damage.DATA.demolition  = 45
quasar_proj_damage.DATA.momentum.knkback = 35
quasar_proj_damage.DATA.momentum.stagger = 35
Set_DamageElement_Type(quasar_proj_damage.DATA, "FIRE")

quasar_expl_damage.DATA.damage_std  = 1750
quasar_expl_damage.DATA.damage_drb  = 1750
quasar_expl_damage.DATA.ap_vals.ap1 = 6
quasar_expl_damage.DATA.ap_vals.ap2 = 6
quasar_expl_damage.DATA.ap_vals.ap3 = 6
quasar_expl_damage.DATA.ap_vals.ap4 = 6
quasar_expl_damage.DATA.demolition  = 35
quasar_expl_damage.DATA.momentum.knkback = 95
quasar_expl_damage.DATA.momentum.stagger = 95
quasar_expl_damage.DATA.elem_type = 1
quasar_expl_damage.DATA.stt_eff_1.target_type = 6
quasar_expl_damage.DATA.stt_eff_1.target_time = 100.0
quasar_expl_damage.DATA.stt_eff_2.target_type = 32
quasar_expl_damage.DATA.stt_eff_2.target_time = 100.0
quasar_expl_damage.DATA.stt_eff_3.target_type = 54
quasar_expl_damage.DATA.stt_eff_3.target_time = 100.0

quasar_explosion.DATA.inner_radius   = 10
quasar_explosion.DATA.outer_radius   = 14
quasar_explosion.DATA.stagger_radius = 16

quasar_heat_info.DATA.temp_loss_per_second = 9.76
quasar_heat_info.DATA.temp_loss_modifier_extreme_heat = 0.9
quasar_heat_info.DATA.temp_loss_modifier_extreme_cold = 2.5
quasar_heat_info.DATA.temp_loss_per_second_overheated = 9.76
quasar_heat_info.DATA.charge_gain_per_second = 45
quasar_heat_info.DATA.charge_loss_per_second = 80


Apply_HeatSettings_Modifications(quasar_heat_info.DATA)
Apply_DamageSettings_Modifications(quasar_proj_damage.DATA)
Apply_DamageSettings_Modifications(quasar_expl_damage.DATA)
Apply_ExplosiveSettings_Modifications(quasar_explosion.DATA)


{$asm}
[DISABLE]
{$lua}


Apply_HeatSettings_Modifications(quasar_heat_info.backup)
Apply_DamageSettings_Modifications(quasar_proj_damage.backup)
Apply_DamageSettings_Modifications(quasar_expl_damage.backup)
Apply_ExplosiveSettings_Modifications(quasar_explosion.backup)

</AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>268</ID>
              <Description>"【﻿ＳＮＩＰＥＲＳ　＆＆　ＰＩＳＴＯＬＳ】"</Description>
              <Options moHideChildren="1" moManualExpandCollapse="1" moDeactivateChildrenAsWell="1"/>
              <Color>808000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{
    Game Name:     Helldivers 2
    Game Version:  1.001.203
    Author:        MEOWSISI || MIAUSISI
    Date:          2024-12-13
    Table Version: 3.0.0

    Laser Weapons
    --------------

}
{$lua}
-- //!         Please, DO!!! NOT!!! TOUCH!!! THIS!!! FILE!!!

-- //! ==============================================================
-- //! ===================     P I S T O L S      ===================
-- //! ==============================================================
-- //! ======================   P-2 Peacemaker || UID: 424716889947522210
defaultpistol_damage     = Read_DamageSettings_Data(35)
defaultpistol_weaponinfo = Read_WeaponInfo_Data(424716889947522210)


-- //! ======================   P-113 Verdict || UID: 1892480894983787169
verdict_damage = Read_DamageSettings_Data(50)


-- //! ======================   P-19 Redeemer || UID: 3852172782311805734
redeemer_damage = Read_DamageSettings_Data(33)


-- //! ======================   P-4 Senator || UID: 10177381595962512386
senator_damage = Read_DamageSettings_Data(53)
senator_reload = Read_Reload_Data(10177381595962512386)
senator_rounds = Read_Rounds_Data(10177381595962512386)

-- //! ==============================================================
-- //! ===================    S N I P E R S     ===================
-- //! ==============================================================

-- //! ==================== R-2124 Constitution
constitution_damage   = Read_DamageSettings_Data(82)
bayonet_damage        = Read_DamageSettings_Data(370)
constitution_projectile = Read_ProjectileInfo_Data(174, 8896268509512551590)
constitution_reload     = Read_Reload_Data(8896268509512551590)
constitution_rounds     = Read_Rounds_Data(8896268509512551590)
constitution_weaponinfo = Read_WeaponInfo_Data(8896268509512551590)
constitution_custominfo = Read_WeaponCustomization_Data(8896268509512551590)


-- //! ======================= R63CS Diligence CS
diligencecs_damage     = Read_DamageSettings_Data(85)
diligencecs_projectile = Read_ProjectileInfo_Data(177, 5510267968365085927)
diligencecs_weaponinfo = Read_WeaponInfo_Data(5510267968365085927)

-- //! ==================== AWP - Anti-Materiel Rifle
awp_damage     = Read_DamageSettings_Data(136)
awp_projectile = Read_ProjectileInfo_Data(183, 9927421484392399367)
awp_weaponinfo = Read_WeaponInfo_Data(9927421484392399367)



{$asm}
[DISABLE]

</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>343</ID>
                  <Description>"[𝐒𝐈𝐃𝐄𝐀𝐑𝐌] 𝐏-𝟒 𝐒𝐞𝐧𝐚𝐭𝐨𝐫"</Description>
                  <Color>FFFF82</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
/*
    Game Name:     Helldivers 2
    Game Version:  1.002.002
    Author:        MEOWSISI || MIAUSISI
    Date:          2024-12-38
    Table Version: 3.0.2

    LAS-98 Laser Cannon
    ------------
*/
}
{$lua}

senator_damage.DATA.damage_std  = 300
senator_damage.DATA.damage_drb  = 150
senator_damage.DATA.ap_vals.ap1 = 5
senator_damage.DATA.ap_vals.ap2 = 5
senator_damage.DATA.ap_vals.ap3 = 4
senator_damage.DATA.ap_vals.ap4 = 4

senator_reload.duration = 1.0
senator_rounds.reload_amount = 2


Apply_DamageSettings_Modifications(senator_damage.DATA)
Apply_ReloadSettings_Modifications(senator_reload.DATA)
Apply_RoundsSettings_Modifications(senator_rounds.DATA)


{$asm}
[DISABLE]
{$lua}

Apply_DamageSettings_Modifications(senator_damage.backup)
Apply_ReloadSettings_Modifications(senator_reload.backup)
Apply_RoundsSettings_Modifications(senator_rounds.backup)

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>344</ID>
                  <Description>"[𝐒𝐈𝐃𝐄𝐀𝐑𝐌] 𝐏-𝟏𝟏𝟑 𝐕𝐞𝐫𝐝𝐢𝐜𝐭"</Description>
                  <Color>FFFF82</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
/*
    Game Name:     Helldivers 2
    Game Version:  1.001.203
    Author:        MEOWSISI || MIAUSISI
    Date:          2024-12-13
    Table Version: 3.0.0

    P-113 Verdict
    ------------
*/
}
{$lua}

verdict_damage.DATA.damage_std  = 125
verdict_damage.DATA.damage_drb  = 75
verdict_damage.DATA.ap_vals.ap1 = 4
verdict_damage.DATA.ap_vals.ap2 = 4
verdict_damage.DATA.ap_vals.ap3 = 3
verdict_damage.DATA.ap_vals.ap4 = 3
verdict_damage.DATA.momentum.stagger = 45
verdict_damage.DATA.momentum.knkback = 45
verdict_damage.DATA.stt_eff_1.target_type = 15
verdict_damage.DATA.stt_eff_1.target_time = 100.0
verdict_damage.DATA.stt_eff_2.target_type = 54
verdict_damage.DATA.stt_eff_2.target_time = 100.0

Apply_DamageSettings_Modifications(verdict_damage.DATA)


{$asm}

[DISABLE]
{$lua}

Apply_DamageSettings_Modifications(verdict_damage.backup)

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>342</ID>
                  <Description>"[𝐒𝐈𝐃𝐄𝐀𝐑𝐌] 𝐏-𝟏𝟗 𝐑𝐞𝐝𝐞𝐞𝐦𝐞𝐫"</Description>
                  <Color>FFFF82</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
/*
    Game Name:     Helldivers 2
    Game Version:  1.002.003
    Author:        MEOWSISI || MIAUSISI
    Date:          2024-12-28
    Table Version: 3.0.0

    P-19 Redeemer
    -------------
*/
}
{$lua}

redeemer_damage.DATA.damage_std  = 84
redeemer_damage.DATA.damage_drb  = 48
redeemer_damage.DATA.ap_vals.ap1 = 3
redeemer_damage.DATA.ap_vals.ap2 = 3
redeemer_damage.DATA.ap_vals.ap3 = 3
redeemer_damage.DATA.ap_vals.ap4 = 2
redeemer_damage.DATA.momentum.stagger = 20
redeemer_damage.DATA.momentum.knkback = 20

Apply_DamageSettings_Modifications(redeemer_damage.DATA)


{$asm}

[DISABLE]
{$lua}

Apply_DamageSettings_Modifications(redeemer_damage.backup)

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>341</ID>
                  <Description>"[𝐒𝐈𝐃𝐄𝐀𝐑𝐌] 𝐏-𝟐 𝐏𝐞𝐚𝐜𝐞𝐦𝐚𝐤𝐞𝐫"</Description>
                  <Color>FFFF82</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
/*
    Game Name:     Helldivers 2
    Game Version:  1.001.203
    Author:        MEOWSISI || MIAUSISI
    Date:          2024-12-13
    Table Version: 3.0.0

    LAS-98 Laser Cannon
    ------------
*/
}
{$lua}

defaultpistol_damage.DATA.damage_std  = 77
defaultpistol_damage.DATA.damage_drb  = 44
defaultpistol_damage.DATA.ap_vals.ap1 = 3
defaultpistol_damage.DATA.ap_vals.ap2 = 3
defaultpistol_damage.DATA.ap_vals.ap3 = 3
defaultpistol_damage.DATA.ap_vals.ap4 = 3


defaultpistol_weaponinfo.DATA.spread.infox = 0
defaultpistol_weaponinfo.DATA.spread.infoy = 0
defaultpistol_weaponinfo.DATA.scope.sway_mlt = 0
defaultpistol_weaponinfo.DATA.scope.scope_sway = 0
defaultpistol_weaponinfo.DATA.scope.scope_responsiveness = 100
defaultpistol_weaponinfo.DATA.scope.ergonomics = 100
defaultpistol_weaponinfo.DATA.suppresed.is_suppressed  = 1
defaultpistol_weaponinfo.DATA.suppresed.noise_template = 0
defaultpistol_weaponinfo.DATA.suppresed.visibility     = 0.0
defaultpistol_weaponinfo.DATA.suppresed.weapon_scream  = 0

Apply_WeaponInfo_Modifications(defaultpistol_weaponinfo.DATA)
Apply_DamageSettings_Modifications(defaultpistol_damage.DATA)


{$asm}

[DISABLE]
{$lua}

Apply_WeaponInfo_Modifications(defaultpistol_weaponinfo.backup)
Apply_DamageSettings_Modifications(defaultpistol_damage.backup)

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>71</ID>
                  <Description>"[𝐏𝐑𝐈𝐌𝐀𝐑𝐘] 𝐑-𝟐𝟏𝟐𝟒 𝐂𝐨𝐧𝐬𝐭𝐢𝐭𝐮𝐭𝐢𝐨𝐧"</Description>
                  <Color>FFB111</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
/*
    Game Name:     Helldivers 2
    Game Version:  1.001.203
    Author:        MEOWSISI || MIAUSISI
    Date:          2024-12-13
    Table Version: 3.0.0

    R-1214 Constitution
    ------------
*/
}
{$lua}

constitution_damage.DATA.damage_std  = 400
constitution_damage.DATA.damage_drb  = 400
constitution_damage.DATA.ap_vals.ap1 = 4
constitution_damage.DATA.ap_vals.ap2 = 4
constitution_damage.DATA.ap_vals.ap3 = 4
constitution_damage.DATA.ap_vals.ap4 = 4
constitution_damage.DATA.demolition  = 15
constitution_damage.DATA.momentum.knkback = 90
constitution_damage.DATA.momentum.stagger = 90

bayonet_damage.DATA.damage_std  = 350
bayonet_damage.DATA.damage_drb  = 350
bayonet_damage.DATA.ap_vals.ap1 = 4
bayonet_damage.DATA.ap_vals.ap2 = 4
bayonet_damage.DATA.ap_vals.ap3 = 4
bayonet_damage.DATA.ap_vals.ap4 = 4
bayonet_damage.DATA.demolition  = 5
bayonet_damage.DATA.momentum.knkback = 10
bayonet_damage.DATA.momentum.stagger = 10
bayonet_damage.DATA.stt_eff_1.target_type = 2
bayonet_damage.DATA.stt_eff_1.target_time = 100.0

constitution_projectile.DATA.speed   = 2500
constitution_projectile.DATA.drag    = 0.0
constitution_projectile.DATA.penetration_slowdown = 0.5
constitution_projectile.DATA.gravity_multiplier   = 0.0

constitution_reload.DATA.duration = 1.5
constitution_rounds.DATA.reload_amount = 2
constitution_rounds.DATA.mag_size.x = 6

constitution_weaponinfo.DATA.recoil.x = 0
constitution_weaponinfo.DATA.recoil.y = 0
constitution_weaponinfo.DATA.climb.x = 0
constitution_weaponinfo.DATA.climb.y = 0
constitution_weaponinfo.DATA.multip.recoilx = 0
constitution_weaponinfo.DATA.multip.recoily = 0
constitution_weaponinfo.DATA.multip.driftx = 0
constitution_weaponinfo.DATA.multip.drifty = 0
constitution_weaponinfo.DATA.multip.climbx = 0
constitution_weaponinfo.DATA.multip.climby = 0
constitution_weaponinfo.DATA.spread.infox = 0
constitution_weaponinfo.DATA.spread.infoy = 0
constitution_weaponinfo.DATA.handling.sway_mlt = 0
constitution_weaponinfo.DATA.handling.scope_sway = 0
constitution_weaponinfo.DATA.handling.scope_responsiveness = 100
constitution_weaponinfo.DATA.handling.ergonomics = 100
constitution_weaponinfo.DATA.suppresed.is_suppressed  = 1
constitution_weaponinfo.DATA.suppresed.noise_template = 0
constitution_weaponinfo.DATA.suppresed.visibility     = 0.0
constitution_weaponinfo.DATA.suppresed.weapon_scream  = 0
constitution_weaponinfo.DATA.scope.aimzoomx = 3
constitution_weaponinfo.DATA.scope.aimzoomy = 4
constitution_weaponinfo.DATA.scope.aimzoomz = 5.16
constitution_weaponinfo.DATA.scope.zeroingx = 75
constitution_weaponinfo.DATA.scope.zeroingy = 100
constitution_weaponinfo.DATA.scope.zeroingz = 125

Apply_DamageSettings_Modifications(constitution_damage.DATA)
Apply_DamageSettings_Modifications(bayonet_damage.DATA)
Apply_ProjectileInfo_Modifications(constitution_projectile.DATA)
Apply_ReloadSettings_Modifications(constitution_reload.DATA)
Apply_RoundsSettings_Modifications(constitution_rounds.DATA)
Apply_WeaponInfo_Modifications(constitution_weaponinfo.DATA)

{$asm}
[DISABLE]
{$lua}

Apply_DamageSettings_Modifications(constitution_damage.backup)
Apply_DamageSettings_Modifications(bayonet_damage.backup)
Apply_ProjectileInfo_Modifications(constitution_projectile.backup)
Apply_ReloadSettings_Modifications(constitution_reload.backup)
Apply_RoundsSettings_Modifications(constitution_rounds.backup)
Apply_WeaponInfo_Modifications(constitution_weaponinfo.backup)

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>318</ID>
                  <Description>"[𝐏𝐑𝐈𝐌𝐀𝐑𝐘] 𝐃𝐢𝐥𝐢𝐠𝐞𝐧𝐜𝐞 𝐂𝐨𝐮𝐧𝐭𝐞𝐫 𝐒𝐧𝐢𝐩𝐞𝐫"</Description>
                  <Color>FFB111</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
/*
    Game Name:     Helldivers 2
    Game Version:  1.001.203
    Author:        MEOWSISI || MIAUSISI
    Date:          2024-12-13
    Table Version: 3.0.0

    R-1214 Constitution
    ------------
*/
}
{$lua}

diligencecs_damage.DATA.damage_std  = 425
diligencecs_damage.DATA.damage_drb  = 425
diligencecs_damage.DATA.ap_vals.ap1 = 5
diligencecs_damage.DATA.ap_vals.ap2 = 5
diligencecs_damage.DATA.ap_vals.ap3 = 4
diligencecs_damage.DATA.ap_vals.ap4 = 4
diligencecs_damage.DATA.demolition  = 10
diligencecs_damage.DATA.momentum.knkback = 20
diligencecs_damage.DATA.momentum.stagger = 20

diligencecs_projectile.DATA.speed   = 3700
diligencecs_projectile.DATA.drag    = 0.0
diligencecs_projectile.DATA.penetration_slowdown = 0.1
diligencecs_projectile.DATA.gravity_multiplier   = 0.0

diligencecs_weaponinfo.DATA.multip.recoilx = 0.55
diligencecs_weaponinfo.DATA.multip.recoily = 0.55
diligencecs_weaponinfo.DATA.multip.driftx = 0.55
diligencecs_weaponinfo.DATA.multip.drifty = 0.55
diligencecs_weaponinfo.DATA.multip.climbx = 0.55
diligencecs_weaponinfo.DATA.multip.climby = 0.55
diligencecs_weaponinfo.DATA.spread.infox = 0
diligencecs_weaponinfo.DATA.spread.infoy = 0
diligencecs_weaponinfo.DATA.scope.sway_mlt = 0
diligencecs_weaponinfo.DATA.scope.scope_sway = 0
diligencecs_weaponinfo.DATA.scope.scope_responsiveness = 100
diligencecs_weaponinfo.DATA.scope.ergonomics = 100
diligencecs_weaponinfo.DATA.suppresed.is_suppressed  = 1
diligencecs_weaponinfo.DATA.suppresed.noise_template = 0
diligencecs_weaponinfo.DATA.suppresed.visibility     = 0.0
diligencecs_weaponinfo.DATA.suppresed.weapon_scream  = 0

Apply_DamageSettings_Modifications(diligencecs_damage.DATA)
Apply_ProjectileInfo_Modifications(diligencecs_projectile.DATA)
Apply_WeaponInfo_Modifications(diligencecs_weaponinfo.DATA)

{$asm}

[DISABLE]
{$lua}

Apply_DamageSettings_Modifications(diligencecs_damage.backup)
Apply_ProjectileInfo_Modifications(diligencecs_projectile.backup)
Apply_WeaponInfo_Modifications(diligencecs_weaponinfo.backup)
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>29</ID>
                  <Description>"[𝐒𝐔𝐏𝐏𝐎𝐑𝐓] 𝐀𝐖𝐏 𝐀𝐧𝐭𝐢-𝐌𝐚𝐭𝐞𝐫𝐢𝐞𝐥 𝐑𝐢𝐟𝐥𝐞"</Description>
                  <Color>E87400</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
/*
    Game Name:     Helldivers 2
    Game Version:  1.001.203
    Author:        MEOWSISI || MIAUSISI
    Date:          2024-12-13
    Table Version: 3.0.0

    R-1214 Constitution
    ------------
*/
}
{$lua}

awp_damage.DATA.damage_std  = 1536
awp_damage.DATA.damage_drb  = 1536
awp_damage.DATA.ap_vals.ap1 = 7
awp_damage.DATA.ap_vals.ap2 = 7
awp_damage.DATA.ap_vals.ap3 = 7
awp_damage.DATA.ap_vals.ap4 = 7
awp_damage.DATA.demolition  = 32
awp_damage.DATA.momentum.knkback = 90
awp_damage.DATA.momentum.stagger = 90

awp_projectile.DATA.mass    = 350
awp_projectile.DATA.speed   = 3200
awp_projectile.DATA.drag    = 0.0
awp_projectile.DATA.penetration_slowdown = 0.0
awp_projectile.DATA.gravity_multiplier   = 0.0

awp_weaponinfo.DATA.multip.recoilx = 1.5
awp_weaponinfo.DATA.multip.recoily = 1.5
awp_weaponinfo.DATA.multip.driftx = 1.5
awp_weaponinfo.DATA.multip.drifty = 1.5
awp_weaponinfo.DATA.multip.climbx = 1.5
awp_weaponinfo.DATA.multip.climby = 1.5
awp_weaponinfo.DATA.spread.infox = 0
awp_weaponinfo.DATA.spread.infoy = 0
awp_weaponinfo.DATA.handling.sway_mlt = 0
awp_weaponinfo.DATA.handling.scope_sway = 0
awp_weaponinfo.DATA.handling.scope_responsiveness = 60
awp_weaponinfo.DATA.handling.ergonomics = 60
awp_weaponinfo.DATA.suppresed.weapon_scream  = 1

Apply_DamageSettings_Modifications(awp_damage.DATA)
Apply_ProjectileInfo_Modifications(awp_projectile.DATA)
Apply_WeaponInfo_Modifications(awp_weaponinfo.DATA)

{$asm}

[DISABLE]
{$lua}

Apply_DamageSettings_Modifications(awp_damage.backup)
Apply_ProjectileInfo_Modifications(awp_projectile.backup)
Apply_WeaponInfo_Modifications(awp_weaponinfo.backup)

</AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>308</ID>
              <Description>"【﻿ＳＵＰＰＯＲＴ　ＩＴＥＭＳ】"</Description>
              <Options moHideChildren="1" moManualExpandCollapse="1" moDeactivateChildrenAsWell="1"/>
              <Color>808000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{
    Game Name:     Helldivers 2
    Game Version:  1.001.203
    Author:        MEOWSISI || MIAUSISI
    Date:          2025-01-13
    Table Version: 3.1.2

    Laser Weapons
    --------------

}
{$lua}
-- //!         Please, DO!!! NOT!!! TOUCH!!! THIS!!! FILE!!!

-- //! ==============================================================
-- //! ===================    S U P P O R T     ===================
-- //! ==============================================================

-- //!                       STIM PISTOL
stimpistol_projectile    = Read_ProjectileInfo_Data(144, 15470422196992643923)
stimpistol_weaponinfo    = Read_WeaponInfo_Data(15470422196992643923)
stimpistol_customization = Read_WeaponCustomization_Data(15470422196992643923)
stimpistol_reload  = Read_Reload_Data(15470422196992643923)
stimpistol_rounds  = Read_Rounds_Data(15470422196992643923)

-- //!                      BACKPACK SHIELD
shieldbackpack_parameters = Read_ShieldParameters_Data(1353568197974522460)

-- //!           MECHS AND VEHICLES
fastreconv_magazine      = Read_Magazine_Data(2401215835282261016)
exo45machinegun_magazine = Read_Magazine_Data(645713022044093730)
exo45missile_magazine    = Read_Magazine_Data(9388736439472594613)

fastreconv_settings   = Read_Vehicle_Data(0)
exo45patriot_settings = Read_Vehicle_Data(1)
exo49emancip_settings = Read_Vehicle_Data(2)





{$asm}
[DISABLE]

</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>311</ID>
                  <Description>"[𝐒𝐈𝐃𝐄𝐀𝐑𝐌] 𝐒𝐭𝐢𝐦 𝐏𝐢𝐬𝐭𝐨𝐥"</Description>
                  <Color>FFFF82</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.203
  Date   : 2024-09-28
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  TODO - Sorry, this is a quick hotfix, no time to write down something :c
}
{$lua}


stimpistol_projectile.DATA.num_projectiles = 3
stimpistol_projectile.DATA.calibre  = 128
stimpistol_projectile.DATA.drag  = 0.0
stimpistol_projectile.DATA.mass  = 1
stimpistol_projectile.DATA.speed = 2000
stimpistol_projectile.DATA.gravity_multiplier = 0.0

stimpistol_weaponinfo.DATA.multip.recoilx = 0.0
stimpistol_weaponinfo.DATA.multip.recoily = 0.0
stimpistol_weaponinfo.DATA.multip.driftx = 0.0
stimpistol_weaponinfo.DATA.multip.drifty = 0.0
stimpistol_weaponinfo.DATA.multip.climbx = 0.0
stimpistol_weaponinfo.DATA.multip.climby = 0.0
stimpistol_weaponinfo.DATA.spread.infox = 2.0
stimpistol_weaponinfo.DATA.spread.infoy = 2.0
stimpistol_weaponinfo.DATA.handling.sway_mlt = 0.0
stimpistol_weaponinfo.DATA.handling.scope_sway = 0.0
stimpistol_weaponinfo.DATA.handling.scope_responsiveness = 100.0
stimpistol_weaponinfo.DATA.handling.ergonomics = 100.0
stimpistol_weaponinfo.DATA.suppresed.visibility = 0.2
stimpistol_weaponinfo.DATA.scope.aimzoomx = 2
stimpistol_weaponinfo.DATA.scope.aimzoomy = 4
stimpistol_weaponinfo.DATA.scope.aimzoomz = 8
stimpistol_weaponinfo.DATA.scope.offsetx = 0
stimpistol_weaponinfo.DATA.scope.offsety = 0
stimpistol_weaponinfo.DATA.scope.offsetz = 0.0
stimpistol_weaponinfo.DATA.scope.zeroingx = 50
stimpistol_weaponinfo.DATA.scope.zeroingy = 100
stimpistol_weaponinfo.DATA.scope.zeroingz = 200
stimpistol_rounds.DATA.reload_amount = 2
stimpistol_reload.DATA.duration = 2.0



Apply_ProjectileInfo_Modifications(stimpistol_projectile.DATA)
Apply_WeaponInfo_Modifications(stimpistol_weaponinfo.DATA)
Apply_RoundsSettings_Modifications(stimpistol_rounds.DATA)
Apply_ReloadSettings_Modifications(stimpistol_reload.DATA)

{$asm}
[DISABLE]
{$lua}

Apply_ProjectileInfo_Modifications(stimpistol_projectile.backup)
Apply_WeaponInfo_Modifications(stimpistol_weaponinfo.backup)
Apply_RoundsSettings_Modifications(stimpistol_rounds.backup)
Apply_ReloadSettings_Modifications(stimpistol_reload.backup)
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>117499</ID>
                  <Description>"[𝐁𝐀𝐂𝐊𝐏𝐀𝐂𝐊] 𝐏𝐞𝐫𝐬𝐨𝐧𝐚𝐥 𝐄𝐧𝐞𝐫𝐠𝐲 𝐒𝐡𝐢𝐞𝐥𝐝"</Description>
                  <Color>FFB111</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.100
  Date   : 2024-09-28
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  TODO - Sorry, this is a quick hotfix, no time to write down something :c
}
{$lua}

shieldbackpack_parameters.DATA.charge                     = 300
shieldbackpack_parameters.DATA.recharge_delay             = 5.0
shieldbackpack_parameters.DATA.broken_recharge_delay      = 5.0
shieldbackpack_parameters.DATA.recharge_rate              = 150
shieldbackpack_parameters.DATA.starter_charge_on_recharge = 300



Apply_ShieldParameters_Modifications(shieldbackpack_parameters.DATA)


{$asm}
[DISABLE]
{$lua}


Apply_ShieldParameters_Modifications(shieldbackpack_parameters.backup)
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>313</ID>
                  <Description>"[𝐁𝐀𝐂𝐊𝐏𝐀𝐂𝐊] 𝐈𝐦𝐩𝐫𝐨𝐯𝐞𝐝 𝐉𝐞𝐭𝐩𝐚𝐜𝐤 𝐑𝐄𝐂𝐇𝐀𝐑𝐆𝐄 𝐓𝐈𝐌𝐄"</Description>
                  <Color>FFB111</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.100
  Date   : 2024-09-28
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  TODO - Sorry, this is a quick hotfix, no time to write down something :c
}
{$lua}
registerSymbol("JetpackRecharge", "RechargeCompData + 40")
{$asm}
JetpackRecharge:
  dd (float)7.5

[DISABLE]

JetpackRecharge:
  dd (float)15
unregisterSymbol("JetpackRecharge")
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>315</ID>
                  <Description>"[𝐏𝐑𝐈𝐌𝐀𝐑𝐘] 𝐃𝐢𝐥𝐢𝐠𝐞𝐧𝐜𝐞 𝐂𝐨𝐮𝐧𝐭𝐞𝐫 𝐒𝐧𝐢𝐩𝐞𝐫"</Description>
                  <Color>FF8000</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.100
  Date   : 2024-09-28
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  TODO - Sorry, this is a quick hotfix, no time to write down something :c
}
{$lua}

--//! =============== MECHS
exo45patriot_settings.DATA.uses = 6
exo45patriot_settings.DATA.cd_success = 300
exo45machinegun_magazine.DATA.magazine_size = 3000
exo45missile_magazine.DATA.magazine_size    = 90


Apply_Stratagems_Modifications(exo45patriot_settings.DATA)
Apply_MagazineSettings_Modifications(exo45machinegun_magazine.DATA)
Apply_MagazineSettings_Modifications(exo45missile_magazine.DATA)

{$asm}
[DISABLE]
{$lua}

Apply_Stratagems_Modifications(exo45patriot_settings.backup)
Apply_MagazineSettings_Modifications(exo45machinegun_magazine.backup)
Apply_MagazineSettings_Modifications(exo45missile_magazine.backup)
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>316</ID>
                  <Description>"[𝐌𝐄𝐂𝐇] 𝐄𝐗𝐎-𝟒𝟗 𝐄𝐦𝐚𝐧𝐜𝐢𝐩𝐚𝐭𝐨𝐫 𝐄𝐱𝐨𝐬𝐮𝐢𝐭"</Description>
                  <Color>FF8000</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.100
  Date   : 2024-09-28
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  TODO - Sorry, this is a quick hotfix, no time to write down something :c
}
{$lua}
--//! =============== MECHS
exo49emancip_settings.DATA.uses = 6
exo49emancip_settings.DATA.cd_success = 300


Apply_Stratagems_Modifications(exo49emancip_settings.DATA)

{$asm}
[DISABLE]
{$lua}

Apply_Stratagems_Modifications(exo49emancip_settings.backup)
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>312</ID>
                  <Description>"[𝐕𝐄𝐇𝐈𝐂𝐋𝐄𝐒] 𝐌-𝟏𝟎𝟐 𝐅𝐚𝐬𝐭 𝐑𝐞𝐜𝐨𝐧. 𝐕𝐞𝐡𝐢𝐜𝐥𝐞"</Description>
                  <Color>FF8000</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.100
  Date   : 2024-09-28
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  TODO - Sorry, this is a quick hotfix, no time to write down something :c
}
{$lua}
--//! =============== FAST RECON VEHICLE
fastreconv_settings.DATA.cd_success    = 300
fastreconv_magazine.DATA.magazine_size = 275

Apply_Stratagems_Modifications(fastreconv_settings.DATA)
Apply_MagazineSettings_Modifications(fastreconv_magazine.DATA)

{$asm}
[DISABLE]
{$lua}

Apply_Stratagems_Modifications(fastreconv_settings.backup)
Apply_MagazineSettings_Modifications(fastreconv_magazine.backup)
</AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>269</ID>
              <Description>"【﻿ＴＵＲＲＥＴＳ　ＡＮＤ　ＲＥＬＡＹＳ】"</Description>
              <Options moHideChildren="1" moManualExpandCollapse="1" moDeactivateChildrenAsWell="1"/>
              <Color>808000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{
    Game Name:     Helldivers 2
    Game Version:  1.001.203
    Author:        MEOWSISI || MIAUSISI
    Date:          2024-12-13
    Table Version: 3.0.0

    Support Weapons and Turrets
    --------------

}
{$lua}
-- //!         Please, DO!!! NOT!!! TOUCH!!! THIS!!! FILE!!!

-- //! ==============================================================
-- //! ===================    M I N E S     ===================
-- //! ==============================================================

antip_mine_damage = Read_DamageSettings_Data(277)
incdr_mine_damage = Read_DamageSettings_Data(278)
atank_mine_damage = Read_DamageSettings_Data(279)
antip_mine_explosive = Read_ExplosiveSettings_Data(168)
incdr_mine_explosive = Read_ExplosiveSettings_Data(169)
atank_mine_explosive = Read_ExplosiveSettings_Data(170)


-- //! ==============================================================
-- //! ===================    T U R R E T S    ===================
-- //! ==============================================================
hmg_emplac_magazine = Read_Magazine_Data(1051445694670701817)
hmg_emplac_damage   = Read_DamageSettings_Data(134)

teamshield_lifetime   = Read_Hellpod_LifeTime_Data(17083241647592728848)
teamshield_parameters = Read_ShieldParameters_Data(17083241647592728848)


shield_empl_settings = Read_Emplacements_Data(2)
hmchg_empl_settings = Read_Emplacements_Data(3)
antip_mine_settings = Read_Emplacements_Data(4)
incdr_mine_settings = Read_Emplacements_Data(5)
atank_mine_settings = Read_Emplacements_Data(6)
farty_mine_settings = Read_Emplacements_Data(7)
tesla_trrt_settings = Read_Emplacements_Data(8)

gatling_autotrrt_settings     = Read_AutoTurret_Data(0)
mchineg_autotrrt_settings     = Read_AutoTurret_Data(1)
dmg_mortar_autotrrt_settings  = Read_AutoTurret_Data(2)
stun_mortar_autotrrt_settings = Read_AutoTurret_Data(3)
rocketo_autotrrt_settings = Read_AutoTurret_Data(4)
autocnn_autotrrt_settings = Read_AutoTurret_Data(5)
firethr_autotrrt_settings = Read_AutoTurret_Data(6)


-- //! ==============================================================
-- //! ===================    B A C K P A C K S    ===================
-- //! ==============================================================

ammo_backpack_settings   = Read_Backpack_Data(0)
riot_shield_settings     = Read_Backpack_Data(1)
unkbackpack1_settings    = Read_Backpack_Data(2)
personal_bubble_settings = Read_Backpack_Data(3)
jumppack_settings        = Read_Backpack_Data(4)
bullet_backpack_settings = Read_Backpack_Data(5)
robert_backpack_settings = Read_Backpack_Data(6)
stinky_backpack_settings = Read_Backpack_Data(7)



-- //! ==============================================================
-- //! =============  S U P P O R T     W E A P O N S    ==============
-- //! ==============================================================

autocannon_hpod_settings   = Read_SupportWeapons_Data(0)
grlauncher_hpod_settings   = Read_SupportWeapons_Data(1)
machinegun_hpod_settings   = Read_SupportWeapons_Data(2)
stalwart_hpod_settings     = Read_SupportWeapons_Data(3)
railgun_hpod_settings      = Read_SupportWeapons_Data(4)
recoilless_hpod_settings   = Read_SupportWeapons_Data(5)
lasercannon_hpod_settings  = Read_SupportWeapons_Data(6)
quasarcnnon_hpod_settings  = Read_SupportWeapons_Data(7)
awp_hpod_settings          = Read_SupportWeapons_Data(8)
expd_at_hpod_settings      = Read_SupportWeapons_Data(9)
commando_hpod_settings     = Read_SupportWeapons_Data(10)
flamethrower_hpod_settings = Read_SupportWeapons_Data(11)
heavymgun_hpod_settings    = Read_SupportWeapons_Data(12)
airburst_hpod_settings     = Read_SupportWeapons_Data(13)
spear_hpod_settings        = Read_SupportWeapons_Data(15)
wasp_hpod_settings         = Read_SupportWeapons_Data(16)
arcthrower_hpod_settings   = Read_SupportWeapons_Data(17)
sterilizer_hpod_settings   = Read_SupportWeapons_Data(18)


{$asm}
[DISABLE]

</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>192</ID>
                  <Description>"[𝐓𝐀𝐂𝐓𝐈𝐂𝐀𝐋] 𝐋𝐨𝐰𝐞𝐫 𝐂𝐃 𝐟𝐨𝐫 𝐭𝐮𝐫𝐫𝐞𝐭𝐬 &amp;&amp; 𝐫𝐞𝐥𝐚𝐲𝐬"</Description>
                  <Color>FFFF82</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.100
  Date   : 2024-09-28
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  TODO - Sorry, this is a quick hotfix, no time to write down something :c
}
{$lua}

-- Turret || Mine || Emplacements cooldowns
shield_empl_settings.DATA.cd_success = 70
hmchg_empl_settings.DATA.cd_success = 90
antip_mine_settings.DATA.cd_success = 75
incdr_mine_settings.DATA.cd_success = 75
atank_mine_settings.DATA.cd_success = 75
farty_mine_settings.DATA.cd_success = 75
tesla_trrt_settings.DATA.cd_success = 75

-- Automatic Turret Cooldowns
gatling_autotrrt_settings.DATA.cd_success = 90
mchineg_autotrrt_settings.DATA.cd_success = 60
dmg_mortar_autotrrt_settings.DATA.cd_success  = 120
stun_mortar_autotrrt_settings.DATA.cd_success = 120
rocketo_autotrrt_settings.DATA.cd_success = 120
autocnn_autotrrt_settings.DATA.cd_success = 120
firethr_autotrrt_settings.DATA.cd_success = 120


Apply_Stratagems_Modifications(shield_empl_settings.DATA)
Apply_Stratagems_Modifications(hmchg_empl_settings.DATA)
Apply_Stratagems_Modifications(antip_mine_settings.DATA)
Apply_Stratagems_Modifications(incdr_mine_settings.DATA)
Apply_Stratagems_Modifications(atank_mine_settings.DATA)
Apply_Stratagems_Modifications(farty_mine_settings.DATA)
Apply_Stratagems_Modifications(tesla_trrt_settings.DATA)
Apply_Stratagems_Modifications(gatling_autotrrt_settings.DATA)
Apply_Stratagems_Modifications(mchineg_autotrrt_settings.DATA)
Apply_Stratagems_Modifications(dmg_mortar_autotrrt_settings.DATA)
Apply_Stratagems_Modifications(stun_mortar_autotrrt_settings.DATA)
Apply_Stratagems_Modifications(rocketo_autotrrt_settings.DATA)
Apply_Stratagems_Modifications(autocnn_autotrrt_settings.DATA)
Apply_Stratagems_Modifications(firethr_autotrrt_settings.DATA)

{$asm}
[DISABLE]
{$lua}

Apply_Stratagems_Modifications(shield_empl_settings.backup)
Apply_Stratagems_Modifications(hmchg_empl_settings.backup)
Apply_Stratagems_Modifications(antip_mine_settings.backup)
Apply_Stratagems_Modifications(incdr_mine_settings.backup)
Apply_Stratagems_Modifications(atank_mine_settings.backup)
Apply_Stratagems_Modifications(farty_mine_settings.backup)
Apply_Stratagems_Modifications(tesla_trrt_settings.backup)
Apply_Stratagems_Modifications(gatling_autotrrt_settings.backup)
Apply_Stratagems_Modifications(mchineg_autotrrt_settings.backup)
Apply_Stratagems_Modifications(dmg_mortar_autotrrt_settings.backup)
Apply_Stratagems_Modifications(stun_mortar_autotrrt_settings.backup)
Apply_Stratagems_Modifications(rocketo_autotrrt_settings.backup)
Apply_Stratagems_Modifications(autocnn_autotrrt_settings.backup)
Apply_Stratagems_Modifications(firethr_autotrrt_settings.backup)

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>195</ID>
                  <Description>"[𝐓𝐀𝐂𝐓𝐈𝐂𝐀𝐋] 𝐋𝐨𝐰𝐞𝐫 𝐂𝐃 𝐟𝐨𝐫 𝐒𝐮𝐩𝐩. 𝐖𝐞𝐚𝐩𝐨𝐧𝐬 &amp;&amp; 𝐁𝐚𝐜𝐤𝐩𝐚𝐜𝐤𝐬"</Description>
                  <Color>FFFF82</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.100
  Date   : 2024-09-28
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  TODO - Sorry, this is a quick hotfix, no time to write down something :c
}
{$lua}

-- Support Backpack Cooldowns
ammo_backpack_settings.DATA.cd_success   = 180
riot_shield_settings.DATA.cd_success     = 10
unkbackpack1_settings.DATA.cd_success    = 120
personal_bubble_settings.DATA.cd_success = 180
jumppack_settings.DATA.cd_success        = 180
bullet_backpack_settings.DATA.cd_success = 180
robert_backpack_settings.DATA.cd_success = 180
stinky_backpack_settings.DATA.cd_success = 180

-- Support Weapons Cooldowns
autocannon_hpod_settings.DATA.cd_success   = 180
grlauncher_hpod_settings.DATA.cd_success   = 180
machinegun_hpod_settings.DATA.cd_success   = 180
stalwart_hpod_settings.DATA.cd_success     = 180
railgun_hpod_settings.DATA.cd_success      = 180
recoilless_hpod_settings.DATA.cd_success   = 180
lasercannon_hpod_settings.DATA.cd_success  = 180
quasarcnnon_hpod_settings.DATA.cd_success  = 180
awp_hpod_settings.DATA.cd_success          = 180
expd_at_hpod_settings.DATA.cd_success      = 75
commando_hpod_settings.DATA.cd_success     = 95
flamethrower_hpod_settings.DATA.cd_success = 180
heavymgun_hpod_settings.DATA.cd_success    = 180
airburst_hpod_settings.DATA.cd_success     = 180
spear_hpod_settings.DATA.cd_success        = 180
wasp_hpod_settings.DATA.cd_success         = 180
arcthrower_hpod_settings.DATA.cd_success   = 180
sterilizer_hpod_settings.DATA.cd_success   = 180



Apply_Stratagems_Modifications(unkbackpack1_settings.DATA)
Apply_Stratagems_Modifications(wasp_hpod_settings.DATA)
Apply_Stratagems_Modifications(autocannon_hpod_settings.DATA)
Apply_Stratagems_Modifications(grlauncher_hpod_settings.DATA)
Apply_Stratagems_Modifications(machinegun_hpod_settings.DATA)
Apply_Stratagems_Modifications(stalwart_hpod_settings.DATA)
Apply_Stratagems_Modifications(railgun_hpod_settings.DATA)
Apply_Stratagems_Modifications(recoilless_hpod_settings.DATA)
Apply_Stratagems_Modifications(lasercannon_hpod_settings.DATA)
Apply_Stratagems_Modifications(quasarcnnon_hpod_settings.DATA)
Apply_Stratagems_Modifications(awp_hpod_settings.DATA)
Apply_Stratagems_Modifications(expd_at_hpod_settings.DATA)
Apply_Stratagems_Modifications(commando_hpod_settings.DATA)
Apply_Stratagems_Modifications(flamethrower_hpod_settings.DATA)
Apply_Stratagems_Modifications(heavymgun_hpod_settings.DATA)
Apply_Stratagems_Modifications(airburst_hpod_settings.DATA)
Apply_Stratagems_Modifications(spear_hpod_settings.DATA)
Apply_Stratagems_Modifications(arcthrower_hpod_settings.DATA)
Apply_Stratagems_Modifications(sterilizer_hpod_settings.DATA)
Apply_Stratagems_Modifications(ammo_backpack_settings.DATA)
Apply_Stratagems_Modifications(riot_shield_settings.DATA)
Apply_Stratagems_Modifications(personal_bubble_settings.DATA)
Apply_Stratagems_Modifications(jumppack_settings.DATA)
Apply_Stratagems_Modifications(bullet_backpack_settings.DATA)
Apply_Stratagems_Modifications(robert_backpack_settings.DATA)
Apply_Stratagems_Modifications(stinky_backpack_settings.DATA)


{$asm}
[DISABLE]
{$lua}


Apply_Stratagems_Modifications(unkbackpack1_settings.backup)
Apply_Stratagems_Modifications(wasp_hpod_settings.backup)
Apply_Stratagems_Modifications(autocannon_hpod_settings.backup)
Apply_Stratagems_Modifications(grlauncher_hpod_settings.backup)
Apply_Stratagems_Modifications(machinegun_hpod_settings.backup)
Apply_Stratagems_Modifications(stalwart_hpod_settings.backup)
Apply_Stratagems_Modifications(railgun_hpod_settings.backup)
Apply_Stratagems_Modifications(recoilless_hpod_settings.backup)
Apply_Stratagems_Modifications(lasercannon_hpod_settings.backup)
Apply_Stratagems_Modifications(quasarcnnon_hpod_settings.backup)
Apply_Stratagems_Modifications(awp_hpod_settings.backup)
Apply_Stratagems_Modifications(expd_at_hpod_settings.backup)
Apply_Stratagems_Modifications(commando_hpod_settings.backup)
Apply_Stratagems_Modifications(flamethrower_hpod_settings.backup)
Apply_Stratagems_Modifications(heavymgun_hpod_settings.backup)
Apply_Stratagems_Modifications(airburst_hpod_settings.backup)
Apply_Stratagems_Modifications(spear_hpod_settings.backup)
Apply_Stratagems_Modifications(arcthrower_hpod_settings.backup)
Apply_Stratagems_Modifications(sterilizer_hpod_settings.backup)
Apply_Stratagems_Modifications(ammo_backpack_settings.backup)
Apply_Stratagems_Modifications(riot_shield_settings.backup)
Apply_Stratagems_Modifications(personal_bubble_settings.backup)
Apply_Stratagems_Modifications(jumppack_settings.backup)
Apply_Stratagems_Modifications(bullet_backpack_settings.backup)
Apply_Stratagems_Modifications(robert_backpack_settings.backup)
Apply_Stratagems_Modifications(stinky_backpack_settings.backup)


</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>380</ID>
                  <Description>"[𝐄𝐌𝐏𝐋𝐀𝐂𝐄𝐌𝐄𝐍𝐓𝐒] 𝐓𝐞𝐚𝐦 𝐒𝐡𝐢𝐞𝐥𝐝 𝐌𝐨𝐝𝐢𝐟𝐢𝐜𝐚𝐭𝐢𝐨𝐧𝐬"</Description>
                  <Color>FFB111</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.002.003
  Date   : 2025-01-13
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  TODO - Sorry, this is a quick hotfix, no time to write down something :c
}
{$lua}

teamshield_lifetime.DATA.life_time = 60

teamshield_parameters.DATA.charge                     = 6000
teamshield_parameters.DATA.recharge_delay             = 20.0
teamshield_parameters.DATA.broken_recharge_delay      = 20.0
teamshield_parameters.DATA.recharge_rate              = 2000
teamshield_parameters.DATA.starter_charge_on_recharge = 6000


Apply_Hellpod_Lifetime_Modifications(teamshield_lifetime.DATA)
Apply_ShieldParameters_Modifications(teamshield_parameters.DATA)


{$asm}
[DISABLE]
{$lua}


Apply_Hellpod_Lifetime_Modifications(teamshield_lifetime.backup)
Apply_ShieldParameters_Modifications(teamshield_parameters.backup)
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>193</ID>
                  <Description>"[𝐌𝐈𝐍𝐄𝐒] 𝐈𝐦𝐩𝐫𝐨𝐯𝐞𝐝 𝐞𝐱𝐩𝐥𝐨𝐬𝐢𝐨𝐧𝐬"</Description>
                  <Color>FF8000</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.100
  Date   : 2024-09-28
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  TODO - Sorry, this is a quick hotfix, no time to write down something :c
}
{$lua}
-- Anti-Personnel Mines
antip_mine_damage.DATA.damage_std = 450
antip_mine_damage.DATA.damage_drb = 450
antip_mine_damage.DATA.ap_vals.ap1 = 5
antip_mine_damage.DATA.ap_vals.ap2 = 5
antip_mine_damage.DATA.ap_vals.ap3 = 5
antip_mine_damage.DATA.ap_vals.ap4 = 5
antip_mine_damage.DATA.demolition = 30
antip_mine_damage.DATA.momentum.knkback = 35
antip_mine_damage.DATA.momentum.stagger = 55
antip_mine_damage.DATA.elem_type = 0
antip_mine_damage.DATA.stt_eff_1.target_type = 37
antip_mine_damage.DATA.stt_eff_1.target_time = 100
antip_mine_damage.DATA.stt_eff_2.target_type = 38
antip_mine_damage.DATA.stt_eff_2.target_time = 100
antip_mine_damage.DATA.stt_eff_3.target_type = 0
antip_mine_damage.DATA.stt_eff_3.target_time = 0
antip_mine_damage.DATA.stt_eff_4.target_type = 0
antip_mine_damage.DATA.stt_eff_4.target_time = 0

antip_mine_explosive.DATA.inner_radius = 4.5
antip_mine_explosive.DATA.outer_radius = 6.5
antip_mine_explosive.DATA.stagger_radius = 7.0

-- Incendiary Mines
incdr_mine_damage.DATA.damage_std = 320
incdr_mine_damage.DATA.damage_drb = 320
incdr_mine_damage.DATA.ap_vals.ap1 = 5
incdr_mine_damage.DATA.ap_vals.ap2 = 5
incdr_mine_damage.DATA.ap_vals.ap3 = 5
incdr_mine_damage.DATA.ap_vals.ap4 = 5
incdr_mine_damage.DATA.demolition = 30
incdr_mine_damage.DATA.momentum.knkback = 35
incdr_mine_damage.DATA.momentum.stagger = 55
incdr_mine_damage.DATA.elem_type = 1
incdr_mine_damage.DATA.stt_eff_1.target_type = 6
incdr_mine_damage.DATA.stt_eff_1.target_time = 100
incdr_mine_damage.DATA.stt_eff_2.target_type = 32
incdr_mine_damage.DATA.stt_eff_2.target_time = 100
incdr_mine_damage.DATA.stt_eff_3.target_type = 0
incdr_mine_damage.DATA.stt_eff_3.target_time = 0
incdr_mine_damage.DATA.stt_eff_4.target_type = 0
incdr_mine_damage.DATA.stt_eff_4.target_time = 0

incdr_mine_explosive.DATA.inner_radius = 4.5
incdr_mine_explosive.DATA.outer_radius = 6.5
incdr_mine_explosive.DATA.stagger_radius = 7.0

-- Anti-Tank Mines
atank_mine_damage.DATA.damage_std = 2000
atank_mine_damage.DATA.damage_drb = 2000
atank_mine_damage.DATA.ap_vals.ap1 = 8
atank_mine_damage.DATA.ap_vals.ap2 = 8
atank_mine_damage.DATA.ap_vals.ap3 = 8
atank_mine_damage.DATA.ap_vals.ap4 = 8
atank_mine_damage.DATA.demolition = 30
atank_mine_damage.DATA.momentum.knkback = 75
atank_mine_damage.DATA.momentum.stagger = 75
atank_mine_damage.DATA.elem_type = 0
atank_mine_damage.DATA.stt_eff_1.target_type = 54
atank_mine_damage.DATA.stt_eff_1.target_time = 100
atank_mine_damage.DATA.stt_eff_2.target_type = 0
atank_mine_damage.DATA.stt_eff_2.target_time = 0
atank_mine_damage.DATA.stt_eff_3.target_type = 0
atank_mine_damage.DATA.stt_eff_3.target_time = 0
atank_mine_damage.DATA.stt_eff_4.target_type = 0
atank_mine_damage.DATA.stt_eff_4.target_time = 0

atank_mine_explosive.DATA.inner_radius = 7
atank_mine_explosive.DATA.outer_radius = 11.0
atank_mine_explosive.DATA.stagger_radius = 14.0



Apply_DamageSettings_Modifications(antip_mine_damage.DATA)
Apply_DamageSettings_Modifications(incdr_mine_damage.DATA)
Apply_DamageSettings_Modifications(atank_mine_damage.DATA)
Apply_ExplosiveSettings_Modifications(antip_mine_explosive.DATA)
Apply_ExplosiveSettings_Modifications(incdr_mine_explosive.DATA)
Apply_ExplosiveSettings_Modifications(atank_mine_explosive.DATA)


{$asm}
[DISABLE]
{$lua}

Apply_DamageSettings_Modifications(antip_mine_damage.backup)
Apply_DamageSettings_Modifications(incdr_mine_damage.backup)
Apply_DamageSettings_Modifications(atank_mine_damage.backup)
Apply_ExplosiveSettings_Modifications(antip_mine_explosive.backup)
Apply_ExplosiveSettings_Modifications(incdr_mine_explosive.backup)
Apply_ExplosiveSettings_Modifications(atank_mine_explosive.backup)

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>337</ID>
                  <Description>"[𝐄𝐌𝐏𝐋𝐀𝐂𝐄𝐌𝐄𝐍𝐓𝐒] 𝐇𝐌𝐆 𝐚𝐦𝐦𝐨 𝐢𝐧𝐜𝐫𝐞𝐚𝐬𝐞𝐝"</Description>
                  <Color>FF8000</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.100
  Date   : 2024-09-28
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  TODO - Sorry, this is a quick hotfix, no time to write down something :c
}
{$lua}
--//! =============== FAST RECON VEHICLE
hmg_emplac_magazine.DATA.magazine_size = 350
hmg_emplac_damage.DATA.damage_drb      = 125

Apply_MagazineSettings_Modifications(hmg_emplac_magazine.DATA)
Apply_DamageSettings_Modifications(hmg_emplac_damage.DATA)

{$asm}
[DISABLE]
{$lua}

Apply_MagazineSettings_Modifications(hmg_emplac_magazine.backup)
Apply_DamageSettings_Modifications(hmg_emplac_damage.backup)

</AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>279</ID>
              <Description>"【﻿ＥＡＧＬＥ　＆　ＯＲＢＩＴＡＬ　ＳＴＲＡＴＳ】"</Description>
              <Options moHideChildren="1" moManualExpandCollapse="1" moDeactivateChildrenAsWell="1"/>
              <Color>808000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{
    Game Name:     Helldivers 2
    Game Version:  1.001.203
    Author:        MEOWSISI || MIAUSISI
    Date:          2024-12-13
    Table Version: 3.0.0

    Explosive weapons
    -----------------

    This script initializes the data of the following weapons:

    GRENADES
    --------------------
    - G-6 Frag
    - G-12 HE

    WEAPONS
    ------------
    - Autocannon
    - Recoilless Rifle
}
{$lua}
-- //!         Please, DO!!! NOT!!! TOUCH!!! THIS!!! FILE!!!

-- //! ==============================================================
-- //! ===================
-- //! ==============================================================


precision_strike_settings = Read_OrbitalSettings_Data(0)
aiirburst_strike_settings = Read_OrbitalSettings_Data(1)
staticfld_strike_settings = Read_OrbitalSettings_Data(2)
stinkyfld_strike_settings = Read_OrbitalSettings_Data(4)
railcnnon_strike_settings = Read_OrbitalSettings_Data(7)
smoke_fld_strike_settings = Read_OrbitalSettings_Data(10)

barrage_120mm_settings    = Read_OrbitalSettings_Data(3)
barrage_380mm_settings    = Read_OrbitalSettings_Data(5)
laser_stream_settings     = Read_OrbitalSettings_Data(6)
barrage_walkr_settings    = Read_OrbitalSettings_Data(8)
barrage_gtlng_settings    = Read_OrbitalSettings_Data(9)
barrage_naplm_settings    = Read_OrbitalSettings_Data(11)



orbital380_bombardment = Read_Bombardment_Data(17250673437555536342)
orbital120_bombardment = Read_Bombardment_Data(3259427501513118129)
orbwalking_bombardment = Read_Bombardment_Data(14663462306863854060)
orbtnapalm_bombardment = Read_Bombardment_Data(11631307996670093680)



-- //! ====================   O R B I T A L    3 8 0 m m
orbital380_damage = Read_DamageSettings_Data(304)

orbital380_explosion = Read_ExplosiveSettings_Data(97)

orbital380v2_explosion = Read_ExplosiveSettings_Data(99)


-- //! ====================   O R B I T A L    1 2 0 m m
orbital120_damage = Read_DamageSettings_Data(305)

orbital120_explosion   = Read_ExplosiveSettings_Data(95)
orbital120v2_explosion = Read_ExplosiveSettings_Data(96)



-- //! ====================   O R B I T A L    N A P A L M
orbnapalm_damage = Read_DamageSettings_Data(179)

orbnapalm_explosion  = Read_ExplosiveSettings_Data(101)
orbnapalm2_explosion = Read_ExplosiveSettings_Data(102)


-- //! ====================   O R B I T A L    G A T L I N G
orbgatling_projdamage = Read_DamageSettings_Data(146)
orbgatling_expldamage = Read_DamageSettings_Data(247)
orbgatling1_explosion = Read_ExplosiveSettings_Data(87)



-- //! ====================   O R B I T A L    A I R B U R S T
orbairburst_projdamage = Read_DamageSettings_Data(175)
orbairburst_expldamage = Read_DamageSettings_Data(262)
orbairburst_explosion  = Read_ExplosiveSettings_Data(93)




-- //! ======     O R B I T A L     P R E C I S I O N    S T R I K E

orbprecision_explosion = Read_ExplosiveSettings_Data(98)



-- //! ======     O R B I T A L     R A I L C A N N O N    S T R I K E
orbrailcannon_explosion = Read_ExplosiveSettings_Data(113)




-- //! ==================    E A G L E    5 0 0 K G
eagle500kg_damage = Read_DamageSettings_Data(311)

eagle500kg_explosion = Read_ExplosiveSettings_Data(142)


-- //! ==================    E A G L E    1 1 0 m m
eagle110m_damage     = Read_DamageSettings_Data(275)
eagle110m_explosion  = Read_ExplosiveSettings_Data(160)
eagle110m2_explosion = Read_ExplosiveSettings_Data(161)
eagle110m_projdamage = Read_DamageSettings_Data(168)
eagle110m_settings   = Read_EagleSettings_Data(2)


{$asm}
[DISABLE]

</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>117500</ID>
                  <Description>"[𝐓𝐀𝐂𝐓𝐈𝐂𝐀𝐋] 𝐅𝐚𝐬𝐭𝐞𝐫 𝐄𝐚𝐠𝐥𝐞 𝐑𝐞𝐚𝐫𝐦"</Description>
                  <Color>FFFF82</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.203
  Date   : 2024-12-07
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  TODO - Sorry, this is a quick hotfix, no time to write down something :c
}
{$lua}
eagle_rearm_settings = Read_EagleSettings_Data(7)

-- Eagle Rearm Time
eagle_rearm_settings.DATA.cd_success = 100

Apply_Stratagems_Modifications(eagle_rearm_settings.DATA)


{$asm}
[DISABLE]
{$lua}

Apply_Stratagems_Modifications(eagle_rearm_settings.backup)

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>196</ID>
                  <Description>"[𝐓𝐀𝐂𝐓𝐈𝐂𝐀𝐋] 𝐋𝐨𝐰𝐞𝐫 𝐂𝐃 𝐟𝐨𝐫 𝐎𝐫𝐛𝐢𝐭𝐚𝐥𝐬"</Description>
                  <Color>FFFF82</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.100
  Date   : 2024-09-28
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  TODO - Sorry, this is a quick hotfix, no time to write down something :c
}
{$lua}

-- Orbital Strike Cooldowns
precision_strike_settings.DATA.cd_success = 60
aiirburst_strike_settings.DATA.cd_success = 85
staticfld_strike_settings.DATA.cd_success = 60
stinkyfld_strike_settings.DATA.cd_success = 60
railcnnon_strike_settings.DATA.cd_success = 120
smoke_fld_strike_settings.DATA.cd_success = 60

-- Barrage Cooldowns
barrage_120mm_settings.DATA.cd_success = 145
barrage_380mm_settings.DATA.cd_success = 190
laser_stream_settings.DATA.uses = 4294967295
laser_stream_settings.DATA.cd_success  = 180
barrage_walkr_settings.DATA.cd_success = 160
barrage_gtlng_settings.DATA.cd_success = 60
barrage_naplm_settings.DATA.cd_success = 140






Apply_Stratagems_Modifications(precision_strike_settings.DATA)
Apply_Stratagems_Modifications(aiirburst_strike_settings.DATA)
Apply_Stratagems_Modifications(staticfld_strike_settings.DATA)
Apply_Stratagems_Modifications(stinkyfld_strike_settings.DATA)
Apply_Stratagems_Modifications(railcnnon_strike_settings.DATA)
Apply_Stratagems_Modifications(smoke_fld_strike_settings.DATA)
Apply_Stratagems_Modifications(barrage_120mm_settings.DATA)
Apply_Stratagems_Modifications(barrage_380mm_settings.DATA)
Apply_Stratagems_Modifications(laser_stream_settings.DATA)
Apply_Stratagems_Modifications(barrage_walkr_settings.DATA)
Apply_Stratagems_Modifications(barrage_gtlng_settings.DATA)
Apply_Stratagems_Modifications(barrage_naplm_settings.DATA)


{$asm}
[DISABLE]
{$lua}

Apply_Stratagems_Modifications(precision_strike_settings.backup)
Apply_Stratagems_Modifications(aiirburst_strike_settings.backup)
Apply_Stratagems_Modifications(staticfld_strike_settings.backup)
Apply_Stratagems_Modifications(stinkyfld_strike_settings.backup)
Apply_Stratagems_Modifications(railcnnon_strike_settings.backup)
Apply_Stratagems_Modifications(smoke_fld_strike_settings.backup)
Apply_Stratagems_Modifications(barrage_120mm_settings.backup)
Apply_Stratagems_Modifications(barrage_380mm_settings.backup)
Apply_Stratagems_Modifications(laser_stream_settings.backup)
Apply_Stratagems_Modifications(barrage_walkr_settings.backup)
Apply_Stratagems_Modifications(barrage_gtlng_settings.backup)
Apply_Stratagems_Modifications(barrage_naplm_settings.backup)

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>328</ID>
                  <Description>"[𝐎𝐅𝐅𝐄𝐍𝐒𝐈𝐕𝐄] 𝐁𝐞𝐭𝐭𝐞𝐫 𝐎𝐫𝐛𝐢𝐭𝐚𝐥 𝐍𝐚𝐩𝐚𝐥𝐦 𝐒𝐭𝐫𝐢𝐤𝐞"</Description>
                  <Color>FFFF82</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.100
  Date   : 2024-09-28
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  TODO - Sorry, this is a quick hotfix, no time to write down something :c
}
{$lua}
--//! ======================= Orbital 380mm Barrage
orbtnapalm_bombardment.DATA.num_bombs                    = 5
orbtnapalm_bombardment.DATA.num_salvos                   = 6
orbtnapalm_bombardment.DATA.salvo_interval               = 1.3
orbtnapalm_bombardment.DATA.salvo_interval_random_offset = 1.15


orbnapalm_damage.DATA.damage_std  = 768
orbnapalm_damage.DATA.damage_drb  = 768
orbnapalm_damage.DATA.ap_vals.ap1 = 5
orbnapalm_damage.DATA.ap_vals.ap2 = 5
orbnapalm_damage.DATA.ap_vals.ap3 = 5
orbnapalm_damage.DATA.ap_vals.ap4 = 5
orbnapalm_damage.DATA.demolition  = 55
orbnapalm_damage.DATA.momentum.knkback = 60
orbnapalm_damage.DATA.momentum.stagger = 60

orbnapalm_explosion.DATA.inner_radius   = 9
orbnapalm_explosion.DATA.outer_radius   = 13
orbnapalm_explosion.DATA.stagger_radius = 14

orbnapalm2_explosion.DATA.inner_radius   = 9
orbnapalm2_explosion.DATA.outer_radius   = 13
orbnapalm2_explosion.DATA.stagger_radius = 14




Apply_Bombardment_Modifications(orbtnapalm_bombardment.DATA)
Apply_DamageSettings_Modifications(orbnapalm_damage.DATA)
Apply_ExplosiveSettings_Modifications(orbnapalm_explosion.DATA)
Apply_ExplosiveSettings_Modifications(orbnapalm2_explosion.DATA)


{$asm}
[DISABLE]
{$lua}



Apply_Bombardment_Modifications(orbtnapalm_bombardment.backup)
Apply_DamageSettings_Modifications(orbnapalm_damage.backup)
Apply_ExplosiveSettings_Modifications(orbnapalm_explosion.backup)
Apply_ExplosiveSettings_Modifications(orbnapalm2_explosion.backup)

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>327</ID>
                  <Description>"[𝐎𝐅𝐅𝐄𝐍𝐒𝐈𝐕𝐄] 𝐁𝐞𝐭𝐭𝐞𝐫 𝐎𝐫𝐛𝐢𝐭𝐚𝐥 𝐀𝐢𝐫𝐛𝐮𝐫𝐬𝐭 𝐒𝐭𝐫𝐢𝐤𝐞"</Description>
                  <Color>FFFF82</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.100
  Date   : 2024-09-28
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  TODO - Sorry, this is a quick hotfix, no time to write down something :c
}
{$lua}
orbairburst_projdamage.DATA.damage_std  = 864
orbairburst_projdamage.DATA.damage_drb  = 864
orbairburst_projdamage.DATA.ap_vals.ap1 = 7
orbairburst_projdamage.DATA.ap_vals.ap2 = 7
orbairburst_projdamage.DATA.ap_vals.ap3 = 7
orbairburst_projdamage.DATA.ap_vals.ap4 = 7
orbairburst_projdamage.DATA.demolition  = 50
orbairburst_projdamage.DATA.momentum.knkback = 75
orbairburst_projdamage.DATA.momentum.stagger = 75


orbairburst_expldamage.DATA.damage_std  = 550
orbairburst_expldamage.DATA.damage_drb  = 550
orbairburst_expldamage.DATA.ap_vals.ap1 = 5
orbairburst_expldamage.DATA.ap_vals.ap2 = 5
orbairburst_expldamage.DATA.ap_vals.ap3 = 5
orbairburst_expldamage.DATA.ap_vals.ap4 = 4
orbairburst_expldamage.DATA.demolition  = 50
orbairburst_expldamage.DATA.momentum.knkback = 70
orbairburst_expldamage.DATA.momentum.stagger = 70


orbairburst_explosion.DATA.inner_radius   = 4.2
orbairburst_explosion.DATA.outer_radius   = 5.0
orbairburst_explosion.DATA.stagger_radius = 6.0



-- //! =================================================
Apply_DamageSettings_Modifications(orbairburst_projdamage.DATA)
Apply_DamageSettings_Modifications(orbairburst_expldamage.DATA)
Apply_ExplosiveSettings_Modifications(orbairburst_explosion.DATA)



{$asm}
[DISABLE]
{$lua}


Apply_DamageSettings_Modifications(orbairburst_projdamage.backup)
Apply_DamageSettings_Modifications(orbairburst_expldamage.backup)
Apply_ExplosiveSettings_Modifications(orbairburst_explosion.backup)

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>332</ID>
                  <Description>"[𝐎𝐅𝐅𝐄𝐍𝐒𝐈𝐕𝐄] 𝐁𝐞𝐭𝐭𝐞𝐫 𝐎𝐫𝐛𝐢𝐭𝐚𝐥 𝐏𝐫𝐞𝐜𝐢𝐬𝐢𝐨𝐧 𝐒𝐭𝐫𝐢𝐤𝐞"</Description>
                  <Color>FFFF82</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.100
  Date   : 2024-09-28
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  TODO - Sorry, this is a quick hotfix, no time to write down something :c
}
{$lua}

orbprecision_explosion.DATA.inner_radius   = 7.0
orbprecision_explosion.DATA.outer_radius   = 12.0
orbprecision_explosion.DATA.stagger_radius = 13.0



-- //! =================================================
Apply_ExplosiveSettings_Modifications(orbprecision_explosion.DATA)



{$asm}
[DISABLE]
{$lua}


Apply_ExplosiveSettings_Modifications(orbprecision_explosion.backup)


</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>339</ID>
                  <Description>"[𝐎𝐅𝐅𝐄𝐍𝐒𝐈𝐕𝐄] 𝐁𝐞𝐭𝐭𝐞𝐫 𝐎𝐫𝐛𝐢𝐭𝐚𝐥 𝐑𝐚𝐢𝐥𝐜𝐚𝐧𝐧𝐨𝐧 𝐒𝐭𝐫𝐢𝐤𝐞"</Description>
                  <Color>FFFF82</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.100
  Date   : 2024-09-28
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  TODO - Sorry, this is a quick hotfix, no time to write down something :c
}
{$lua}

orbrailcannon_explosion.DATA.inner_radius   = 7.0
orbrailcannon_explosion.DATA.outer_radius   = 12.0
orbrailcannon_explosion.DATA.stagger_radius = 13.0



-- //! =================================================
Apply_ExplosiveSettings_Modifications(orbrailcannon_explosion.DATA)



{$asm}
[DISABLE]
{$lua}


Apply_ExplosiveSettings_Modifications(orbrailcannon_explosion.backup)


</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>317</ID>
                  <Description>"[𝐎𝐅𝐅𝐄𝐍𝐒𝐈𝐕𝐄] 𝟓𝟎𝟎 𝐤𝐠 𝐁𝐨𝐦𝐛"</Description>
                  <Color>FFFF82</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.100
  Date   : 2024-09-28
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  TODO - Sorry, this is a quick hotfix, no time to write down something :c
}
{$lua}
eagle500kg_damage.DATA.damage_std  = 3400
eagle500kg_damage.DATA.damage_drb  = 3400
eagle500kg_damage.DATA.ap_vals.ap1 = 9
eagle500kg_damage.DATA.ap_vals.ap2 = 9
eagle500kg_damage.DATA.ap_vals.ap3 = 9
eagle500kg_damage.DATA.ap_vals.ap4 = 9
eagle500kg_damage.DATA.demolition  = 65
eagle500kg_damage.DATA.momentum.knkback = 155
eagle500kg_damage.DATA.momentum.stagger = 155

eagle500kg_explosion.DATA.inner_radius   = 20
eagle500kg_explosion.DATA.outer_radius   = 26
eagle500kg_explosion.DATA.stagger_radius = 36

Apply_DamageSettings_Modifications(eagle500kg_damage.DATA)
Apply_ExplosiveSettings_Modifications(eagle500kg_explosion.DATA)


{$asm}
[DISABLE]
{$lua}

Apply_DamageSettings_Modifications(eagle500kg_damage.backup)
Apply_ExplosiveSettings_Modifications(eagle500kg_explosion.backup)

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>186</ID>
                  <Description>"[𝐎𝐅𝐅𝐄𝐍𝐒𝐈𝐕𝐄] 𝐁𝐞𝐭𝐭𝐞𝐫 𝟏𝟏𝟎𝐦𝐦 𝐩𝐨𝐝𝐬"</Description>
                  <Color>FFFF82</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.100
  Date   : 2024-09-28
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  TODO - Sorry, this is a quick hotfix, no time to write down something :c
}
{$lua}
eagle110m_projdamage.DATA.damage_std  = 1275
eagle110m_projdamage.DATA.damage_drb  = 1275
eagle110m_projdamage.DATA.ap_vals.ap1 = 9
eagle110m_projdamage.DATA.ap_vals.ap2 = 9
eagle110m_projdamage.DATA.ap_vals.ap3 = 9
eagle110m_projdamage.DATA.ap_vals.ap4 = 9
eagle110m_projdamage.DATA.demolition  = 55
eagle110m_projdamage.DATA.momentum.knkback = 155
eagle110m_projdamage.DATA.momentum.stagger = 155

eagle110m2_explosion.DATA.inner_radius   = 8
eagle110m2_explosion.DATA.outer_radius   = 10
eagle110m2_explosion.DATA.stagger_radius = 12



eagle110m_damage.DATA.damage_std  = 1275
eagle110m_damage.DATA.damage_drb  = 1275
eagle110m_damage.DATA.ap_vals.ap1 = 9
eagle110m_damage.DATA.ap_vals.ap2 = 9
eagle110m_damage.DATA.ap_vals.ap3 = 9
eagle110m_damage.DATA.ap_vals.ap4 = 9
eagle110m_damage.DATA.demolition  = 55
eagle110m_damage.DATA.momentum.knkback = 155
eagle110m_damage.DATA.momentum.stagger = 155

eagle110m_explosion.DATA.inner_radius   = 8
eagle110m_explosion.DATA.outer_radius   = 10
eagle110m_explosion.DATA.stagger_radius = 12

eagle110m_settings.DATA.uses = 6

Apply_DamageSettings_Modifications(eagle110m_damage.DATA)
Apply_ExplosiveSettings_Modifications(eagle110m_explosion.DATA)
Apply_DamageSettings_Modifications(eagle110m_projdamage.DATA)
Apply_ExplosiveSettings_Modifications(eagle110m2_explosion.DATA)
Apply_Stratagems_Modifications(eagle110m_settings.DATA)


{$asm}
[DISABLE]
{$lua}

Apply_DamageSettings_Modifications(eagle110m_damage.backup)
Apply_ExplosiveSettings_Modifications(eagle110m_explosion.backup)
Apply_DamageSettings_Modifications(eagle110m_projdamage.backup)
Apply_ExplosiveSettings_Modifications(eagle110m2_explosion.backup)
Apply_Stratagems_Modifications(eagle110m_settings.backup)

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>183</ID>
                  <Description>"[𝐎𝐅𝐅𝐄𝐍𝐒𝐈𝐕𝐄] 𝐈𝐦𝐩𝐫𝐨𝐯𝐞𝐝 𝐖𝐚𝐥𝐤𝐢𝐧𝐠 𝐁𝐚𝐫𝐫𝐚𝐠𝐞"</Description>
                  <Color>FFFF82</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.100
  Date   : 2024-09-28
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  TODO - Sorry, this is a quick hotfix, no time to write down something :c
}
{$lua}
--//! ======================= Orbital 380mm Barrage
orbwalking_bombardment.DATA.bomb_interval                = 1.25
orbwalking_bombardment.DATA.num_salvos                   = 6
orbwalking_bombardment.DATA.salvo_interval               = 1.625
orbwalking_bombardment.DATA.salvo_interval_random_offset = 1.125
orbwalking_bombardment.DATA.speed = 5



Apply_Bombardment_Modifications(orbwalking_bombardment.DATA)



{$asm}
[DISABLE]
{$lua}


Apply_Bombardment_Modifications(orbwalking_bombardment.backup)
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>322</ID>
                  <Description>"[𝐎𝐅𝐅𝐄𝐍𝐒𝐈𝐕𝐄] 𝐁𝐞𝐭𝐭𝐞𝐫 𝐎𝐫𝐛𝐢𝐭𝐚𝐥 𝐆𝐚𝐭𝐥𝐢𝐧𝐠 𝐁𝐚𝐫𝐫𝐚𝐠𝐞"</Description>
                  <Color>FFFF82</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.100
  Date   : 2024-09-28
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  TODO - Sorry, this is a quick hotfix, no time to write down something :c
}
{$lua}
orbgatling_projdamage.DATA.damage_std  = 768
orbgatling_projdamage.DATA.damage_drb  = 768
orbgatling_projdamage.DATA.ap_vals.ap1 = 5
orbgatling_projdamage.DATA.ap_vals.ap2 = 5
orbgatling_projdamage.DATA.ap_vals.ap3 = 5
orbgatling_projdamage.DATA.ap_vals.ap4 = 4
orbgatling_projdamage.DATA.demolition  = 40
orbgatling_projdamage.DATA.momentum.knkback = 55
orbgatling_projdamage.DATA.momentum.stagger = 55


orbgatling_expldamage.DATA.damage_std  = 550
orbgatling_expldamage.DATA.damage_drb  = 550
orbgatling_expldamage.DATA.ap_vals.ap1 = 5
orbgatling_expldamage.DATA.ap_vals.ap2 = 5
orbgatling_expldamage.DATA.ap_vals.ap3 = 5
orbgatling_expldamage.DATA.ap_vals.ap4 = 4
orbgatling_expldamage.DATA.demolition  = 40
orbgatling_expldamage.DATA.momentum.knkback = 70
orbgatling_expldamage.DATA.momentum.stagger = 70


orbgatling1_explosion.DATA.inner_radius   = 5.0
orbgatling1_explosion.DATA.outer_radius   = 7.5
orbgatling1_explosion.DATA.stagger_radius = 8.0



-- //! =================================================
Apply_DamageSettings_Modifications(orbgatling_projdamage.DATA)
Apply_DamageSettings_Modifications(orbgatling_expldamage.DATA)
Apply_ExplosiveSettings_Modifications(orbgatling1_explosion.DATA)



{$asm}
[DISABLE]
{$lua}


Apply_DamageSettings_Modifications(orbgatling_projdamage.backup)
Apply_DamageSettings_Modifications(orbgatling_expldamage.backup)
Apply_ExplosiveSettings_Modifications(orbgatling1_explosion.backup)


</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>338</ID>
                  <Description>"[𝐎𝐅𝐅𝐄𝐍𝐒𝐈𝐕𝐄] 𝐈𝐦𝐩𝐫𝐨𝐯𝐞𝐝 𝟑𝟖𝟎𝐦𝐦 and 𝟏𝟐𝟎𝐦𝐦 𝐛𝐚𝐫𝐫𝐚𝐠𝐞"</Description>
                  <Color>FFFF82</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.100
  Date   : 2024-09-28
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  TODO - Sorry, this is a quick hotfix, no time to write down something :c
}
{$lua}
--//! ======================= Orbital 380mm Barrage
orbital380_bombardment.DATA.num_bombs                    = 3
orbital380_bombardment.DATA.num_salvos                   = 6
orbital380_bombardment.DATA.salvo_interval               = 1.5
orbital380_bombardment.DATA.salvo_interval_random_offset = 1.15

orbital380_damage.DATA.damage_std  = 3700
orbital380_damage.DATA.damage_drb  = 3700
orbital380_damage.DATA.ap_vals.ap1 = 9
orbital380_damage.DATA.ap_vals.ap2 = 9
orbital380_damage.DATA.ap_vals.ap3 = 9
orbital380_damage.DATA.ap_vals.ap4 = 9
orbital380_damage.DATA.demolition  = 65
orbital380_damage.DATA.momentum.knkback = 155
orbital380_damage.DATA.momentum.stagger = 155

orbital380_explosion.DATA.inner_radius   = 12
orbital380_explosion.DATA.outer_radius   = 17
orbital380_explosion.DATA.stagger_radius = 25

orbital380v2_explosion.DATA.inner_radius   = 12
orbital380v2_explosion.DATA.outer_radius   = 17
orbital380v2_explosion.DATA.stagger_radius = 25



--//! ======================= Orbital 120mm Barrage
orbital120_bombardment.DATA.num_bombs                    = 3
orbital120_bombardment.DATA.num_salvos                   = 6
orbital120_bombardment.DATA.salvo_interval               = 1.5
orbital120_bombardment.DATA.salvo_interval_random_offset = 1.15

orbital120_damage.DATA.damage_std  = 3700
orbital120_damage.DATA.damage_drb  = 3700
orbital120_damage.DATA.ap_vals.ap1 = 9
orbital120_damage.DATA.ap_vals.ap2 = 9
orbital120_damage.DATA.ap_vals.ap3 = 9
orbital120_damage.DATA.ap_vals.ap4 = 9
orbital120_damage.DATA.demolition  = 60
orbital120_damage.DATA.momentum.knkback = 155
orbital120_damage.DATA.momentum.stagger = 155

orbital120_explosion.DATA.inner_radius   = 10
orbital120_explosion.DATA.outer_radius   = 14
orbital120_explosion.DATA.stagger_radius = 18

orbital120v2_explosion.DATA.inner_radius   = 10
orbital120v2_explosion.DATA.outer_radius   = 14
orbital120v2_explosion.DATA.stagger_radius = 18



Apply_Bombardment_Modifications(orbital380_bombardment.DATA)
Apply_DamageSettings_Modifications(orbital380_damage.DATA)
Apply_ExplosiveSettings_Modifications(orbital380_explosion.DATA)
Apply_ExplosiveSettings_Modifications(orbital380v2_explosion.DATA)

Apply_Bombardment_Modifications(orbital120_bombardment.DATA)
Apply_DamageSettings_Modifications(orbital120_damage.DATA)
Apply_ExplosiveSettings_Modifications(orbital120_explosion.DATA)
Apply_ExplosiveSettings_Modifications(orbital120v2_explosion.DATA)

{$asm}
[DISABLE]
{$lua}


Apply_Bombardment_Modifications(orbital380_bombardment.backup)
Apply_DamageSettings_Modifications(orbital380_damage.backup)
Apply_ExplosiveSettings_Modifications(orbital380_explosion.backup)
Apply_ExplosiveSettings_Modifications(orbital380v2_explosion.backup)

Apply_Bombardment_Modifications(orbital120_bombardment.backup)
Apply_DamageSettings_Modifications(orbital120_damage.backup)
Apply_ExplosiveSettings_Modifications(orbital120_explosion.backup)
Apply_ExplosiveSettings_Modifications(orbital120v2_explosion.backup)
</AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>287</ID>
              <Description>"【﻿ＡＲＭＯＲ　ＰＡＳＳＩＶＥＳ】"</Description>
              <Options moHideChildren="1" moManualExpandCollapse="1" moDeactivateChildrenAsWell="1"/>
              <Color>808000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{
    Game Name:     Helldivers 2
    Game Version:  1.001.203
    Author:        MEOWSISI || MIAUSISI
    Date:          2024-12-13
    Table Version: 3.0.0

    Explosive weapons
    -----------------

    This script initializes the data of the following weapons:

    GRENADES
    --------------------
    - G-6 Frag
    - G-12 HE

    WEAPONS
    ------------
    - Autocannon
    - Recoilless Rifle
}
[DISABLE]

</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>77</ID>
                  <Description>"[𝐃𝐄𝐌𝐎𝐂𝐑𝐀𝐂𝐘 𝐏𝐑𝐎𝐓𝐄𝐂𝐓𝐒] (𝐏𝐢𝐜𝐤 𝐨𝐧𝐞!)"</Description>
                  <Options moHideChildren="1" moManualExpandCollapse="1" moDeactivateChildrenAsWell="1"/>
                  <Color>FFFF82</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.100
  Date   : 2024-09-28
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  TODO - Sorry, this is a quick hotfix, no time to write down something :c
}
{$lua}
democracy_protects = RegisterPassive("378")
{$asm}

[DISABLE]

</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>290</ID>
                      <Description>"𝟕𝟓% 𝐏𝐫𝐨𝐛. 𝐭𝐨 𝐧𝐨𝐭 𝐝𝐢𝐞 𝐨𝐧 𝐥𝐞𝐭𝐡𝐚𝐥 𝐝𝐚𝐦𝐚𝐠𝐞."</Description>
                      <Color>FFFF82</Color>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.100
  Date   : 2024-09-28
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  TODO - Sorry, this is a quick hotfix, no time to write down something :c
}
{$lua}

democracy_protects.DATA.passive_1.mod_value = 75.0






Apply_Passive_Modifications(democracy_protects.DATA)

{$asm}
[DISABLE]
{$lua}
Apply_Passive_Modifications(democracy_protects.backup)

</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>378</ID>
                      <Description>"𝟏𝟎𝟎% 𝐏𝐫𝐨𝐛. 𝐭𝐨 𝐧𝐨𝐭 𝐝𝐢𝐞 𝐨𝐧 𝐥𝐞𝐭𝐡𝐚𝐥 𝐝𝐚𝐦𝐚𝐠𝐞."</Description>
                      <Color>FFFF82</Color>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.100
  Date   : 2024-09-28
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  TODO - Sorry, this is a quick hotfix, no time to write down something :c
}
{$lua}

democracy_protects.DATA.passive_1.mod_value = 100.0






Apply_Passive_Modifications(democracy_protects.DATA)

{$asm}
[DISABLE]
{$lua}
Apply_Passive_Modifications(democracy_protects.backup)

</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>80</ID>
                  <Description>"[𝐏𝐄𝐀𝐊 𝐏𝐇𝐘𝐒𝐈𝐐𝐔𝐄]"</Description>
                  <Options moHideChildren="1" moManualExpandCollapse="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
                  <Color>FFFF82</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.100
  Date   : 2024-09-28
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  TODO - Sorry, this is a quick hotfix, no time to write down something :c
}
{$lua}
peak_physique = RegisterPassive("460")
{$asm}

[DISABLE]

</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>79</ID>
                      <Description>"𝟐𝐱 𝐌𝐞𝐥𝐞𝐞 𝐝𝐚𝐦𝐚𝐠𝐞"</Description>
                      <Color>FFFF82</Color>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.100
  Date   : 2024-09-28
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  TODO - Sorry, this is a quick hotfix, no time to write down something :c
}
{$lua}
peak_physique.DATA.passive_1.mod_value = 3.0



Apply_Passive_Modifications(peak_physique.DATA)

{$asm}
[DISABLE]
{$lua}
Apply_Passive_Modifications(peak_physique.backup)

</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>82</ID>
                      <Description>"𝐁𝐞𝐭𝐭𝐞𝐫 𝐰𝐞𝐚𝐩𝐨𝐧 𝐝𝐫𝐚𝐠"</Description>
                      <Color>FFFF82</Color>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.100
  Date   : 2024-09-28
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  TODO - Sorry, this is a quick hotfix, no time to write down something :c
}
{$lua}

peak_physique.DATA.passive_2.mod_value = 0.5


Apply_Passive_Modifications(peak_physique.DATA)

{$asm}
[DISABLE]
{$lua}
Apply_Passive_Modifications(peak_physique.backup)

</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>78</ID>
                  <Description>"[𝐒𝐂𝐎𝐔𝐓]"</Description>
                  <Options moHideChildren="1" moManualExpandCollapse="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
                  <Color>FFFF82</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.100
  Date   : 2024-09-28
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  TODO - Sorry, this is a quick hotfix, no time to write down something :c
}
{$lua}
scout = RegisterPassive("52C")
{$asm}

[DISABLE]

</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>83</ID>
                      <Description>"𝐄𝐧𝐞𝐦𝐲 𝐝𝐞𝐭𝐞𝐜𝐭𝐢𝐨𝐧 𝐫𝐚𝐧𝐠𝐞 𝐝𝐞𝐜𝐫𝐞𝐚𝐬𝐞𝐝 𝐭𝐨 𝟗𝟎%"</Description>
                      <Color>FFFF82</Color>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.100
  Date   : 2024-09-28
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  TODO - Sorry, this is a quick hotfix, no time to write down something :c
}
{$lua}

scout.DATA.passive_2.mod_value = 0.1


Apply_Passive_Modifications(scout.DATA)

{$asm}
[DISABLE]
{$lua}
Apply_Passive_Modifications(scout.backup)

</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>95</ID>
                  <Description>"[𝐅𝐎𝐑𝐓𝐈𝐅𝐈𝐄𝐃]"</Description>
                  <Options moHideChildren="1" moManualExpandCollapse="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
                  <Color>FFFF82</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.100
  Date   : 2024-09-28
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  TODO - Sorry, this is a quick hotfix, no time to write down something :c
}
{$lua}
fortified = RegisterPassive("2B8")
{$asm}

[DISABLE]

</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>96</ID>
                      <Description>"𝐑𝐞𝐝𝐮𝐜𝐞𝐝 𝐫𝐞𝐜𝐨𝐢𝐥"</Description>
                      <Color>FFFF82</Color>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.100
  Date   : 2024-09-28
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  TODO - Sorry, this is a quick hotfix, no time to write down something :c
}
{$lua}

fortified.DATA.passive_1.mod_value = 0.25


Apply_Passive_Modifications(fortified.DATA)

{$asm}
[DISABLE]
{$lua}
Apply_Passive_Modifications(fortified.backup)

</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>97</ID>
                      <Description>"𝟏𝟎𝟎% 𝐑𝐞𝐬𝐢𝐬𝐭𝐚𝐧𝐜𝐞 𝐭𝐨 𝐄𝐱𝐩𝐥. 𝐃𝐌𝐆"</Description>
                      <Color>FFFF82</Color>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.100
  Date   : 2024-09-28
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  TODO - Sorry, this is a quick hotfix, no time to write down something :c
}
{$lua}

fortified.DATA.passive_2.mod_value = 0.0


Apply_Passive_Modifications(fortified.DATA)

{$asm}
[DISABLE]
{$lua}
Apply_Passive_Modifications(fortified.backup)

</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>98</ID>
                  <Description>"[𝐒𝐄𝐑𝐕𝐎 𝐀𝐒𝐒𝐈𝐒𝐓𝐄𝐃]"</Description>
                  <Options moHideChildren="1" moManualExpandCollapse="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
                  <Color>FFFF82</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.100
  Date   : 2024-09-28
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  TODO - Sorry, this is a quick hotfix, no time to write down something :c
}
{$lua}
servoass = RegisterPassive("58")
{$asm}

[DISABLE]

</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>99</ID>
                      <Description>"+𝟓𝟎% 𝐓𝐡𝐫𝐨𝐰𝐢𝐧𝐠 𝐫𝐚𝐧𝐠𝐞"</Description>
                      <Color>FFFF82</Color>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.100
  Date   : 2024-09-28
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  TODO - Sorry, this is a quick hotfix, no time to write down something :c
}
{$lua}

servoass.DATA.passive_1.mod_value = 1.5


Apply_Passive_Modifications(servoass.DATA)

{$asm}
[DISABLE]
{$lua}
Apply_Passive_Modifications(servoass.backup)

</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>100</ID>
                      <Description>"+𝟏𝟎𝟎% 𝐋𝐢𝐦𝐛 𝐇𝐞𝐚𝐥𝐭𝐡"</Description>
                      <Color>FFFF82</Color>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.100
  Date   : 2024-09-28
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  TODO - Sorry, this is a quick hotfix, no time to write down something :c
}
{$lua}

servoass.DATA.passive_2.mod_value = 2.0


Apply_Passive_Modifications(servoass.DATA)

{$asm}
[DISABLE]
{$lua}
Apply_Passive_Modifications(servoass.backup)

</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>292</ID>
                  <Description>"[𝐄𝐍𝐆. 𝐊𝐈𝐓]"</Description>
                  <Options moHideChildren="1" moManualExpandCollapse="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
                  <Color>FFFF82</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.100
  Date   : 2024-09-28
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  TODO - Sorry, this is a quick hotfix, no time to write down something :c
}
{$lua}
engkit = RegisterPassive("C0")
{$asm}

[DISABLE]

</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>293</ID>
                      <Description>"𝐑𝐞𝐝𝐮𝐜𝐞𝐝 𝐫𝐞𝐜𝐨𝐢𝐥"</Description>
                      <Color>FFFF82</Color>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.100
  Date   : 2024-09-28
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  TODO - Sorry, this is a quick hotfix, no time to write down something :c
}
{$lua}

engkit.DATA.passive_1.mod_value = 0.2


Apply_Passive_Modifications(engkit.DATA)

{$asm}
[DISABLE]
{$lua}
Apply_Passive_Modifications(engkit.backup)

</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>294</ID>
                      <Description>"+𝟑 𝐆𝐫𝐞𝐧𝐚𝐝𝐞𝐬"</Description>
                      <Color>FFFF82</Color>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.100
  Date   : 2024-09-28
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  TODO - Sorry, this is a quick hotfix, no time to write down something :c
}
{$lua}

engkit.DATA.passive_2.mod_value = 3


Apply_Passive_Modifications(engkit.DATA)

{$asm}
[DISABLE]
{$lua}
Apply_Passive_Modifications(engkit.backup)

</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>295</ID>
                  <Description>"[𝐌𝐄𝐃 𝐊𝐈𝐓]"</Description>
                  <Options moHideChildren="1" moManualExpandCollapse="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
                  <Color>FFFF82</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.100
  Date   : 2024-09-28
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  TODO - Sorry, this is a quick hotfix, no time to write down something :c
}
{$lua}
medkit = RegisterPassive("128")
{$asm}

[DISABLE]

</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>296</ID>
                      <Description>"+𝟑 𝐒𝐭𝐢𝐦𝐬"</Description>
                      <Color>FFFF82</Color>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.100
  Date   : 2024-09-28
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  TODO - Sorry, this is a quick hotfix, no time to write down something :c
}
{$lua}

medkit.DATA.passive_1.mod_value = 3


Apply_Passive_Modifications(medkit.DATA)

{$asm}
[DISABLE]
{$lua}
Apply_Passive_Modifications(medkit.backup)

</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>297</ID>
                      <Description>"+𝟔 𝐒𝐞𝐜𝐨𝐧𝐝𝐬 𝐨𝐟 𝐬𝐭𝐢𝐦 𝐝𝐮𝐫𝐚𝐭𝐢𝐨𝐧"</Description>
                      <Color>FFFF82</Color>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.100
  Date   : 2024-09-28
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  TODO - Sorry, this is a quick hotfix, no time to write down something :c
}
{$lua}

medkit.DATA.passive_2.mod_value = 6


Apply_Passive_Modifications(medkit.DATA)

{$asm}
[DISABLE]
{$lua}
Apply_Passive_Modifications(medkit.backup)

</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>300</ID>
                  <Description>"[𝐒𝐈𝐄𝐆𝐄 𝐑𝐄𝐀𝐃𝐘]"</Description>
                  <Options moHideChildren="1" moManualExpandCollapse="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
                  <Color>FFFF82</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.100
  Date   : 2024-09-28
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  TODO - Sorry, this is a quick hotfix, no time to write down something :c
}
{$lua}
siegeready = RegisterPassive("3E0")
{$asm}

[DISABLE]

</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>301</ID>
                      <Description>"+𝟓𝟎% 𝐫𝐞𝐥𝐨𝐚𝐝 𝐬𝐩𝐞𝐞𝐝 𝐨𝐟 𝐩𝐫𝐢𝐦𝐚𝐫𝐲 𝐰𝐞𝐚𝐩𝐨𝐧𝐬"</Description>
                      <Color>FFFF82</Color>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.100
  Date   : 2024-09-28
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  TODO - Sorry, this is a quick hotfix, no time to write down something :c
}
{$lua}

siegeready.DATA.passive_1.mod_value = 1.5


Apply_Passive_Modifications(siegeready.DATA)

{$asm}
[DISABLE]
{$lua}
Apply_Passive_Modifications(siegeready.backup)

</AssemblerScript>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>302</ID>
                      <Description>"+𝟓𝟎% 𝐚𝐦𝐦𝐨 𝐨𝐟 𝐩𝐫𝐢𝐦𝐚𝐫𝐲 𝐰𝐞𝐚𝐩𝐨𝐧𝐬"</Description>
                      <Color>FFFF82</Color>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.100
  Date   : 2024-09-28
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  TODO - Sorry, this is a quick hotfix, no time to write down something :c
}
{$lua}

siegeready.DATA.passive_2.mod_value = 1000.5


Apply_Passive_Modifications(siegeready.DATA)

{$asm}
[DISABLE]
{$lua}
Apply_Passive_Modifications(siegeready.backup)

</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
                <CheatEntry>
                  <ID>298</ID>
                  <Description>"[𝐀𝐂𝐂𝐋𝐈𝐌𝐀𝐓𝐄𝐃]"</Description>
                  <Options moHideChildren="1" moManualExpandCollapse="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
                  <Color>FFFF82</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.100
  Date   : 2024-09-28
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  TODO - Sorry, this is a quick hotfix, no time to write down something :c
}
{$lua}
acclimated = RegisterPassive("190")
{$asm}

[DISABLE]

</AssemblerScript>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>299</ID>
                      <Description>"+𝟗𝟎% 𝐫𝐞𝐬𝐢𝐬𝐭𝐚𝐧𝐜𝐞"</Description>
                      <Color>FFFF82</Color>
                      <VariableType>Auto Assembler Script</VariableType>
                      <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.100
  Date   : 2024-09-28
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  TODO - Sorry, this is a quick hotfix, no time to write down something :c
}
{$lua}

acclimated.DATA.passive_1.mod_value = 0.1
acclimated.DATA.passive_2.mod_value = 0.01


Apply_Passive_Modifications(acclimated.DATA)

{$asm}
[DISABLE]
{$lua}
Apply_Passive_Modifications(acclimated.backup)

</AssemblerScript>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>259</ID>
          <Description>"&gt;  𝐓𝐎𝐗𝐈𝐂 𝐖𝐀𝐑𝐁𝐎𝐍𝐃 𝐀𝐃𝐃-𝐎𝐍 &lt;"</Description>
          <Options moHideChildren="1" moManualExpandCollapse="1" moDeactivateChildrenAsWell="1"/>
          <Color>00DF00</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{
    Game Name:     Helldivers 2
    Game Version:  1.001.203
    Author:        MEOWSISI || MIAUSISI
    Date:          2024-12-13
    Table Version: 3.0.0

    Gas Arsenal
    -----------------
    This script initializes the data of the following weapons:

    SUPPORT
    --------------------
    - Gas Grenade
    - Orbital Gas Strike

    WEAPONS
    ------------
    - TR-14 Bullet Ant
    - SG-225TX Corrosive Breaker
    - Sterilizer
    - Dog Breath
}
{$lua}
-- //!         Please, DO!!! NOT!!! TOUCH!!! THIS!!! FILE!!!

-- //! ==============================================================
-- //! ===================    S U P P O R T     ===================
-- //! ==============================================================


-- //! ====================     Gas Grenade     ===================
gasgrenade_damage = Read_DamageSettings_Data(307)
gasgrenade_explosion = Read_ExplosiveSettings_Data(171)

-- //! ================ Orbital Gas
orbitalgas_damage = Read_DamageSettings_Data(306)
orbitalgas_explosion = Read_ExplosiveSettings_Data(112)

-- //! ==============================================================
-- //! ===================    W E A P O N S     ===================
-- //! ==============================================================

-- //! ================ TX-14 STINGER (replaces Adjudicator)
adjudicator_damage        = Read_DamageSettings_Data(80)
adjudicator_projectile    = Read_ProjectileInfo_Data(165, 6912088101323449320)
adjudicator_weaponinfo    = Read_WeaponInfo_Data(6912088101323449320)
adjudicator_magazine      = Read_Magazine_Data(6912088101323449320)
adjudicator_customization = Read_WeaponCustomization_Data(6912088101323449320)

-- //! ================ SG-225TX Corrosive Breaker
toxbreaker_damage        = Read_DamageSettings_Data(115)
toxbreaker_projectile    = Read_ProjectileInfo_Data(201, 6826025955225526457)
toxbreaker_weaponinfo    = Read_WeaponInfo_Data(6826025955225526457)
toxbreaker_tagdata       = Read_TagsInfo_Data(6826025955225526457)
toxbreaker_customization = Read_WeaponCustomization_Data(6826025955225526457)

-- //! ================  Sterilizer
sterilizer_damage   = Read_DamageSettings_Data(12)
sterilizer_magazine = Read_Magazine_Data(9869105320050739364)

-- //! ================  Dog Breath
dogbreath_damage = Read_DamageSettings_Data(13)


{$asm}
[DISABLE]

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>260</ID>
              <Description>"[𝐆𝐑𝐄𝐍𝐀𝐃𝐄𝐒] 𝐆-𝟒 𝐆𝐚𝐬"</Description>
              <Color>80FF80</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{
/*
    Game Name:     Helldivers 2
    Game Version:  1.001.203
    Author:        MEOWSISI || MIAUSISI
    Date:          2024-12-13
    Table Version: 3.0.0

    G-4 Gas Grenade
    ----------------
*/
}
{$lua}

gasgrenade_damage.DATA.damage_std  = 75
gasgrenade_damage.DATA.damage_drb  = 75
gasgrenade_damage.DATA.ap_vals.ap1 = 6
gasgrenade_damage.DATA.ap_vals.ap2 = 6
gasgrenade_damage.DATA.ap_vals.ap3 = 6
gasgrenade_damage.DATA.ap_vals.ap4 = 6
gasgrenade_damage.DATA.demolition  = 35
gasgrenade_damage.DATA.momentum.knkback = 15
gasgrenade_damage.DATA.momentum.stagger = 15
gasgrenade_damage.DATA.stt_eff_1.target_type = 15
gasgrenade_damage.DATA.stt_eff_1.target_time = 100.0
gasgrenade_damage.DATA.stt_eff_2.target_type = 42
gasgrenade_damage.DATA.stt_eff_2.target_time = 100.0
gasgrenade_damage.DATA.stt_eff_3.target_type = 43
gasgrenade_damage.DATA.stt_eff_3.target_time = 100.0
gasgrenade_damage.DATA.stt_eff_4.target_type = 54
gasgrenade_damage.DATA.stt_eff_4.target_time = 100.0

gasgrenade_explosion.DATA.inner_radius   = 5
gasgrenade_explosion.DATA.outer_radius   = 7.5
gasgrenade_explosion.DATA.stagger_radius = 8.5

Apply_DamageSettings_Modifications(gasgrenade_damage.DATA)
Apply_ExplosiveSettings_Modifications(gasgrenade_explosion.DATA)


{$asm}

[DISABLE]
{$lua}
Apply_DamageSettings_Modifications(gasgrenade_damage.backup)
Apply_ExplosiveSettings_Modifications(gasgrenade_explosion.backup)

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>3</ID>
              <Description>"[𝐑𝐈𝐅𝐋𝐄𝐒] 𝐁𝐑-𝟏𝟒 𝐀𝐝𝐣𝐮𝐝𝐢𝐜𝐚𝐭𝐨𝐫"</Description>
              <Options moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
              <Color>40FF00</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{
    /*
    Game Name:     Helldivers 2
    Game Version:  1.001.203
    Author:        MEOWSISI || MIAUSISI
    Date:          2024-12-13
    Table Version: 3.0.0

    BR-14 Adjudicator
    -----------------

    EXCELS AT:
    -  High damage output
    -  High armor penetration
    -  Armor corrosion capabilites.
    -  Long-range combat.

    MEDIOCRE AT:
    - Close-quarters combat.

    CHANGELOG:
    - Adjusted damage to 98||98.
    - Increased Armor Pen. values to 5||4||4||4.
    - Added armor corrosion effects.
    - Increased projectile speed to 3300, and reduced air resistance to 0.
    - Increased magazine size to 35.
    - Improved scope responsiveness and ergonomics.

    COMMENTS FROM DEVELOPMENT:
    - The Adjudicator is the go-to weapon for fighting at long-range, without
      sacrificing mid-range capabilites.
    - The weapon truly shines when fighting against heavily armored enemies, as
      its high armor penetration values and armor corrosion effects make it a
      nightmare for them.
    */
}

{$lua}
-- //! ==========          You can adjust the values here:
adjudicator_damage.DATA.damage_std = 70
adjudicator_damage.DATA.damage_drb = 70
adjudicator_damage.DATA.ap_vals.ap1 = 5
adjudicator_damage.DATA.ap_vals.ap2 = 4
adjudicator_damage.DATA.ap_vals.ap3 = 4
adjudicator_damage.DATA.ap_vals.ap4 = 4
adjudicator_damage.DATA.momentum.stagger = 10
adjudicator_damage.DATA.momentum.knkback = 10
adjudicator_damage.DATA.elem_type        = 5
adjudicator_damage.DATA.stt_eff_1.target_type = 15
adjudicator_damage.DATA.stt_eff_1.target_time = 100.0
adjudicator_damage.DATA.stt_eff_2.target_type = 42
adjudicator_damage.DATA.stt_eff_2.target_time = 100.0
adjudicator_damage.DATA.stt_eff_3.target_type = 43
adjudicator_damage.DATA.stt_eff_3.target_time = 100.0
adjudicator_damage.DATA.stt_eff_4.target_type = 54
adjudicator_damage.DATA.stt_eff_4.target_time = 100.0

adjudicator_projectile.DATA.speed = 3900
adjudicator_projectile.DATA.drag  = 0.0
adjudicator_projectile.DATA.gravity_multiplier   = 0.0
adjudicator_projectile.DATA.penetration_slowdown = 0.166
adjudicator_magazine.DATA.magazine_size = 35

adjudicator_weaponinfo.DATA.handling.scope_responsiveness = 90.0
adjudicator_weaponinfo.DATA.handling.ergonomics = 98.0
adjudicator_weaponinfo.DATA.handling.scope_sway = 0.0
adjudicator_weaponinfo.DATA.handling.sway_multiplier = 0.0

adjudicator_customization.DATA.slot4.slot_type = 3
adjudicator_customization.DATA.slot4.slot_info = 242494116

-- //! =======================================================
-- //!               DO NOT CHANGE the code below:
-- //! =======================================================
Apply_DamageSettings_Modifications(adjudicator_damage.DATA)
Apply_ProjectileInfo_Modifications(adjudicator_projectile.DATA)
Apply_WeaponInfo_Modifications(adjudicator_weaponinfo.DATA)
Apply_MagazineSettings_Modifications(adjudicator_magazine.DATA)
Apply_WeaponCustomization_Modifications(adjudicator_customization.DATA)

{$asm}
[DISABLE]
{$lua}

Apply_DamageSettings_Modifications(adjudicator_damage.backup)
Apply_ProjectileInfo_Modifications(adjudicator_projectile.backup)
Apply_WeaponInfo_Modifications(adjudicator_weaponinfo.backup)
Apply_MagazineSettings_Modifications(adjudicator_magazine.backup)
Apply_WeaponCustomization_Modifications(adjudicator_customization.backup)

</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>354</ID>
                  <Description>"[EXPERIMENTAL] Name &amp;&amp; description changes"</Description>
                  <Color>40FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
/*
    Game Name:     Helldivers 2
    Game Version:  1.001.203
    Author:        MEOWSISI || MIAUSISI
    Date:          2024-12-13
    Table Version: 3.0.0

    SG-225TX Corrosive Breaker
    ----------------
*/
}

TextInit2 + B1F5:
  db 'STINGER    '
TextInit2 + 130FC:
  db 'TX-14'
TextInit2 + 833D:
  db 'The TX-14 STINGER is a modification of the BR-14 Adjudicator, better suited for mid-range and long-range combat. In addition to caustic rounds, bullets now mantain proper altitude when fired. '

[DISABLE]

TextInit2 + B1F5:
  db 'ADJUDICATOR'
TextInit2 + 130FC:
  db 'BR-14'
TextInit2 + 833D:
  db 'An accurate, armor-penetrating rifle, the BR-14 Adjudicator delivers righteous judgement to medium-sized enemies, though its restrictive magazine limits its effectiveness against large groups.'

</AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>261</ID>
              <Description>"[𝐒𝐇𝐎𝐓𝐆𝐔𝐍] 𝐒𝐆-𝟐𝟐𝟓𝐓𝐗 𝐂𝐨𝐫𝐫𝐨𝐬𝐢𝐯𝐞 𝐁𝐫𝐞𝐚𝐤𝐞𝐫 (𝐫𝐞𝐩𝐥𝐚𝐜𝐞𝐬 𝐁𝐫. 𝐒𝐩𝐫𝐚𝐲&amp;𝐏𝐫𝐚𝐲)"</Description>
              <Options moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
              <Color>40FF00</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{
/*
    Game Name:     Helldivers 2
    Game Version:  1.001.203
    Author:        MEOWSISI || MIAUSISI
    Date:          2024-12-13
    Table Version: 3.0.0

    SG-225TX Corrosive Breaker
    ----------------
*/
}
{$lua}

toxbreaker_damage.DATA.damage_std = 6
toxbreaker_damage.DATA.damage_drb = 2
toxbreaker_damage.DATA.ap_vals.ap1 = 5
toxbreaker_damage.DATA.ap_vals.ap2 = 5
toxbreaker_damage.DATA.ap_vals.ap3 = 5
toxbreaker_damage.DATA.ap_vals.ap4 = 5
toxbreaker_damage.DATA.momentum.knkback = 10
toxbreaker_damage.DATA.momentum.stagger = 10
toxbreaker_damage.DATA.stt_eff_1.target_type = 15
toxbreaker_damage.DATA.stt_eff_1.target_time = 100.0
toxbreaker_damage.DATA.stt_eff_2.target_type = 42
toxbreaker_damage.DATA.stt_eff_2.target_time = 100.0
toxbreaker_damage.DATA.stt_eff_3.target_type = 43
toxbreaker_damage.DATA.stt_eff_3.target_time = 100.0
toxbreaker_damage.DATA.stt_eff_4.target_type = 54
toxbreaker_damage.DATA.stt_eff_4.target_time = 100.0

toxbreaker_projectile.DATA.calibre = 12
toxbreaker_projectile.DATA.mass    = 2
toxbreaker_projectile.DATA.speed   = 2000
toxbreaker_projectile.DATA.drag    = 0.0
toxbreaker_projectile.DATA.life_time = 1.0
toxbreaker_projectile.DATA.num_projectiles      = 48
toxbreaker_projectile.DATA.penetration_slowdown = 0.5
toxbreaker_projectile.DATA.gravity_multiplier   = 0.0


toxbreaker_weaponinfo.DATA.spread.infox = 395
toxbreaker_weaponinfo.DATA.spread.infoy = 325
toxbreaker_weaponinfo.DATA.spread.multipx = 1.0
toxbreaker_weaponinfo.DATA.spread.multipy = 1.0

toxbreaker_tagdata.DATA.tag2 = 1865818670
toxbreaker_customization.DATA.slot6.slot_type = 3
toxbreaker_customization.DATA.slot6.slot_info = 242494116

Apply_DamageSettings_Modifications(toxbreaker_damage.DATA)
Apply_ProjectileInfo_Modifications(toxbreaker_projectile.DATA)
Apply_WeaponInfo_Modifications(toxbreaker_weaponinfo.DATA)
Apply_TagsInfo_Modifications(toxbreaker_tagdata.DATA)
Apply_WeaponCustomization_Modifications(toxbreaker_customization.DATA)

{$asm}
[DISABLE]
{$lua}


Apply_DamageSettings_Modifications(toxbreaker_damage.backup)
Apply_ProjectileInfo_Modifications(toxbreaker_projectile.backup)
Apply_WeaponInfo_Modifications(toxbreaker_weaponinfo.backup)
Apply_TagsInfo_Modifications(toxbreaker_tagdata.backup)
Apply_WeaponCustomization_Modifications(toxbreaker_customization.backup)
</AssemblerScript>
              <CheatEntries>
                <CheatEntry>
                  <ID>352</ID>
                  <Description>"[EXPERIMENTAL] Name &amp;&amp; description changes"</Description>
                  <Color>40FF00</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
{
/*
    Game Name:     Helldivers 2
    Game Version:  1.001.203
    Author:        MEOWSISI || MIAUSISI
    Date:          2024-12-13
    Table Version: 3.0.0

    SG-225TX Corrosive Breaker
    ----------------
*/
}

TextInit2 + 132B6:
  db 'SG-225TX'
TextInit2 + 13F0C:
  db 'CORROSIVE BREAKER '
TextInit2 + EC82:
  db 'This Breaker shoots poisonous pellets, disorienting enemies and corroding both organic and synthetic tissue. '

[DISABLE]

TextInit2 + 132B6:
  db 'SG-225SP'
TextInit2 + 13F0C:
  db 'BREAKER SPRAY&amp;PRAY'
TextInit2 + EC82:
  db 'A modified Breaker shotgun firing birdshot, small pellets which saturate an area to clear up smaller targets.'

</AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>262</ID>
              <Description>"[𝐒𝐔𝐏𝐏𝐎𝐑𝐓] 𝐒𝐭𝐞𝐫𝐢𝐥𝐢𝐳𝐞𝐫"</Description>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.203
  Date   : 2024-12-07
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  Sterilizer
  --------------------
}
{$lua}

sterilizer_damage.DATA.damage_std = 8
sterilizer_damage.DATA.damage_drb = 8
sterilizer_damage.DATA.ap_vals.ap1 = 7
sterilizer_damage.DATA.ap_vals.ap2 = 7
sterilizer_damage.DATA.ap_vals.ap3 = 7
sterilizer_damage.DATA.ap_vals.ap4 = 7
sterilizer_damage.DATA.momentum.knkback = 30
sterilizer_damage.DATA.momentum.stagger = 30
sterilizer_damage.DATA.stt_eff_1.target_type = 42
sterilizer_damage.DATA.stt_eff_1.target_time = 0.5
sterilizer_damage.DATA.stt_eff_2.target_type = 43
sterilizer_damage.DATA.stt_eff_2.target_time = 100.0
sterilizer_damage.DATA.stt_eff_3.target_type = 54
sterilizer_damage.DATA.stt_eff_3.target_time = 100.0

sterilizer_magazine.DATA.magazine_size = 140
sterilizer_magazine.DATA.magazine = 3
sterilizer_magazine.DATA.magazine_refill = 6
sterilizer_magazine.DATA.magazine_max = 4

Apply_DamageSettings_Modifications(sterilizer_damage.DATA)
Apply_MagazineSettings_Modifications(sterilizer_magazine.DATA)


{$asm}
[DISABLE]
{$lua}

Apply_DamageSettings_Modifications(sterilizer_damage.backup)
Apply_MagazineSettings_Modifications(sterilizer_magazine.backup)

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>263</ID>
              <Description>"[𝐒𝐔𝐏𝐏𝐎𝐑𝐓] 𝟏𝟎𝟎% 𝐆𝐚𝐬 𝐑𝐞𝐬𝐢𝐬𝐭𝐚𝐧𝐜𝐞"</Description>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.203
  Date   : 2024-12-07
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  100% Gas Resistance
  --------------------
}
{$lua}
fart_immune = RegisterPassive("320")
fart_immune.DATA.passive_1.mod_value = 0.0


Apply_Passive_Modifications(fart_immune.DATA)

{$asm}
[DISABLE]
{$lua}
Apply_Passive_Modifications(fart_immune.backup)

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>362</ID>
              <Description>"[𝐒𝐔𝐏𝐏𝐎𝐑𝐓] 𝐆𝐚𝐬 𝐒𝐭𝐚𝐭𝐮𝐬 𝐄𝐟𝐟𝐞𝐜𝐭 𝐫𝐞𝐰𝐨𝐫𝐤"</Description>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.203
  Date   : 2024-12-07
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  FLAM-40 Flamethrower
  --------------------
}
{$lua}
gas_dps_statuseff = Read_StatusEffect_Data(41)
gas_cfx_statuseff = Read_StatusEffect_Data(43)
corrosion_statuseff = Read_StatusEffect_Data(53)

gas_dps_damage = Read_DamageSettings_Data(360)


gas_dps_damage.DATA.damage_std = 25
gas_dps_damage.DATA.damage_drb = 25
gas_dps_damage.DATA.ap_vals.ap1 = 6
gas_dps_damage.DATA.ap_vals.ap2 = 6
gas_dps_damage.DATA.ap_vals.ap3 = 6
gas_dps_damage.DATA.ap_vals.ap4 = 6
Set_DamageElement_Type(gas_dps_damage.DATA, "GAS")
gas_dps_damage.DATA.stt_eff_2.target_type = 0
gas_dps_damage.DATA.stt_eff_2.target_time = 0

gas_dps_statuseff.DATA.strength = 0.75
gas_dps_statuseff.DATA.duration = 15

corrosion_statuseff.DATA.strength = 5
corrosion_statuseff.DATA.duration = 15

gas_cfx_statuseff.DATA.strength = 0.75
gas_cfx_statuseff.DATA.duration = 15

Apply_DamageSettings_Modifications(gas_dps_damage.DATA)

Apply_StatusEffect_Modifications(gas_dps_statuseff.DATA)
Apply_StatusEffect_Modifications(gas_cfx_statuseff.DATA)
Apply_StatusEffect_Modifications(corrosion_statuseff.DATA)

{$asm}
[DISABLE]
{$lua}


Apply_DamageSettings_Modifications(gas_dps_damage.backup)

Apply_StatusEffect_Modifications(gas_dps_statuseff.backup)
Apply_StatusEffect_Modifications(gas_cfx_statuseff.backup)
Apply_StatusEffect_Modifications(corrosion_statuseff.backup)



</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>242</ID>
          <Description>"&gt;  𝐅𝐈𝐑𝐄 𝐖𝐀𝐑𝐁𝐎𝐍𝐃 𝐀𝐃𝐃-𝐎𝐍 &lt;"</Description>
          <Options moHideChildren="1" moManualExpandCollapse="1" moDeactivateChildrenAsWell="1"/>
          <Color>0E35F1</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{
    Game Name:     Helldivers 2
    Game Version:  1.001.203
    Author:        MEOWSISI || MIAUSISI
    Date:          2024-12-13
    Table Version: 3.0.0

    Incendiary Weapons
    -----------------

    This script initializes the data of the following weapons:

    GRENADES
    --------------------
    - G-10 Incendiary
    - G-13 Incendiary Impact

    WEAPONS
    ------------
    - P-72 Crisper
    - FLAM-66 Torcher
    - FLAM-40 Flamethrower
}
{$lua}
-- //!         Please, DO!!! NOT!!! TOUCH!!! THIS!!! FILE!!!

-- //! ==============================================================
-- //! ===================    G R E N A D E S     ===================
-- //! ==============================================================


-- //! ====================     G-10 Incendiary     ===================
g10inc_expl_damage = Read_DamageSettings_Data(231)
g10inc_explosion   = Read_ExplosiveSettings_Data(49)

-- //! ================ G-13 Incendiary Impact
g13inc_expl_damage = Read_DamageSettings_Data(232)
g13inc_explosion   = Read_ExplosiveSettings_Data(50)


-- //! ==============================================================
-- //! ===================    W E A P O N S     ===================
-- //! ==============================================================

-- //! ================ P-72 Crisper ================
crisper_damage   = Read_DamageSettings_Data(11)
crisper_magazine = Read_Magazine_Data(4580928717960105129)
-- //! ================ FLAM-66 Torcher ================
torcher_damage   = Read_DamageSettings_Data(10)
torcher_magazine = Read_Magazine_Data(5742363029208942635)

-- //! ================ FLAM-40 Flamethrower ================
flamethrower_damage   = Read_DamageSettings_Data(9)
flamethrower_magazine = Read_Magazine_Data(4155583896232633279)

-- //! =============== PASSIVE
fireres = RegisterPassive("260")
{$asm}
[DISABLE]

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>282</ID>
              <Description>"[𝐒𝐈𝐃𝐄𝐀𝐑𝐌] 𝐏-𝟕𝟐 𝐂𝐫𝐢𝐬𝐩𝐞𝐫"</Description>
              <Color>4080FF</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.100
  Date   : 2024-09-28
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  P-72 Crisper
  ------------
  DamageInfoType_Projectile_Flamethrower_FlamerPistol
}
{$lua}

crisper_damage.DATA.damage_std = 4
crisper_damage.DATA.damage_drb = 4
crisper_damage.DATA.ap_vals.ap1 = 6
crisper_damage.DATA.ap_vals.ap2 = 6
crisper_damage.DATA.ap_vals.ap3 = 6
crisper_damage.DATA.ap_vals.ap4 = 6
crisper_damage.DATA.momentum.knkback = 10
crisper_damage.DATA.momentum.stagger = 10
crisper_damage.DATA.stt_eff_1.target_time = 100
crisper_damage.DATA.stt_eff_2.target_type = 32
crisper_damage.DATA.stt_eff_2.target_time = 100

crisper_magazine.DATA.magazine_size = 90
crisper_magazine.DATA.magazine = 3
crisper_magazine.DATA.magazine_refill = 6
crisper_magazine.DATA.magazine_max = 4

Apply_DamageSettings_Modifications(crisper_damage.DATA)
Apply_MagazineSettings_Modifications(crisper_magazine.DATA)


{$asm}
[DISABLE]
{$lua}

Apply_DamageSettings_Modifications(crisper_damage.backup)
Apply_MagazineSettings_Modifications(crisper_magazine.backup)

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>280</ID>
              <Description>"[𝐆𝐑𝐄𝐍𝐀𝐃𝐄𝐒] 𝐆-𝟏𝟎 𝐈𝐧𝐜𝐞𝐧𝐝𝐢𝐚𝐫𝐲"</Description>
              <Color>4080FF</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.203
  Date   : 2024-12-07
  Author : MIAUSISI

  G-10 Incendiary
  ---------------
  - DamageInfoType_Explosion_HandGrenade_Incendiary_Impact
}
{$lua}

-- G-10 Incendiary Grenade
g10inc_expl_damage.DATA.damage_std  = 133
g10inc_expl_damage.DATA.damage_drb  = 133
g10inc_expl_damage.DATA.ap_vals.ap1 = 6
g10inc_expl_damage.DATA.ap_vals.ap2 = 6
g10inc_expl_damage.DATA.ap_vals.ap3 = 6
g10inc_expl_damage.DATA.ap_vals.ap4 = 6
g10inc_expl_damage.DATA.ap_vals.ap4 = 6
g10inc_expl_damage.DATA.stt_eff_2.target_type = 32
g10inc_expl_damage.DATA.stt_eff_2.target_time = 100
g10inc_expl_damage.DATA.stt_eff_3.target_type = 37
g10inc_expl_damage.DATA.stt_eff_3.target_time = 1.0

g10inc_explosion.DATA.inner_radius   = 6.5
g10inc_explosion.DATA.outer_radius   = 8.0
g10inc_explosion.DATA.stagger_radius = 9.0

Apply_DamageSettings_Modifications(g10inc_expl_damage.DATA)
Apply_ExplosiveSettings_Modifications(g10inc_explosion.DATA)


{$asm}

[DISABLE]
{$lua}
Apply_DamageSettings_Modifications(g10inc_expl_damage.backup)
Apply_ExplosiveSettings_Modifications(g10inc_explosion.backup)


</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>281</ID>
              <Description>"[𝐆𝐑𝐄𝐍𝐀𝐃𝐄𝐒] 𝐆-𝟏𝟑 𝐈𝐧𝐜𝐞𝐧𝐝𝐢𝐚𝐫𝐲 𝐈𝐦𝐩𝐚𝐜𝐭"</Description>
              <Color>4080FF</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.100
  Date   : 2024-09-28
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  TODO - Sorry, this is a quick hotfix, no time to write down something :c
}
{$lua}

-- G-10 Incendiary Grenade
g13inc_expl_damage.DATA.damage_std  = 133
g13inc_expl_damage.DATA.damage_drb  = 133
g13inc_expl_damage.DATA.ap_vals.ap1 = 6
g13inc_expl_damage.DATA.ap_vals.ap2 = 6
g13inc_expl_damage.DATA.ap_vals.ap3 = 6
g13inc_expl_damage.DATA.ap_vals.ap4 = 6
g13inc_expl_damage.DATA.ap_vals.ap4 = 6
g13inc_expl_damage.DATA.stt_eff_2.target_type = 32
g13inc_expl_damage.DATA.stt_eff_2.target_time = 100
g13inc_expl_damage.DATA.stt_eff_3.target_type = 37
g13inc_expl_damage.DATA.stt_eff_3.target_time = 1.0

g13inc_explosion.DATA.inner_radius   = 8.0
g13inc_explosion.DATA.outer_radius   = 9.5
g13inc_explosion.DATA.stagger_radius = 11.0

Apply_DamageSettings_Modifications(g13inc_expl_damage.DATA)
Apply_ExplosiveSettings_Modifications(g13inc_explosion.DATA)


{$asm}

[DISABLE]
{$lua}
Apply_DamageSettings_Modifications(g13inc_expl_damage.backup)
Apply_ExplosiveSettings_Modifications(g13inc_explosion.backup)

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>283</ID>
              <Description>"[𝐏𝐑𝐈𝐌𝐀𝐑𝐘] 𝐅𝐋𝐀𝐌-𝟔𝟔 𝐓𝐨𝐫𝐜𝐡𝐞𝐫"</Description>
              <Color>8080FF</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.203
  Date   : 2024-09-28
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  FLAM-66 Torcher
  ---------------
  - DamageInfoType_Projectile_Flamethrower_Ripley
}
{$lua}

torcher_damage.DATA.damage_std = 5
torcher_damage.DATA.damage_drb = 5
torcher_damage.DATA.ap_vals.ap1 = 6
torcher_damage.DATA.ap_vals.ap2 = 6
torcher_damage.DATA.ap_vals.ap3 = 6
torcher_damage.DATA.ap_vals.ap4 = 6
torcher_damage.DATA.momentum.knkback = 10
torcher_damage.DATA.momentum.stagger = 10
torcher_damage.DATA.stt_eff_1.target_time = 100
torcher_damage.DATA.stt_eff_2.target_type = 32
torcher_damage.DATA.stt_eff_2.target_time = 100

torcher_magazine.DATA.magazine_size = 200
torcher_magazine.DATA.magazine = 3
torcher_magazine.DATA.magazine_refill = 6
torcher_magazine.DATA.magazine_max = 6

Apply_DamageSettings_Modifications(torcher_damage.DATA)
Apply_MagazineSettings_Modifications(torcher_magazine.DATA)


{$asm}
[DISABLE]
{$lua}

Apply_DamageSettings_Modifications(torcher_damage.backup)
Apply_MagazineSettings_Modifications(torcher_magazine.backup)

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>284</ID>
              <Description>"[𝐒𝐔𝐏𝐏𝐎𝐑𝐓] 𝐅𝐋𝐀𝐌-𝟒𝟎 𝐅𝐥𝐚𝐦𝐞𝐭𝐡𝐫𝐨𝐰𝐞𝐫"</Description>
              <Color>0000FF</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.203
  Date   : 2024-12-07
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  FLAM-40 Flamethrower
  --------------------
}
{$lua}

flamethrower_damage.DATA.damage_std = 6
flamethrower_damage.DATA.damage_drb = 6
flamethrower_damage.DATA.ap_vals.ap1 = 7
flamethrower_damage.DATA.ap_vals.ap2 = 7
flamethrower_damage.DATA.ap_vals.ap3 = 7
flamethrower_damage.DATA.ap_vals.ap4 = 7
flamethrower_damage.DATA.momentum.knkback = 30
flamethrower_damage.DATA.momentum.stagger = 30
flamethrower_damage.DATA.stt_eff_1.target_time = 100
flamethrower_damage.DATA.stt_eff_2.target_type = 32
flamethrower_damage.DATA.stt_eff_2.target_time = 100

flamethrower_magazine.DATA.magazine_size = 300
flamethrower_magazine.DATA.magazine = 3
flamethrower_magazine.DATA.magazine_refill = 6
flamethrower_magazine.DATA.magazine_max = 4

Apply_DamageSettings_Modifications(flamethrower_damage.DATA)
Apply_MagazineSettings_Modifications(flamethrower_magazine.DATA)


{$asm}
[DISABLE]
{$lua}

Apply_DamageSettings_Modifications(flamethrower_damage.backup)
Apply_MagazineSettings_Modifications(flamethrower_magazine.backup)

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>303</ID>
              <Description>"[𝐒𝐔𝐏𝐏𝐎𝐑𝐓] 𝟏𝟎𝟎% 𝐅𝐢𝐫𝐞 𝐫𝐞𝐬𝐢𝐬𝐭𝐚𝐧𝐜𝐞"</Description>
              <Color>0000FF</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.203
  Date   : 2024-12-07
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  FLAM-40 Flamethrower
  --------------------
}
{$lua}

fireres.DATA.passive_1.mod_value = 0.0001


Apply_Passive_Modifications(fireres.DATA)

{$asm}
[DISABLE]
{$lua}
Apply_Passive_Modifications(fireres.backup)

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>361</ID>
              <Description>"[𝐒𝐔𝐏𝐏𝐎𝐑𝐓] 𝐅𝐢𝐫𝐞 𝐒𝐭𝐚𝐭𝐮𝐬 𝐄𝐟𝐟𝐞𝐜𝐭 𝐫𝐞𝐰𝐨𝐫𝐤"</Description>
              <Color>0000FF</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.203
  Date   : 2024-12-07
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  FLAM-40 Flamethrower
  --------------------
}
{$lua}
normal_fire_statuseff = Read_StatusEffect_Data(5)
strong_fire_statuseff = Read_StatusEffect_Data(31)

normal_fire_dps_damage = Read_DamageSettings_Data(349)
strong_fire_dps_damage = Read_DamageSettings_Data(355)


normal_fire_dps_damage.DATA.damage_std = 50
normal_fire_dps_damage.DATA.damage_drb = 50
normal_fire_dps_damage.DATA.ap_vals.ap1 = 4
normal_fire_dps_damage.DATA.ap_vals.ap2 = 4
normal_fire_dps_damage.DATA.ap_vals.ap3 = 4
normal_fire_dps_damage.DATA.ap_vals.ap4 = 4


strong_fire_dps_damage.DATA.damage_std = 200
strong_fire_dps_damage.DATA.damage_drb = 200
strong_fire_dps_damage.DATA.ap_vals.ap1 = 6
strong_fire_dps_damage.DATA.ap_vals.ap2 = 6
strong_fire_dps_damage.DATA.ap_vals.ap3 = 5
strong_fire_dps_damage.DATA.ap_vals.ap4 = 5


normal_fire_statuseff.DATA.strength = 5
normal_fire_statuseff.DATA.duration = 5

strong_fire_statuseff.DATA.strength = 5
strong_fire_statuseff.DATA.duration = 10

Apply_DamageSettings_Modifications(normal_fire_dps_damage.DATA)
Apply_DamageSettings_Modifications(strong_fire_dps_damage.DATA)

Apply_StatusEffect_Modifications(normal_fire_statuseff.DATA)
Apply_StatusEffect_Modifications(strong_fire_statuseff.DATA)

{$asm}
[DISABLE]
{$lua}


Apply_DamageSettings_Modifications(normal_fire_dps_damage.backup)
Apply_DamageSettings_Modifications(strong_fire_dps_damage.backup)

Apply_StatusEffect_Modifications(normal_fire_statuseff.backup)
Apply_StatusEffect_Modifications(strong_fire_statuseff.backup)


</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>243</ID>
          <Description>"&gt;  𝐄𝐋𝐄𝐂𝐓𝐑𝐈𝐂𝐀𝐋 𝐖𝐀𝐑𝐁𝐎𝐍𝐃 𝐀𝐃𝐃-𝐎𝐍 &lt;"</Description>
          <Options moHideChildren="1" moManualExpandCollapse="1" moDeactivateChildrenAsWell="1"/>
          <Color>03B8DE</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{
    Game Name:     Helldivers 2
    Game Version:  1.001.203
    Author:        MEOWSISI || MIAUSISI
    Date:          2024-12-13
    Table Version: 3.0.0

    Electrical Arsenal
    -------------------
}
{$lua}
-- //!         Please, DO!!! NOT!!! TOUCH!!! THIS!!! FILE!!!

-- //! ==============================================================
-- //! ===================    S U P P O R T     ===================
-- //! ==============================================================


-- //! ====================   G-23 Stun grenade
stungrenade_damage = Read_DamageSettings_Data(188)
stungrenade_explosion = Read_ExplosiveSettings_Data(70)

-- //! ================    Orbital EMS
orbitalems_damage = Read_DamageSettings_Data(309)
orbitalems_explosion = Read_ExplosiveSettings_Data(142)

-- //! ==============================================================
-- //! ===================    W E A P O N S     ===================
-- //! ==============================================================

-- //! ================ PLAS-1 Scorcher
scorcher_proj_damage = Read_DamageSettings_Data(26)
scorcher_expl_damage = Read_DamageSettings_Data(203)
scorcher_explosion = Read_ExplosiveSettings_Data(57)

-- // Put scorcher proj here


punisherplasma_proj_damage = Read_DamageSettings_Data(27)
punisherplasma_expl_damage = Read_DamageSettings_Data(208)
punisherplasma_explosion = Read_ExplosiveSettings_Data(65)

-- //! ================ PLAS-15 Loyalist
loyalist_lowch_proj_damage = Read_DamageSettings_Data(25)
loyalist_lowch_expl_damage = Read_DamageSettings_Data(202)
loyalist_lowch_explosion = Read_ExplosiveSettings_Data(56)

loyalist_midch_damage = Read_DamageSettings_Data(209)
loyalist_midch_explosion = Read_ExplosiveSettings_Data(63)

loyalist_highch_proj_damage = Read_DamageSettings_Data(28)
loyalist_highch_expl_damage = Read_DamageSettings_Data(210)
loyalist_highch_explosion = Read_ExplosiveSettings_Data(64)

-- //! ================  PLAS -101 Purifier
purifier_lowch_proj_damage = Read_DamageSettings_Data(29)
purifier_lowch_expl_damage = Read_DamageSettings_Data(211)
purifier_lowch_explosion = Read_ExplosiveSettings_Data(61)

purifier_highch_expl_damage = Read_DamageSettings_Data(212)
purifier_highch_explosion = Read_ExplosiveSettings_Data(62)


-- //! =================== PLAS-39 Accelerator Rifle
plasma_sniper_proj_damage = Read_DamageSettings_Data(205)
plasma_sniper_projectile  = Read_ProjectileInfo_Data(237, 3460488074252222302)
plasma_sniper_magazine    = Read_Magazine_Data(3460488074252222302)

plasma_sniper_expl_damage = Read_DamageSettings_Data(206)
plasma_sniper_explosion = Read_ExplosiveSettings_Data(59)

-- //! ================  ARC-12 Blitzer
blitzer_arc    = Read_ArcSettings_Data(4)
blitzer_damage = Read_DamageSettings_Data(131)

-- //! ==============================================================
-- //! ===================   S U P P O R T     ===================
-- //! ==============================================================


-- //! ================  ARC-3 Arc Thrower
arcthrower_arc = Read_ArcSettings_Data(0)
arcthrower_damage = Read_DamageSettings_Data(129)


-- //! ================  A/ARC-3 Tesla Tower
teslatower_arc = Read_ArcSettings_Data(5)
teslatower_damage = Read_DamageSettings_Data(29)

--//! ================= STUN LANCE
stunlance_damage  = Read_DamageSettings_Data(371)

--//! ================= STUN BATON
riotbaton_damage  = Read_DamageSettings_Data(372)

-- //! ================  Arc Passive Reduction
-- //! =============== PASSIVE
arc_resistance = RegisterPassive("1F8")
{$asm}
[DISABLE]

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>305</ID>
              <Description>"[𝐌𝐄𝐋𝐄𝐄] 𝐒𝐭𝐮𝐧 𝐋𝐚𝐧𝐜𝐞"</Description>
              <Color>73FFFF</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{
/*
    Game Name:     Helldivers 2
    Game Version:  1.001.203
    Author:        MEOWSISI || MIAUSISI
    Date:          2024-12-13
    Table Version: 3.0.0

    R-1214 Constitution
    ------------
*/
}
{$lua}


stunlance_damage.DATA.damage_std  = 135
stunlance_damage.DATA.damage_drb  = 135
stunlance_damage.DATA.ap_vals.ap1 = 5
stunlance_damage.DATA.ap_vals.ap2 = 5
stunlance_damage.DATA.ap_vals.ap3 = 5
stunlance_damage.DATA.ap_vals.ap4 = 5
stunlance_damage.DATA.momentum.knkback = 40
stunlance_damage.DATA.momentum.stagger = 40
stunlance_damage.DATA.elem_type = 2
stunlance_damage.DATA.stt_eff_1.target_type = 35
stunlance_damage.DATA.stt_eff_1.target_time = 100.0
stunlance_damage.DATA.stt_eff_2.target_type = 38
stunlance_damage.DATA.stt_eff_2.target_time = 100.0
stunlance_damage.DATA.stt_eff_3.target_type = 39
stunlance_damage.DATA.stt_eff_3.target_time = 100.0
stunlance_damage.DATA.stt_eff_4.target_type = 41
stunlance_damage.DATA.stt_eff_4.target_time = 100.0

Apply_DamageSettings_Modifications(stunlance_damage.DATA)

{$asm}

[DISABLE]
{$lua}

Apply_DamageSettings_Modifications(stunlance_damage.backup)

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>306</ID>
              <Description>"[𝐌𝐄𝐋𝐄𝐄] 𝐒𝐭𝐮𝐧 𝐁𝐚𝐭𝐨𝐧"</Description>
              <Color>73FFFF</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{
/*
    Game Name:     Helldivers 2
    Game Version:  1.001.203
    Author:        MEOWSISI || MIAUSISI
    Date:          2024-12-13
    Table Version: 3.0.0

    R-1214 Constitution
    ------------
*/
}
{$lua}

riotbaton_damage.DATA.damage_std  = 275
riotbaton_damage.DATA.damage_drb  = 275
riotbaton_damage.DATA.ap_vals.ap1 = 3
riotbaton_damage.DATA.ap_vals.ap2 = 3
riotbaton_damage.DATA.ap_vals.ap3 = 3
riotbaton_damage.DATA.ap_vals.ap4 = 2
riotbaton_damage.DATA.momentum.knkback = 40
riotbaton_damage.DATA.momentum.stagger = 40
riotbaton_damage.DATA.elem_type = 2
riotbaton_damage.DATA.stt_eff_1.target_type = 35
riotbaton_damage.DATA.stt_eff_1.target_time = 100.0
riotbaton_damage.DATA.stt_eff_2.target_type = 38
riotbaton_damage.DATA.stt_eff_2.target_time = 100.0
riotbaton_damage.DATA.stt_eff_3.target_type = 39
riotbaton_damage.DATA.stt_eff_3.target_time = 100.0
riotbaton_damage.DATA.stt_eff_4.target_type = 41
riotbaton_damage.DATA.stt_eff_4.target_time = 100.0

Apply_DamageSettings_Modifications(riotbaton_damage.DATA)

{$asm}

[DISABLE]
{$lua}

Apply_DamageSettings_Modifications(riotbaton_damage.backup)

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>166</ID>
              <Description>"[𝐆𝐑𝐄𝐍𝐀𝐃𝐄𝐒] 𝐆-𝟐𝟑 𝐒𝐭𝐮𝐧"</Description>
              <Color>73FFFF</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.100
  Date   : 2024-09-28
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.

  TODO - Sorry, this is a quick hotfix, no time to write down something :c
}

{$lua}
stungrenade_damage.DATA.damage_std  = 3
stungrenade_damage.DATA.damage_drb  = 3
stungrenade_damage.DATA.ap_vals.ap1 = 6
stungrenade_damage.DATA.ap_vals.ap2 = 6
stungrenade_damage.DATA.ap_vals.ap3 = 6
stungrenade_damage.DATA.ap_vals.ap4 = 6
stungrenade_damage.DATA.demolition  = 35
stungrenade_damage.DATA.momentum.knkback = 65
stungrenade_damage.DATA.momentum.stagger = 65
stungrenade_damage.DATA.elem_type        = 2
stungrenade_damage.DATA.stt_eff_1.target_type = 35
stungrenade_damage.DATA.stt_eff_1.target_time = 100.0
stungrenade_damage.DATA.stt_eff_2.target_type = 38
stungrenade_damage.DATA.stt_eff_2.target_time = 100.0
stungrenade_damage.DATA.stt_eff_3.target_type = 39

stungrenade_explosion.DATA.inner_radius   = 5
stungrenade_explosion.DATA.outer_radius   = 12
stungrenade_explosion.DATA.stagger_radius = 15

Apply_DamageSettings_Modifications(stungrenade_damage.DATA)
Apply_ExplosiveSettings_Modifications(stungrenade_explosion.DATA)


{$asm}

[DISABLE]
{$lua}
Apply_DamageSettings_Modifications(stungrenade_damage.backup)
Apply_ExplosiveSettings_Modifications(stungrenade_explosion.backup)

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>117501</ID>
              <Description>"[𝐏𝐑𝐈𝐌𝐀𝐑𝐘] 𝐀𝐑𝐂-𝟏𝟐 𝐁𝐥𝐢𝐭𝐳𝐞𝐫"</Description>
              <Color>04FFFF</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{
  Game    : helldivers2.exe
  Version : 1.001.201
  Date    : 2024-10-29
  Original Author : (CFEMEN's Discord) Sakuno
  Modifications by  : MIAUSISI

  &gt; ARC-12 Blitzer modifications.
}
{$lua}
-- //! ============================= ARC Shotgun
-- //! ================ DAMAGE
blitzer_damage.DATA.damage_std = 96
blitzer_damage.DATA.damage_drb = 66
blitzer_damage.DATA.ap_vals.ap1 = 6
blitzer_damage.DATA.ap_vals.ap2 = 6
blitzer_damage.DATA.ap_vals.ap3 = 6
blitzer_damage.DATA.ap_vals.ap4 = 6
blitzer_damage.DATA.momentum.knkback = 66
blitzer_damage.DATA.momentum.stagger = 66
blitzer_damage.DATA.elem_type = 2
blitzer_damage.DATA.stt_eff_1.target_type = 35
blitzer_damage.DATA.stt_eff_1.target_time = 100.0
blitzer_damage.DATA.stt_eff_2.target_type = 38
blitzer_damage.DATA.stt_eff_2.target_time = 100.0
blitzer_damage.DATA.stt_eff_3.target_type = 39
blitzer_damage.DATA.stt_eff_3.target_time = 100.0
blitzer_damage.DATA.stt_eff_4.target_type = 41
blitzer_damage.DATA.stt_eff_4.target_time = 100.0

-- //! ================== ARC SETTINGS
blitzer_arc.DATA.speed                                   = 1200
blitzer_arc.DATA.distance                                = 60
blitzer_arc.DATA.distance_at_max_angle_spread            = 12
blitzer_arc.DATA.distance_at_max_angle_spread_first_shot = 12
blitzer_arc.DATA.max_angle_spread                        = 8
blitzer_arc.DATA.max_angle_spread_first_shot             = 8
blitzer_arc.DATA.max_chain_length                        = 3
blitzer_arc.DATA.max_chain_split                         = 3


Apply_DamageSettings_Modifications(blitzer_damage.DATA)
Apply_ArcSettings_Modifications(blitzer_arc.DATA)

{$asm}

[DISABLE]
{$lua}

Apply_DamageSettings_Modifications(blitzer_damage.backup)
Apply_ArcSettings_Modifications(blitzer_arc.backup)

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>108</ID>
              <Description>"[𝐏𝐑𝐈𝐌𝐀𝐑𝐘] 𝐏𝐋𝐀𝐒-𝟏 𝐒𝐜𝐨𝐫𝐜𝐡𝐞𝐫"</Description>
              <Color>04FFFF</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.201
  Date   : 2024-11-19
  Author : MIAUSISI

  PLAS-1 Scorcher
  - Improved damage and AP.
  - Set damage to ELECTRIC.
  - Bigger explosion radius.
}
{$lua}

scorcher_proj_damage.DATA.damage_std = 150
scorcher_proj_damage.DATA.damage_drb = 150
scorcher_proj_damage.DATA.ap_vals.ap1 = 6
scorcher_proj_damage.DATA.ap_vals.ap2 = 6
scorcher_proj_damage.DATA.ap_vals.ap3 = 6
scorcher_proj_damage.DATA.ap_vals.ap4 = 6
scorcher_proj_damage.DATA.momentum.knkback = 10
scorcher_proj_damage.DATA.momentum.stagger = 10
scorcher_proj_damage.DATA.elem_type = 2
scorcher_proj_damage.DATA.stt_eff_1.target_type = 35
scorcher_proj_damage.DATA.stt_eff_1.target_time = 100.0
scorcher_proj_damage.DATA.stt_eff_2.target_type = 38
scorcher_proj_damage.DATA.stt_eff_2.target_time = 100.0
scorcher_proj_damage.DATA.stt_eff_3.target_type = 39
scorcher_proj_damage.DATA.stt_eff_3.target_time = 100.0
scorcher_proj_damage.DATA.stt_eff_4.target_type = 41
scorcher_proj_damage.DATA.stt_eff_4.target_time = 100.0


scorcher_expl_damage.DATA.damage_std = 550
scorcher_expl_damage.DATA.damage_drb = 150
scorcher_expl_damage.DATA.ap_vals.ap1 = 6
scorcher_expl_damage.DATA.ap_vals.ap2 = 6
scorcher_expl_damage.DATA.ap_vals.ap3 = 6
scorcher_expl_damage.DATA.ap_vals.ap4 = 6
scorcher_expl_damage.DATA.momentum.knkback = 10
scorcher_expl_damage.DATA.momentum.stagger = 10
scorcher_expl_damage.DATA.elem_type = 2
scorcher_expl_damage.DATA.stt_eff_1.target_type = 35
scorcher_expl_damage.DATA.stt_eff_1.target_time = 100.0
scorcher_expl_damage.DATA.stt_eff_2.target_type = 38
scorcher_expl_damage.DATA.stt_eff_2.target_time = 100.0
scorcher_expl_damage.DATA.stt_eff_3.target_type = 39
scorcher_expl_damage.DATA.stt_eff_3.target_time = 100.0
scorcher_expl_damage.DATA.stt_eff_4.target_type = 41
scorcher_expl_damage.DATA.stt_eff_4.target_time = 100.0

scorcher_explosion.DATA.inner_radius   = 4.0
scorcher_explosion.DATA.outer_radius   = 4.5
scorcher_explosion.DATA.stagger_radius = 5

Apply_DamageSettings_Modifications(scorcher_proj_damage.DATA)
Apply_DamageSettings_Modifications(scorcher_expl_damage.DATA)
Apply_ExplosiveSettings_Modifications(scorcher_explosion.DATA)


{$asm}
[DISABLE]
{$lua}

Apply_DamageSettings_Modifications(scorcher_proj_damage.backup)
Apply_DamageSettings_Modifications(scorcher_expl_damage.backup)
Apply_ExplosiveSettings_Modifications(scorcher_explosion.backup)

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>107</ID>
              <Description>"[𝐏𝐑𝐈𝐌𝐀𝐑𝐘] 𝐏𝐋𝐀𝐒-𝟏𝟎𝟏 𝐏𝐮𝐫𝐢𝐟𝐢𝐞𝐫"</Description>
              <Color>04FFFF</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.203
  Date   : 2024-11-24
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.
  ID: 18102809172282470538
  Etapas:
  1. ProjectileType_Plasma_Bolt_Charge_Medium
     DamageInfoType_Projectile_Plasma_Rifle_Charge
     ExplosionType_Plasma_Rifle_Charge_Medium
     DamageInfoType_Explosion_Projectile_Plasma_Rifle_Charge_Medium

  2. ProjectileType_Plasma_Rifle_Charge
     DamageInfoType_Projectile_Plasma_Rifle_Charge
     ExplosionType_Plasma_Rifle_Charge
     DamageInfoType_Explosion_Projectile_Plasma_Rifle_Charge

  3. ProjectileType_Plasma_Rifle_Charge
     DamageInfoType_Projectile_Plasma_Rifle_Charge
     ExplosionType_Plasma_Rifle_Charge
     DamageInfoType_Explosion_Projectile_Plasma_Rifle_Charge
}
{$lua}

-- //! ============================= LOW CHARGE
-- //! ================ PROJECTILE
purifier_lowch_proj_damage.DATA.damage_std = 190
purifier_lowch_proj_damage.DATA.damage_drb = 190
purifier_lowch_proj_damage.DATA.ap_vals.ap1 = 6
purifier_lowch_proj_damage.DATA.ap_vals.ap2 = 6
purifier_lowch_proj_damage.DATA.ap_vals.ap3 = 6
purifier_lowch_proj_damage.DATA.ap_vals.ap4 = 6
purifier_lowch_proj_damage.DATA.momentum.knkback = 10
purifier_lowch_proj_damage.DATA.momentum.stagger = 10
purifier_lowch_proj_damage.DATA.elem_type = 2
purifier_lowch_proj_damage.DATA.stt_eff_1.target_type = 35
purifier_lowch_proj_damage.DATA.stt_eff_1.target_time = 100.0
purifier_lowch_proj_damage.DATA.stt_eff_2.target_type = 38
purifier_lowch_proj_damage.DATA.stt_eff_2.target_time = 100.0
purifier_lowch_proj_damage.DATA.stt_eff_3.target_type = 39
purifier_lowch_proj_damage.DATA.stt_eff_3.target_time = 100.0
purifier_lowch_proj_damage.DATA.stt_eff_4.target_type = 41
purifier_lowch_proj_damage.DATA.stt_eff_4.target_time = 100.0

-- //! ================== EXPLOSION
purifier_lowch_expl_damage.DATA.damage_std = 190
purifier_lowch_expl_damage.DATA.damage_drb = 190
purifier_lowch_expl_damage.DATA.ap_vals.ap1 = 6
purifier_lowch_expl_damage.DATA.ap_vals.ap2 = 6
purifier_lowch_expl_damage.DATA.ap_vals.ap3 = 6
purifier_lowch_expl_damage.DATA.ap_vals.ap4 = 6
purifier_lowch_expl_damage.DATA.momentum.knkback = 10
purifier_lowch_expl_damage.DATA.momentum.stagger = 10
purifier_lowch_expl_damage.DATA.elem_type = 2
purifier_lowch_expl_damage.DATA.stt_eff_1.target_type = 35
purifier_lowch_expl_damage.DATA.stt_eff_1.target_time = 100.0
purifier_lowch_expl_damage.DATA.stt_eff_2.target_type = 38
purifier_lowch_expl_damage.DATA.stt_eff_2.target_time = 100.0
purifier_lowch_expl_damage.DATA.stt_eff_3.target_type = 39
purifier_lowch_expl_damage.DATA.stt_eff_3.target_time = 100.0
purifier_lowch_expl_damage.DATA.stt_eff_4.target_type = 41
purifier_lowch_expl_damage.DATA.stt_eff_4.target_time = 100.0

purifier_lowch_explosion.DATA.inner_radius   = 3.0
purifier_lowch_explosion.DATA.outer_radius   = 3.5
purifier_lowch_explosion.DATA.stagger_radius = 5



-- //! ============================= HIGH CHARGE
-- //! ================== EXPLOSION
purifier_highch_expl_damage.DATA.damage_std = 450
purifier_highch_expl_damage.DATA.damage_drb = 405
purifier_highch_expl_damage.DATA.ap_vals.ap1 = 6
purifier_highch_expl_damage.DATA.ap_vals.ap2 = 6
purifier_highch_expl_damage.DATA.ap_vals.ap3 = 6
purifier_highch_expl_damage.DATA.ap_vals.ap4 = 6
purifier_highch_expl_damage.DATA.momentum.knkback = 10
purifier_highch_expl_damage.DATA.momentum.stagger = 10
purifier_highch_expl_damage.DATA.elem_type = 2
purifier_highch_expl_damage.DATA.stt_eff_1.target_type = 35
purifier_highch_expl_damage.DATA.stt_eff_1.target_time = 100.0
purifier_highch_expl_damage.DATA.stt_eff_2.target_type = 38
purifier_highch_expl_damage.DATA.stt_eff_2.target_time = 100.0
purifier_highch_expl_damage.DATA.stt_eff_3.target_type = 39
purifier_highch_expl_damage.DATA.stt_eff_3.target_time = 100.0
purifier_highch_expl_damage.DATA.stt_eff_4.target_type = 41
purifier_highch_expl_damage.DATA.stt_eff_4.target_time = 100.0

purifier_highch_explosion.DATA.inner_radius   = 5.0
purifier_highch_explosion.DATA.outer_radius   = 7.0
purifier_highch_explosion.DATA.stagger_radius = 8







Apply_DamageSettings_Modifications(purifier_lowch_proj_damage.DATA)
Apply_DamageSettings_Modifications(purifier_lowch_expl_damage.DATA)
Apply_ExplosiveSettings_Modifications(purifier_lowch_explosion.DATA)


Apply_DamageSettings_Modifications(purifier_highch_expl_damage.DATA)
Apply_ExplosiveSettings_Modifications(purifier_highch_explosion.DATA)


{$asm}

[DISABLE]
{$lua}

Apply_DamageSettings_Modifications(purifier_lowch_proj_damage.backup)
Apply_DamageSettings_Modifications(purifier_lowch_expl_damage.backup)
Apply_ExplosiveSettings_Modifications(purifier_lowch_explosion.backup)


Apply_DamageSettings_Modifications(purifier_highch_expl_damage.backup)
Apply_ExplosiveSettings_Modifications(purifier_highch_explosion.backup)

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>340</ID>
              <Description>"[𝐏𝐑𝐈𝐌𝐀𝐑𝐘] 𝐒𝐆-𝟖𝐏 𝐏𝐮𝐧𝐢𝐬𝐡𝐞𝐫 𝐏𝐥𝐚𝐬𝐦𝐚"</Description>
              <Color>04FFFF</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.201
  Date   : 2024-11-19
  Author : MIAUSISI

  PLAS-1 Scorcher
  - Improved damage and AP.
  - Set damage to ELECTRIC.
  - Bigger explosion radius.
}
{$lua}

punisherplasma_proj_damage.DATA.damage_std = 175
punisherplasma_proj_damage.DATA.damage_drb = 175
punisherplasma_proj_damage.DATA.ap_vals.ap1 = 6
punisherplasma_proj_damage.DATA.ap_vals.ap2 = 6
punisherplasma_proj_damage.DATA.ap_vals.ap3 = 6
punisherplasma_proj_damage.DATA.ap_vals.ap4 = 6
punisherplasma_proj_damage.DATA.momentum.knkback = 10
punisherplasma_proj_damage.DATA.momentum.stagger = 10
punisherplasma_proj_damage.DATA.elem_type = 2
punisherplasma_proj_damage.DATA.stt_eff_1.target_type = 35
punisherplasma_proj_damage.DATA.stt_eff_1.target_time = 100.0
punisherplasma_proj_damage.DATA.stt_eff_2.target_type = 38
punisherplasma_proj_damage.DATA.stt_eff_2.target_time = 100.0
punisherplasma_proj_damage.DATA.stt_eff_3.target_type = 39
punisherplasma_proj_damage.DATA.stt_eff_3.target_time = 100.0
punisherplasma_proj_damage.DATA.stt_eff_4.target_type = 41
punisherplasma_proj_damage.DATA.stt_eff_4.target_time = 100.0


punisherplasma_expl_damage.DATA.damage_std = 300
punisherplasma_expl_damage.DATA.damage_drb = 300
punisherplasma_expl_damage.DATA.ap_vals.ap1 = 6
punisherplasma_expl_damage.DATA.ap_vals.ap2 = 6
punisherplasma_expl_damage.DATA.ap_vals.ap3 = 6
punisherplasma_expl_damage.DATA.ap_vals.ap4 = 6
punisherplasma_expl_damage.DATA.momentum.knkback = 10
punisherplasma_expl_damage.DATA.momentum.stagger = 10
punisherplasma_expl_damage.DATA.elem_type = 2
punisherplasma_expl_damage.DATA.stt_eff_1.target_type = 35
punisherplasma_expl_damage.DATA.stt_eff_1.target_time = 100.0
punisherplasma_expl_damage.DATA.stt_eff_2.target_type = 38
punisherplasma_expl_damage.DATA.stt_eff_2.target_time = 100.0
punisherplasma_expl_damage.DATA.stt_eff_3.target_type = 39
punisherplasma_expl_damage.DATA.stt_eff_3.target_time = 100.0
punisherplasma_expl_damage.DATA.stt_eff_4.target_type = 41
punisherplasma_expl_damage.DATA.stt_eff_4.target_time = 100.0

punisherplasma_explosion.DATA.inner_radius   = 6.0
punisherplasma_explosion.DATA.outer_radius   = 7.5
punisherplasma_explosion.DATA.stagger_radius = 8.0

Apply_DamageSettings_Modifications(punisherplasma_proj_damage.DATA)
Apply_DamageSettings_Modifications(punisherplasma_expl_damage.DATA)
Apply_ExplosiveSettings_Modifications(punisherplasma_explosion.DATA)


{$asm}

[DISABLE]
{$lua}

Apply_DamageSettings_Modifications(punisherplasma_proj_damage.backup)
Apply_DamageSettings_Modifications(punisherplasma_expl_damage.backup)
Apply_ExplosiveSettings_Modifications(punisherplasma_explosion.backup)

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>286</ID>
              <Description>"[𝐏𝐑𝐈𝐌𝐀𝐑𝐘] 𝐏𝐋𝐀𝐒-𝟑𝟗 𝐀𝐜𝐜𝐞𝐥𝐞𝐫𝐚𝐭𝐨𝐫 𝐑𝐢𝐟𝐥𝐞"</Description>
              <Color>04FFFF</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.203
  Date   : 2024-11-24
  Author : MIAUSISI

  (Unofficial) Balance Patch for weapons.
  ID: 18102809172282470538
  Etapas:
  1. ProjectileType_Plasma_Bolt_Charge_Medium
     DamageInfoType_Projectile_Plasma_Rifle_Charge
     ExplosionType_Plasma_Rifle_Charge_Medium
     DamageInfoType_Explosion_Projectile_Plasma_Rifle_Charge_Medium

  2. ProjectileType_Plasma_Rifle_Charge
     DamageInfoType_Projectile_Plasma_Rifle_Charge
     ExplosionType_Plasma_Rifle_Charge
     DamageInfoType_Explosion_Projectile_Plasma_Rifle_Charge

  3. ProjectileType_Plasma_Rifle_Charge
     DamageInfoType_Projectile_Plasma_Rifle_Charge
     ExplosionType_Plasma_Rifle_Charge
     DamageInfoType_Explosion_Projectile_Plasma_Rifle_Charge
}
{$lua}



plasma_sniper_proj_damage.DATA.damage_std = 125
plasma_sniper_proj_damage.DATA.damage_drb = 125
plasma_sniper_proj_damage.DATA.ap_vals.ap1 = 6
plasma_sniper_proj_damage.DATA.ap_vals.ap2 = 6
plasma_sniper_proj_damage.DATA.ap_vals.ap3 = 6
plasma_sniper_proj_damage.DATA.ap_vals.ap4 = 6
plasma_sniper_proj_damage.DATA.momentum.knkback = 10
plasma_sniper_proj_damage.DATA.momentum.stagger = 10
plasma_sniper_proj_damage.DATA.elem_type = 2
plasma_sniper_proj_damage.DATA.stt_eff_1.target_type = 35
plasma_sniper_proj_damage.DATA.stt_eff_1.target_time = 100.0
plasma_sniper_proj_damage.DATA.stt_eff_2.target_type = 38
plasma_sniper_proj_damage.DATA.stt_eff_2.target_time = 100.0
plasma_sniper_proj_damage.DATA.stt_eff_3.target_type = 39
plasma_sniper_proj_damage.DATA.stt_eff_3.target_time = 100.0
plasma_sniper_proj_damage.DATA.stt_eff_4.target_type = 41
plasma_sniper_proj_damage.DATA.stt_eff_4.target_time = 100.0



plasma_sniper_projectile.DATA.speed = 3600
plasma_sniper_projectile.DATA.drag  = 0.00
plasma_sniper_projectile.DATA.gravity_multiplier   = 0.85
plasma_sniper_projectile.DATA.penetration_slowdown = 0.5

plasma_sniper_expl_damage.DATA.damage_std = 275
plasma_sniper_expl_damage.DATA.damage_drb = 275
plasma_sniper_expl_damage.DATA.ap_vals.ap1 = 6
plasma_sniper_expl_damage.DATA.ap_vals.ap2 = 6
plasma_sniper_expl_damage.DATA.ap_vals.ap3 = 6
plasma_sniper_expl_damage.DATA.ap_vals.ap4 = 6
plasma_sniper_expl_damage.DATA.momentum.knkback = 10
plasma_sniper_expl_damage.DATA.momentum.stagger = 10
plasma_sniper_expl_damage.DATA.elem_type = 2
plasma_sniper_expl_damage.DATA.stt_eff_1.target_type = 35
plasma_sniper_expl_damage.DATA.stt_eff_1.target_time = 100.0
plasma_sniper_expl_damage.DATA.stt_eff_2.target_type = 38
plasma_sniper_expl_damage.DATA.stt_eff_2.target_time = 100.0
plasma_sniper_expl_damage.DATA.stt_eff_3.target_type = 39
plasma_sniper_expl_damage.DATA.stt_eff_3.target_time = 100.0
plasma_sniper_expl_damage.DATA.stt_eff_4.target_type = 41
plasma_sniper_expl_damage.DATA.stt_eff_4.target_time = 100.0

plasma_sniper_magazine.DATA.magazine_size = 27

plasma_sniper_explosion.DATA.inner_radius   = 5.0
plasma_sniper_explosion.DATA.outer_radius   = 6.0
plasma_sniper_explosion.DATA.stagger_radius = 8.0

Apply_DamageSettings_Modifications(plasma_sniper_proj_damage.DATA)
Apply_DamageSettings_Modifications(plasma_sniper_expl_damage.DATA)
Apply_ExplosiveSettings_Modifications(plasma_sniper_explosion.DATA)
Apply_ProjectileInfo_Modifications(plasma_sniper_projectile.DATA)
Apply_MagazineSettings_Modifications(plasma_sniper_magazine.DATA)


{$asm}

[DISABLE]
{$lua}

Apply_DamageSettings_Modifications(plasma_sniper_proj_damage.backup)
Apply_DamageSettings_Modifications(plasma_sniper_expl_damage.backup)
Apply_ExplosiveSettings_Modifications(plasma_sniper_explosion.backup)
Apply_ProjectileInfo_Modifications(plasma_sniper_projectile.backup)
Apply_MagazineSettings_Modifications(plasma_sniper_magazine.backup)

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>7</ID>
              <Description>"[𝐒𝐔𝐏𝐏𝐎𝐑𝐓] 𝐀𝐑𝐂-𝟑 𝐀𝐫𝐜 𝐓𝐡𝐫𝐨𝐰𝐞𝐫"</Description>
              <Color>03B8DE</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{
  Game    : helldivers2.exe
  Version : 1.001.201
  Date    : 2024-10-29
  Original Author : (CFEMEN's Discord) Sakuno
  Corrections by  : MIAUSISI

  &gt; ARC Thrower Modifications.
}
{$lua}
-- //! ============================= ARC THROWER
-- //! ================ DAMAGE
arcthrower_damage.DATA.damage_std = 1265
arcthrower_damage.DATA.damage_drb = 1265
arcthrower_damage.DATA.ap_vals.ap1 = 6
arcthrower_damage.DATA.ap_vals.ap2 = 6
arcthrower_damage.DATA.ap_vals.ap3 = 6
arcthrower_damage.DATA.ap_vals.ap4 = 6
arcthrower_damage.DATA.momentum.knkback = 88
arcthrower_damage.DATA.momentum.stagger = 88
arcthrower_damage.DATA.elem_type = 2
arcthrower_damage.DATA.stt_eff_1.target_type = 35
arcthrower_damage.DATA.stt_eff_1.target_time = 100.0
arcthrower_damage.DATA.stt_eff_2.target_type = 38
arcthrower_damage.DATA.stt_eff_2.target_time = 100.0
arcthrower_damage.DATA.stt_eff_3.target_type = 39
arcthrower_damage.DATA.stt_eff_3.target_time = 100.0
arcthrower_damage.DATA.stt_eff_4.target_type = 41
arcthrower_damage.DATA.stt_eff_4.target_time = 100.0

-- //! ================== ARC SETTINGS
arcthrower_arc.DATA.speed                                   = 1340
arcthrower_arc.DATA.distance                                = 95
arcthrower_arc.DATA.distance_at_max_angle_spread            = 40
arcthrower_arc.DATA.distance_at_max_angle_spread_first_shot = 40
arcthrower_arc.DATA.max_angle_spread                        = 40
arcthrower_arc.DATA.max_angle_spread_first_shot             = 40
arcthrower_arc.DATA.max_chain_length                        = 4
arcthrower_arc.DATA.max_chain_split                         = 4




Apply_DamageSettings_Modifications(arcthrower_damage.DATA)
Apply_ArcSettings_Modifications(arcthrower_arc.DATA)

{$asm}

[DISABLE]
{$lua}

Apply_DamageSettings_Modifications(arcthrower_damage.backup)
Apply_ArcSettings_Modifications(arcthrower_arc.backup)

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>9</ID>
              <Description>"[𝐒𝐔𝐏𝐏𝐎𝐑𝐓] 𝐀/𝐀𝐑𝐂-𝟑 𝐓𝐞𝐬𝐥𝐚 𝐓𝐨𝐰𝐞𝐫"</Description>
              <Color>03B8DE</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{
  Game    : helldivers2.exe
  Version : 1.001.101
  Date    : 2024-10-11
  Original Author : (CFEMEN's Discord) Sakuno
  Modifications by  : MIAUSISI

  &gt; ARC WEAPONS MODIFICATIONS:
  --------------------------
  - Script modifies A/ARC-3 Tesla Tower RAY properties:
    - Speed
    - Distance
    - Distance at Max Angle Spread
    - Distance at Max Angle Spread First Shot
    - Max Angle Spread
    - Max Angle Spread First Shot
    - Max Chain Length
    - Max Chain Split
  - Script modifies A/ARC-3 Tesla Tower DAMAGE properties:
    - Standard damage
    - Squishy damage
    - AP 1
    - AP 2
    - AP 3
    - AP 4
    - Demolition
    - Stagger
    - Momentum
    - Elemental Damage Type
    - Status Effect Type
    - Status Effect Duration
}
{$lua}

-- //! ============================= TESLA TOWER
-- //! ================ DAMAGE
teslatower_damage.DATA.damage_std = 1300
teslatower_damage.DATA.damage_drb = 1300
teslatower_damage.DATA.ap_vals.ap1 = 6
teslatower_damage.DATA.ap_vals.ap2 = 6
teslatower_damage.DATA.ap_vals.ap3 = 6
teslatower_damage.DATA.ap_vals.ap4 = 6
teslatower_damage.DATA.momentum.knkback = 66
teslatower_damage.DATA.momentum.stagger = 66
teslatower_damage.DATA.elem_type = 2
teslatower_damage.DATA.stt_eff_1.target_type = 35
teslatower_damage.DATA.stt_eff_1.target_time = 100.0
teslatower_damage.DATA.stt_eff_2.target_type = 38
teslatower_damage.DATA.stt_eff_2.target_time = 100.0
teslatower_damage.DATA.stt_eff_3.target_type = 39
teslatower_damage.DATA.stt_eff_3.target_time = 100.0
teslatower_damage.DATA.stt_eff_4.target_type = 41
teslatower_damage.DATA.stt_eff_4.target_time = 100.0

-- //! ================== ARC SETTINGS
teslatower_arc.DATA.speed                                   = 1800
teslatower_arc.DATA.distance                                = 32
teslatower_arc.DATA.distance_at_max_angle_spread            = 10
teslatower_arc.DATA.distance_at_max_angle_spread_first_shot = 10
teslatower_arc.DATA.max_angle_spread                        = 359
teslatower_arc.DATA.max_angle_spread_first_shot             = 179
teslatower_arc.DATA.max_chain_length                        = 3
teslatower_arc.DATA.max_chain_split                         = 3


Apply_DamageSettings_Modifications(teslatower_damage.DATA)
Apply_ArcSettings_Modifications(teslatower_arc.DATA)

{$asm}

[DISABLE]
{$lua}

Apply_DamageSettings_Modifications(teslatower_damage.backup)
Apply_ArcSettings_Modifications(teslatower_arc.backup)

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>5</ID>
              <Description>"𝟏𝟎𝟎% 𝐄𝐋𝐄𝐂𝐓𝐑𝐈𝐂𝐀𝐋 𝐂𝐎𝐍𝐃𝐔𝐈𝐓 𝐩𝐚𝐬𝐬𝐢𝐯𝐞"</Description>
              <Color>03B8DE</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.005
  Date   : 2024-10-10
  Author : MEOW-SEE-SEE (MIAUSISI)
  Many thanks to "That super cool Russian Guy" to help me
  with a faster way to look up the passive!

  &gt; IMPROVED ELECTRICAL CONDUIT
  -----------------------------
  - Sets resistance to ARC damage from 95% to 100%

}

{$lua}

arc_resistance.DATA.passive_1.mod_value = 0.00


Apply_Passive_Modifications(arc_resistance.DATA)

{$asm}
[DISABLE]
{$lua}
Apply_Passive_Modifications(arc_resistance.backup)

</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>364</ID>
          <Description>"&gt;  𝐄𝐗𝐏𝐄𝐑𝐈𝐌𝐄𝐍𝐓𝐀𝐋 𝐅𝐄𝐀𝐓𝐔𝐑𝐄𝐒 &lt;"</Description>
          <Options moHideChildren="1" moManualExpandCollapse="1" moDeactivateChildrenAsWell="1"/>
          <Color>FF00FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{
    Game Name:     Helldivers 2
    Game Version:  1.002.003
    Author:        MEOWSISI || MIAUSISI
    Date:          2024-12-13
    Table Version: 3.1.0

    Experimental Arsenal
    -------------------
}
{$lua}
-- //!         Please, DO!!! NOT!!! TOUCH!!! THIS!!! FILE!!!

-- //! ==============================================================
-- //! ===================    S U P P O R T     ===================
-- //! ==============================================================


-- //! ====================   Ballistic Shield
ballistic_shield_healthentity1 = Read_HealthConfiguration_Data(6889076721164976792)
ballistic_shield_healthentity2 = Read_HealthConfiguration_Data(10844335154607830587)

ballistic_shield_unitcomp_ent1 = Read_UnitComponent_Data(6889076721164976792)
ballistic_shield_unitcomp_ent2 = Read_UnitComponent_Data(10844335154607830587)

helldiver_parameters = Read_PlayerAttributes_Data()
{$asm}
[DISABLE]

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>376</ID>
              <Description>"[𝐂𝐇𝐄𝐀𝐓 𝐒𝐇𝐄𝐄𝐓] 𝐇𝐞𝐚𝐥𝐭𝐡 𝐏𝐚𝐫𝐚𝐦𝐞𝐭𝐞𝐫𝐬"</Description>
              <Color>FF80FF</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.005
  Date   : 2024-10-10
  Author : MEOW-SEE-SEE (MIAUSISI)
  Many thanks to "That super cool Russian Guy" to help me
  with a faster way to look up the passive!

  &gt; IMPROVED ELECTRICAL CONDUIT
  -----------------------------
  - Sets resistance to ARC damage from 95% to 100%


    writeInteger(target_address + 0x0000, target_data.health)
    writeFloat(target_address   + 0x0004, target_data.health_changerate)
    writeInteger(target_address + 0x0008, target_data.health_changerate_disabled)
    writeFloat(target_address   + 0x000C, target_data.health_changerate_cooldown)
    writeInteger(target_address + 0x0010, target_data.regeneration_segments)
    writeFloat(target_address   + 0x0014, target_data.regeneration_changerate)
    writeInteger(target_address + 0x0018, target_data.constitution)
    writeFloat(target_address   + 0x001C, target_data.constitution_changerate)
    writeInteger(target_address + 0x0020, target_data.constitution_disables_interactions)
    writeFloat(target_address   + 0x0024, target_data.zone_bleedout_changerate)
    writeInteger(target_address + 0x0028, target_data.unit_size)
    writeFloat(target_address   + 0x002C, target_data.unit_mass)
    writeInteger(target_address + 0x0030, target_data.kill_score)

    writeFloat(target_address   + 0x0034, target_data.wounded_state.sway_multiplier)
    writeFloat(target_address   + 0x0038, target_data.wounded_state.move_speed_multiplier)

    writeInteger(target_address + 0x00F4, target_data.default_dmg_zone_info.dmg_multiplier)
    writeInteger(target_address + 0x00F8, target_data.default_dmg_zone_info.dmg_multipler_dps)
    writeInteger(target_address + 0x00FC, target_data.default_dmg_zone_info.proj_drb_resistance)
    writeInteger(target_address + 0x0100, target_data.default_dmg_zone_info.armor)
    writeInteger(target_address + 0x0104, target_data.default_dmg_zone_info.armor_angle_check)
    writeInteger(target_address + 0x0108, target_data.default_dmg_zone_info.max_armor)
    writeInteger(target_address + 0x010C, target_data.default_dmg_zone_info.ignore_armor_on_self)
    writeFloat(target_address   + 0x0110, target_data.default_dmg_zone_info.health)
    writeInteger(target_address + 0x0114, target_data.default_dmg_zone_info.constitution)
    writeByte(target_address    + 0x0118, target_data.default_dmg_zone_info.immortal)
    writeFloat(target_address   + 0x0120, target_data.default_dmg_zone_info.affects_main_health)
    writeByte(target_address    + 0x0165, target_data.default_dmg_zone_info.regeneration_enabled)
    writeByte(target_address    + 0x0166, target_data.default_dmg_zone_info.bleedout_enabled)
    writeByte(target_address    + 0x0167, target_data.default_dmg_zone_info.affected_by_explosions)
    writeFloat(target_address   + 0x0168, target_data.default_dmg_zone_info.explosion_dmg_mult)
    writeInteger(target_address + 0x016C, target_data.default_dmg_zone_info.affected_by_collision_impact)
    writeInteger(target_address + 0x0170, target_data.default_dmg_zone_info.on_dead_disable_all_actors)
    writeInteger(target_address + 0x0174, target_data.default_dmg_zone_info.explosion_verification)
    writeInteger(target_address + 0x0178, target_data.default_dmg_zone_info.main_health_affect_capped_zh)
    writeInteger(target_address + 0x017C, target_data.default_dmg_zone_info.hit_effect_receiver_type)

    writeInteger(target_address + 0x0294, target_data.dmg_zones.zone1.dmg_multiplier)
    writeInteger(target_address + 0x0298, target_data.dmg_zones.zone1.dmg_multipler_dps)
    writeInteger(target_address + 0x029C, target_data.dmg_zones.zone1.proj_drb_resistance)
    writeInteger(target_address + 0x02A0, target_data.dmg_zones.zone1.armor)
    writeInteger(target_address + 0x02A4, target_data.dmg_zones.zone1.armor_angle_check)
    writeInteger(target_address + 0x02A8, target_data.dmg_zones.zone1.max_armor)
    writeInteger(target_address + 0x02AC, target_data.dmg_zones.zone1.ignore_armor_on_self)
    writeFloat(target_address   + 0x02B0, target_data.dmg_zones.zone1.health)
    writeInteger(target_address + 0x02B4, target_data.dmg_zones.zone1.constitution)
    writeByte(target_address    + 0x02B8, target_data.dmg_zones.zone1.immortal)
    writeFloat(target_address   + 0x02C0, target_data.dmg_zones.zone1.affects_main_health)
    writeByte(target_address    + 0x0305, target_data.dmg_zones.zone1.regeneration_enabled)
    writeByte(target_address    + 0x0306, target_data.dmg_zones.zone1.bleedout_enabled)
    writeByte(target_address    + 0x0307, target_data.dmg_zones.zone1.affected_by_explosions)
    writeFloat(target_address   + 0x0308, target_data.dmg_zones.zone1.explosion_dmg_mult)
    writeInteger(target_address + 0x030C, target_data.dmg_zones.zone1.affected_by_collision_impact)
    writeInteger(target_address + 0x0310, target_data.dmg_zones.zone1.on_dead_disable_all_actors)
    writeInteger(target_address + 0x0314, target_data.dmg_zones.zone1.explosion_verification)
    writeInteger(target_address + 0x0318, target_data.dmg_zones.zone1.main_health_affect_capped_zh)
    writeInteger(target_address + 0x031C, target_data.dmg_zones.zone1.hit_effect_receiver_type)
    -- //! ================     Z O N E 2
    writeInteger(target_address + 0x0494, target_data.dmg_zones.zone2.dmg_multiplier)
    writeInteger(target_address + 0x0498, target_data.dmg_zones.zone2.dmg_multipler_dps)
    writeInteger(target_address + 0x049C, target_data.dmg_zones.zone2.proj_drb_resistance)
    writeInteger(target_address + 0x04A0, target_data.dmg_zones.zone2.armor)
    writeInteger(target_address + 0x04A4, target_data.dmg_zones.zone2.armor_angle_check)
    writeInteger(target_address + 0x04A8, target_data.dmg_zones.zone2.max_armor)
    writeInteger(target_address + 0x04AC, target_data.dmg_zones.zone2.ignore_armor_on_self)
    writeFloat(target_address   + 0x04B0, target_data.dmg_zones.zone2.health)
    writeInteger(target_address + 0x04B4, target_data.dmg_zones.zone2.constitution)
    writeByte(target_address    + 0x04B8, target_data.dmg_zones.zone2.immortal)
    writeFloat(target_address   + 0x04C0, target_data.dmg_zones.zone2.affects_main_health)
    writeByte(target_address    + 0x0505, target_data.dmg_zones.zone2.regeneration_enabled)
    writeByte(target_address    + 0x0506, target_data.dmg_zones.zone2.bleedout_enabled)
    writeByte(target_address    + 0x0507, target_data.dmg_zones.zone2.affected_by_explosions)
    writeFloat(target_address   + 0x0508, target_data.dmg_zones.zone2.explosion_dmg_mult)
    writeInteger(target_address + 0x050C, target_data.dmg_zones.zone2.affected_by_collision_impact)
    writeInteger(target_address + 0x0510, target_data.dmg_zones.zone2.on_dead_disable_all_actors)
    writeInteger(target_address + 0x0514, target_data.dmg_zones.zone2.explosion_verification)
    writeInteger(target_address + 0x0518, target_data.dmg_zones.zone2.main_health_affect_capped_zh)
    writeInteger(target_address + 0x051C, target_data.dmg_zones.zone2.hit_effect_receiver_type)
    -- //! ================     Z O N E 3
    writeInteger(target_address + 0x0694, target_data.dmg_zones.zone3.dmg_multiplier)
    writeInteger(target_address + 0x0698, target_data.dmg_zones.zone3.dmg_multipler_dps)
    writeInteger(target_address + 0x069C, target_data.dmg_zones.zone3.proj_drb_resistance)
    writeInteger(target_address + 0x06A0, target_data.dmg_zones.zone3.armor)
    writeInteger(target_address + 0x06A4, target_data.dmg_zones.zone3.armor_angle_check)
    writeInteger(target_address + 0x06A8, target_data.dmg_zones.zone3.max_armor)
    writeInteger(target_address + 0x06AC, target_data.dmg_zones.zone3.ignore_armor_on_self)
    writeFloat(target_address   + 0x06B0, target_data.dmg_zones.zone3.health)
    writeInteger(target_address + 0x06B4, target_data.dmg_zones.zone3.constitution)
    writeByte(target_address    + 0x06B8, target_data.dmg_zones.zone3.immortal)
    writeFloat(target_address   + 0x06C0, target_data.dmg_zones.zone3.affects_main_health)
    writeByte(target_address    + 0x0705, target_data.dmg_zones.zone3.regeneration_enabled)
    writeByte(target_address    + 0x0706, target_data.dmg_zones.zone3.bleedout_enabled)
    writeByte(target_address    + 0x0707, target_data.dmg_zones.zone3.affected_by_explosions)
    writeFloat(target_address   + 0x0708, target_data.dmg_zones.zone3.explosion_dmg_mult)
    writeInteger(target_address + 0x070C, target_data.dmg_zones.zone3.affected_by_collision_impact)
    writeInteger(target_address + 0x0710, target_data.dmg_zones.zone3.on_dead_disable_all_actors)
    writeInteger(target_address + 0x0714, target_data.dmg_zones.zone3.explosion_verification)
    writeInteger(target_address + 0x0718, target_data.dmg_zones.zone3.main_health_affect_capped_zh)
    writeInteger(target_address + 0x071C, target_data.dmg_zones.zone3.hit_effect_receiver_type)
    -- //! ================     Z O N E 4
    writeInteger(target_address + 0x0894, target_data.dmg_zones.zone4.dmg_multiplier)
    writeInteger(target_address + 0x0898, target_data.dmg_zones.zone4.dmg_multipler_dps)
    writeInteger(target_address + 0x089C, target_data.dmg_zones.zone4.proj_drb_resistance)
    writeInteger(target_address + 0x08A0, target_data.dmg_zones.zone4.armor)
    writeInteger(target_address + 0x08A4, target_data.dmg_zones.zone4.armor_angle_check)
    writeInteger(target_address + 0x08A8, target_data.dmg_zones.zone4.max_armor)
    writeInteger(target_address + 0x08AC, target_data.dmg_zones.zone4.ignore_armor_on_self)
    writeFloat(target_address   + 0x08B0, target_data.dmg_zones.zone4.health)
    writeInteger(target_address + 0x08B4, target_data.dmg_zones.zone4.constitution)
    writeByte(target_address    + 0x08B8, target_data.dmg_zones.zone4.immortal)
    writeFloat(target_address   + 0x08C0, target_data.dmg_zones.zone4.affects_main_health)
    writeByte(target_address    + 0x0905, target_data.dmg_zones.zone4.regeneration_enabled)
    writeByte(target_address    + 0x0906, target_data.dmg_zones.zone4.bleedout_enabled)
    writeByte(target_address    + 0x0907, target_data.dmg_zones.zone4.affected_by_explosions)
    writeFloat(target_address   + 0x0908, target_data.dmg_zones.zone4.explosion_dmg_mult)
    writeInteger(target_address + 0x090C, target_data.dmg_zones.zone4.affected_by_collision_impact)
    writeInteger(target_address + 0x0910, target_data.dmg_zones.zone4.on_dead_disable_all_actors)
    writeInteger(target_address + 0x0914, target_data.dmg_zones.zone4.explosion_verification)
    writeInteger(target_address + 0x0918, target_data.dmg_zones.zone4.main_health_affect_capped_zh)
    writeInteger(target_address + 0x091C, target_data.dmg_zones.zone4.hit_effect_receiver_type)
    -- //! ================     Z O N E 5
    writeInteger(target_address + 0x0A94, target_data.dmg_zones.zone5.dmg_multiplier)
    writeInteger(target_address + 0x0A98, target_data.dmg_zones.zone5.dmg_multipler_dps)
    writeInteger(target_address + 0x0A9C, target_data.dmg_zones.zone5.proj_drb_resistance)
    writeInteger(target_address + 0x0AA0, target_data.dmg_zones.zone5.armor)
    writeInteger(target_address + 0x0AA4, target_data.dmg_zones.zone5.armor_angle_check)
    writeInteger(target_address + 0x0AA8, target_data.dmg_zones.zone5.max_armor)
    writeInteger(target_address + 0x0AAC, target_data.dmg_zones.zone5.ignore_armor_on_self)
    writeFloat(target_address   + 0x0AB0, target_data.dmg_zones.zone5.health)
    writeInteger(target_address + 0x0AB4, target_data.dmg_zones.zone5.constitution)
    writeByte(target_address    + 0x0AB8, target_data.dmg_zones.zone5.immortal)
    writeFloat(target_address   + 0x0AC0, target_data.dmg_zones.zone5.affects_main_health)
    writeByte(target_address    + 0x0B05, target_data.dmg_zones.zone5.regeneration_enabled)
    writeByte(target_address    + 0x0B06, target_data.dmg_zones.zone5.bleedout_enabled)
    writeByte(target_address    + 0x0B07, target_data.dmg_zones.zone5.affected_by_explosions)
    writeFloat(target_address   + 0x0B08, target_data.dmg_zones.zone5.explosion_dmg_mult)
    writeInteger(target_address + 0x0B0C, target_data.dmg_zones.zone5.affected_by_collision_impact)
    writeInteger(target_address + 0x0B10, target_data.dmg_zones.zone5.on_dead_disable_all_actors)
    writeInteger(target_address + 0x0B14, target_data.dmg_zones.zone5.explosion_verification)
    writeInteger(target_address + 0x0B18, target_data.dmg_zones.zone5.main_health_affect_capped_zh)
    writeInteger(target_address + 0x0B1C, target_data.dmg_zones.zone5.hit_effect_receiver_type)
    -- //! ================     Z O N E 6
    writeInteger(target_address + 0x0C94, target_data.dmg_zones.zone6.dmg_multiplier)
    writeInteger(target_address + 0x0C98, target_data.dmg_zones.zone6.dmg_multipler_dps)
    writeInteger(target_address + 0x0C9C, target_data.dmg_zones.zone6.proj_drb_resistance)
    writeInteger(target_address + 0x0CA0, target_data.dmg_zones.zone6.armor)
    writeInteger(target_address + 0x0CA4, target_data.dmg_zones.zone6.armor_angle_check)
    writeInteger(target_address + 0x0CA8, target_data.dmg_zones.zone6.max_armor)
    writeInteger(target_address + 0x0CAC, target_data.dmg_zones.zone6.ignore_armor_on_self)
    writeFloat(target_address   + 0x0CB0, target_data.dmg_zones.zone6.health)
    writeInteger(target_address + 0x0CB4, target_data.dmg_zones.zone6.constitution)
    writeByte(target_address    + 0x0CB8, target_data.dmg_zones.zone6.immortal)
    writeFloat(target_address   + 0x0CC0, target_data.dmg_zones.zone6.affects_main_health)
    writeByte(target_address    + 0x0D05, target_data.dmg_zones.zone6.regeneration_enabled)
    writeByte(target_address    + 0x0D06, target_data.dmg_zones.zone6.bleedout_enabled)
    writeByte(target_address    + 0x0D07, target_data.dmg_zones.zone6.affected_by_explosions)
    writeFloat(target_address   + 0x0D08, target_data.dmg_zones.zone6.explosion_dmg_mult)
    writeInteger(target_address + 0x0D0C, target_data.dmg_zones.zone6.affected_by_collision_impact)
    writeInteger(target_address + 0x0D10, target_data.dmg_zones.zone6.on_dead_disable_all_actors)
    writeInteger(target_address + 0x0D14, target_data.dmg_zones.zone6.explosion_verification)
    writeInteger(target_address + 0x0D18, target_data.dmg_zones.zone6.main_health_affect_capped_zh)
    writeInteger(target_address + 0x0D1C, target_data.dmg_zones.zone6.hit_effect_receiver_type)
    -- //! ================     Z O N E 7
    writeInteger(target_address + 0x0E94, target_data.dmg_zones.zone7.dmg_multiplier)
    writeInteger(target_address + 0x0E98, target_data.dmg_zones.zone7.dmg_multipler_dps)
    writeInteger(target_address + 0x0E9C, target_data.dmg_zones.zone7.proj_drb_resistance)
    writeInteger(target_address + 0x0EA0, target_data.dmg_zones.zone7.armor)
    writeInteger(target_address + 0x0EA4, target_data.dmg_zones.zone7.armor_angle_check)
    writeInteger(target_address + 0x0EA8, target_data.dmg_zones.zone7.max_armor)
    writeInteger(target_address + 0x0EAC, target_data.dmg_zones.zone7.ignore_armor_on_self)
    writeFloat(target_address   + 0x0EB0, target_data.dmg_zones.zone7.health)
    writeInteger(target_address + 0x0EB4, target_data.dmg_zones.zone7.constitution)
    writeByte(target_address    + 0x0EB8, target_data.dmg_zones.zone7.immortal)
    writeFloat(target_address   + 0x0EC0, target_data.dmg_zones.zone7.affects_main_health)
    writeByte(target_address    + 0x0F05, target_data.dmg_zones.zone7.regeneration_enabled)
    writeByte(target_address    + 0x0F06, target_data.dmg_zones.zone7.bleedout_enabled)
    writeByte(target_address    + 0x0F07, target_data.dmg_zones.zone7.affected_by_explosions)
    writeFloat(target_address   + 0x0F08, target_data.dmg_zones.zone7.explosion_dmg_mult)
    writeInteger(target_address + 0x0F0C, target_data.dmg_zones.zone7.affected_by_collision_impact)
    writeInteger(target_address + 0x0F10, target_data.dmg_zones.zone7.on_dead_disable_all_actors)
    writeInteger(target_address + 0x0F14, target_data.dmg_zones.zone7.explosion_verification)
    writeInteger(target_address + 0x0F18, target_data.dmg_zones.zone7.main_health_affect_capped_zh)
    writeInteger(target_address + 0x0F1C, target_data.dmg_zones.zone7.hit_effect_receiver_type)
    -- //! ================     Z O N E 8
    writeInteger(target_address + 0x1094, target_data.dmg_zones.zone8.dmg_multiplier)
    writeInteger(target_address + 0x1098, target_data.dmg_zones.zone8.dmg_multipler_dps)
    writeInteger(target_address + 0x109C, target_data.dmg_zones.zone8.proj_drb_resistance)
    writeInteger(target_address + 0x10A0, target_data.dmg_zones.zone8.armor)
    writeInteger(target_address + 0x10A4, target_data.dmg_zones.zone8.armor_angle_check)
    writeInteger(target_address + 0x10A8, target_data.dmg_zones.zone8.max_armor)
    writeInteger(target_address + 0x10AC, target_data.dmg_zones.zone8.ignore_armor_on_self)
    writeFloat(target_address   + 0x10B0, target_data.dmg_zones.zone8.health)
    writeInteger(target_address + 0x10B4, target_data.dmg_zones.zone8.constitution)
    writeByte(target_address    + 0x10B8, target_data.dmg_zones.zone8.immortal)
    writeFloat(target_address   + 0x10C0, target_data.dmg_zones.zone8.affects_main_health)
    writeByte(target_address    + 0x1105, target_data.dmg_zones.zone8.regeneration_enabled)
    writeByte(target_address    + 0x1106, target_data.dmg_zones.zone8.bleedout_enabled)
    writeByte(target_address    + 0x1107, target_data.dmg_zones.zone8.affected_by_explosions)
    writeFloat(target_address   + 0x1108, target_data.dmg_zones.zone8.explosion_dmg_mult)
    writeInteger(target_address + 0x110C, target_data.dmg_zones.zone8.affected_by_collision_impact)
    writeInteger(target_address + 0x1110, target_data.dmg_zones.zone8.on_dead_disable_all_actors)
    writeInteger(target_address + 0x1114, target_data.dmg_zones.zone8.explosion_verification)
    writeInteger(target_address + 0x1118, target_data.dmg_zones.zone8.main_health_affect_capped_zh)
    writeInteger(target_address + 0x111C, target_data.dmg_zones.zone8.hit_effect_receiver_type)
    -- //! ================     Z O N E 9
    writeInteger(target_address + 0x1294, target_data.dmg_zones.zone9.dmg_multiplier)
    writeInteger(target_address + 0x1298, target_data.dmg_zones.zone9.dmg_multipler_dps)
    writeInteger(target_address + 0x129C, target_data.dmg_zones.zone9.proj_drb_resistance)
    writeInteger(target_address + 0x12A0, target_data.dmg_zones.zone9.armor)
    writeInteger(target_address + 0x12A4, target_data.dmg_zones.zone9.armor_angle_check)
    writeInteger(target_address + 0x12A8, target_data.dmg_zones.zone9.max_armor)
    writeInteger(target_address + 0x12AC, target_data.dmg_zones.zone9.ignore_armor_on_self)
    writeFloat(target_address   + 0x12B0, target_data.dmg_zones.zone9.health)
    writeInteger(target_address + 0x12B4, target_data.dmg_zones.zone9.constitution)
    writeByte(target_address    + 0x12B8, target_data.dmg_zones.zone9.immortal)
    writeFloat(target_address   + 0x12C0, target_data.dmg_zones.zone9.affects_main_health)
    writeByte(target_address    + 0x1305, target_data.dmg_zones.zone9.regeneration_enabled)
    writeByte(target_address    + 0x1306, target_data.dmg_zones.zone9.bleedout_enabled)
    writeByte(target_address    + 0x1307, target_data.dmg_zones.zone9.affected_by_explosions)
    writeFloat(target_address   + 0x1308, target_data.dmg_zones.zone9.explosion_dmg_mult)
    writeInteger(target_address + 0x130C, target_data.dmg_zones.zone9.affected_by_collision_impact)
    writeInteger(target_address + 0x1310, target_data.dmg_zones.zone9.on_dead_disable_all_actors)
    writeInteger(target_address + 0x1314, target_data.dmg_zones.zone9.explosion_verification)
    writeInteger(target_address + 0x1318, target_data.dmg_zones.zone9.main_health_affect_capped_zh)
    writeInteger(target_address + 0x131C, target_data.dmg_zones.zone9.hit_effect_receiver_type)
    -- //! ================     Z O N E 10
    writeInteger(target_address + 0x1494, target_data.dmg_zones.zone10.dmg_multiplier)
    writeInteger(target_address + 0x1498, target_data.dmg_zones.zone10.dmg_multipler_dps)
    writeInteger(target_address + 0x149C, target_data.dmg_zones.zone10.proj_drb_resistance)
    writeInteger(target_address + 0x14A0, target_data.dmg_zones.zone10.armor)
    writeInteger(target_address + 0x14A4, target_data.dmg_zones.zone10.armor_angle_check)
    writeInteger(target_address + 0x14A8, target_data.dmg_zones.zone10.max_armor)
    writeInteger(target_address + 0x14AC, target_data.dmg_zones.zone10.ignore_armor_on_self)
    writeFloat(target_address   + 0x14B0, target_data.dmg_zones.zone10.health)
    writeInteger(target_address + 0x14B4, target_data.dmg_zones.zone10.constitution)
    writeByte(target_address    + 0x14B8, target_data.dmg_zones.zone10.immortal)
    writeFloat(target_address   + 0x14C0, target_data.dmg_zones.zone10.affects_main_health)
    writeByte(target_address    + 0x1505, target_data.dmg_zones.zone10.regeneration_enabled)
    writeByte(target_address    + 0x1506, target_data.dmg_zones.zone10.bleedout_enabled)
    writeByte(target_address    + 0x1507, target_data.dmg_zones.zone10.affected_by_explosions)
    writeFloat(target_address   + 0x1508, target_data.dmg_zones.zone10.explosion_dmg_mult)
    writeInteger(target_address + 0x150C, target_data.dmg_zones.zone10.affected_by_collision_impact)
    writeInteger(target_address + 0x1510, target_data.dmg_zones.zone10.on_dead_disable_all_actors)
    writeInteger(target_address + 0x1514, target_data.dmg_zones.zone10.explosion_verification)
    writeInteger(target_address + 0x1518, target_data.dmg_zones.zone10.main_health_affect_capped_zh)
    writeInteger(target_address + 0x151C, target_data.dmg_zones.zone10.hit_effect_receiver_type)
    -- //! ================     Z O N E 11
    writeInteger(target_address + 0x1694, target_data.dmg_zones.zone11.dmg_multiplier)
    writeInteger(target_address + 0x1698, target_data.dmg_zones.zone11.dmg_multipler_dps)
    writeInteger(target_address + 0x169C, target_data.dmg_zones.zone11.proj_drb_resistance)
    writeInteger(target_address + 0x16A0, target_data.dmg_zones.zone11.armor)
    writeInteger(target_address + 0x16A4, target_data.dmg_zones.zone11.armor_angle_check)
    writeInteger(target_address + 0x16A8, target_data.dmg_zones.zone11.max_armor)
    writeInteger(target_address + 0x16AC, target_data.dmg_zones.zone11.ignore_armor_on_self)
    writeFloat(target_address   + 0x16B0, target_data.dmg_zones.zone11.health)
    writeInteger(target_address + 0x16B4, target_data.dmg_zones.zone11.constitution)
    writeByte(target_address    + 0x16B8, target_data.dmg_zones.zone11.immortal)
    writeFloat(target_address   + 0x16C0, target_data.dmg_zones.zone11.affects_main_health)
    writeByte(target_address    + 0x1705, target_data.dmg_zones.zone11.regeneration_enabled)
    writeByte(target_address    + 0x1706, target_data.dmg_zones.zone11.bleedout_enabled)
    writeByte(target_address    + 0x1707, target_data.dmg_zones.zone11.affected_by_explosions)
    writeFloat(target_address   + 0x1708, target_data.dmg_zones.zone11.explosion_dmg_mult)
    writeInteger(target_address + 0x170C, target_data.dmg_zones.zone11.affected_by_collision_impact)
    writeInteger(target_address + 0x1710, target_data.dmg_zones.zone11.on_dead_disable_all_actors)
    writeInteger(target_address + 0x1714, target_data.dmg_zones.zone11.explosion_verification)
    writeInteger(target_address + 0x1718, target_data.dmg_zones.zone11.main_health_affect_capped_zh)
    writeInteger(target_address + 0x171C, target_data.dmg_zones.zone11.hit_effect_receiver_type)
    -- //! ================     Z O N E 12
    writeInteger(target_address + 0x1894, target_data.dmg_zones.zone12.dmg_multiplier)
    writeInteger(target_address + 0x1898, target_data.dmg_zones.zone12.dmg_multipler_dps)
    writeInteger(target_address + 0x189C, target_data.dmg_zones.zone12.proj_drb_resistance)
    writeInteger(target_address + 0x18A0, target_data.dmg_zones.zone12.armor)
    writeInteger(target_address + 0x18A4, target_data.dmg_zones.zone12.armor_angle_check)
    writeInteger(target_address + 0x18A8, target_data.dmg_zones.zone12.max_armor)
    writeInteger(target_address + 0x18AC, target_data.dmg_zones.zone12.ignore_armor_on_self)
    writeFloat(target_address   + 0x18B0, target_data.dmg_zones.zone12.health)
    writeInteger(target_address + 0x18B4, target_data.dmg_zones.zone12.constitution)
    writeByte(target_address    + 0x18B8, target_data.dmg_zones.zone12.immortal)
    writeFloat(target_address   + 0x18C0, target_data.dmg_zones.zone12.affects_main_health)
    writeByte(target_address    + 0x1905, target_data.dmg_zones.zone12.regeneration_enabled)
    writeByte(target_address    + 0x1906, target_data.dmg_zones.zone12.bleedout_enabled)
    writeByte(target_address    + 0x1907, target_data.dmg_zones.zone12.affected_by_explosions)
    writeFloat(target_address   + 0x1908, target_data.dmg_zones.zone12.explosion_dmg_mult)
    writeInteger(target_address + 0x190C, target_data.dmg_zones.zone12.affected_by_collision_impact)
    writeInteger(target_address + 0x1910, target_data.dmg_zones.zone12.on_dead_disable_all_actors)
    writeInteger(target_address + 0x1914, target_data.dmg_zones.zone12.explosion_verification)
    writeInteger(target_address + 0x1918, target_data.dmg_zones.zone12.main_health_affect_capped_zh)
    writeInteger(target_address + 0x191C, target_data.dmg_zones.zone12.hit_effect_receiver_type)
    -- //! ================     Z O N E 13
    writeInteger(target_address + 0x1A94, target_data.dmg_zones.zone13.dmg_multiplier)
    writeInteger(target_address + 0x1A98, target_data.dmg_zones.zone13.dmg_multipler_dps)
    writeInteger(target_address + 0x1A9C, target_data.dmg_zones.zone13.proj_drb_resistance)
    writeInteger(target_address + 0x1AA0, target_data.dmg_zones.zone13.armor)
    writeInteger(target_address + 0x1AA4, target_data.dmg_zones.zone13.armor_angle_check)
    writeInteger(target_address + 0x1AA8, target_data.dmg_zones.zone13.max_armor)
    writeInteger(target_address + 0x1AAC, target_data.dmg_zones.zone13.ignore_armor_on_self)
    writeFloat(target_address   + 0x1AB0, target_data.dmg_zones.zone13.health)
    writeInteger(target_address + 0x1AB4, target_data.dmg_zones.zone13.constitution)
    writeByte(target_address    + 0x1AB8, target_data.dmg_zones.zone13.immortal)
    writeFloat(target_address   + 0x1AC0, target_data.dmg_zones.zone13.affects_main_health)
    writeByte(target_address    + 0x1B05, target_data.dmg_zones.zone13.regeneration_enabled)
    writeByte(target_address    + 0x1B06, target_data.dmg_zones.zone13.bleedout_enabled)
    writeByte(target_address    + 0x1B07, target_data.dmg_zones.zone13.affected_by_explosions)
    writeFloat(target_address   + 0x1B08, target_data.dmg_zones.zone13.explosion_dmg_mult)
    writeInteger(target_address + 0x1B0C, target_data.dmg_zones.zone13.affected_by_collision_impact)
    writeInteger(target_address + 0x1B10, target_data.dmg_zones.zone13.on_dead_disable_all_actors)
    writeInteger(target_address + 0x1B14, target_data.dmg_zones.zone13.explosion_verification)
    writeInteger(target_address + 0x1B18, target_data.dmg_zones.zone13.main_health_affect_capped_zh)
    writeInteger(target_address + 0x1B1C, target_data.dmg_zones.zone13.hit_effect_receiver_type)
    -- //! ================     Z O N E 14
    writeInteger(target_address + 0x1C94, target_data.dmg_zones.zone14.dmg_multiplier)
    writeInteger(target_address + 0x1C98, target_data.dmg_zones.zone14.dmg_multipler_dps)
    writeInteger(target_address + 0x1C9C, target_data.dmg_zones.zone14.proj_drb_resistance)
    writeInteger(target_address + 0x1CA0, target_data.dmg_zones.zone14.armor)
    writeInteger(target_address + 0x1CA4, target_data.dmg_zones.zone14.armor_angle_check)
    writeInteger(target_address + 0x1CA8, target_data.dmg_zones.zone14.max_armor)
    writeInteger(target_address + 0x1CAC, target_data.dmg_zones.zone14.ignore_armor_on_self)
    writeFloat(target_address   + 0x1CB0, target_data.dmg_zones.zone14.health)
    writeInteger(target_address + 0x1CB4, target_data.dmg_zones.zone14.constitution)
    writeByte(target_address    + 0x1CB8, target_data.dmg_zones.zone14.immortal)
    writeFloat(target_address   + 0x1CC0, target_data.dmg_zones.zone14.affects_main_health)
    writeByte(target_address    + 0x1D05, target_data.dmg_zones.zone14.regeneration_enabled)
    writeByte(target_address    + 0x1D06, target_data.dmg_zones.zone14.bleedout_enabled)
    writeByte(target_address    + 0x1D07, target_data.dmg_zones.zone14.affected_by_explosions)
    writeFloat(target_address   + 0x1D08, target_data.dmg_zones.zone14.explosion_dmg_mult)
    writeInteger(target_address + 0x1D0C, target_data.dmg_zones.zone14.affected_by_collision_impact)
    writeInteger(target_address + 0x1D10, target_data.dmg_zones.zone14.on_dead_disable_all_actors)
    writeInteger(target_address + 0x1D14, target_data.dmg_zones.zone14.explosion_verification)
    writeInteger(target_address + 0x1D18, target_data.dmg_zones.zone14.main_health_affect_capped_zh)
    writeInteger(target_address + 0x1D1C, target_data.dmg_zones.zone14.hit_effect_receiver_type)
    -- //! ================     Z O N E 15
    writeInteger(target_address + 0x1E94, target_data.dmg_zones.zone15.dmg_multiplier)
    writeInteger(target_address + 0x1E98, target_data.dmg_zones.zone15.dmg_multipler_dps)
    writeInteger(target_address + 0x1E9C, target_data.dmg_zones.zone15.proj_drb_resistance)
    writeInteger(target_address + 0x1EA0, target_data.dmg_zones.zone15.armor)
    writeInteger(target_address + 0x1EA4, target_data.dmg_zones.zone15.armor_angle_check)
    writeInteger(target_address + 0x1EA8, target_data.dmg_zones.zone15.max_armor)
    writeInteger(target_address + 0x1EAC, target_data.dmg_zones.zone15.ignore_armor_on_self)
    writeFloat(target_address   + 0x1EB0, target_data.dmg_zones.zone15.health)
    writeInteger(target_address + 0x1EB4, target_data.dmg_zones.zone15.constitution)
    writeByte(target_address    + 0x1EB8, target_data.dmg_zones.zone15.immortal)
    writeFloat(target_address   + 0x1EC0, target_data.dmg_zones.zone15.affects_main_health)
    writeByte(target_address    + 0x1F05, target_data.dmg_zones.zone15.regeneration_enabled)
    writeByte(target_address    + 0x1F06, target_data.dmg_zones.zone15.bleedout_enabled)
    writeByte(target_address    + 0x1F07, target_data.dmg_zones.zone15.affected_by_explosions)
    writeFloat(target_address   + 0x1F08, target_data.dmg_zones.zone15.explosion_dmg_mult)
    writeInteger(target_address + 0x1F0C, target_data.dmg_zones.zone15.affected_by_collision_impact)
    writeInteger(target_address + 0x1F10, target_data.dmg_zones.zone15.on_dead_disable_all_actors)
    writeInteger(target_address + 0x1F14, target_data.dmg_zones.zone15.explosion_verification)
    writeInteger(target_address + 0x1F18, target_data.dmg_zones.zone15.main_health_affect_capped_zh)
    writeInteger(target_address + 0x1F1C, target_data.dmg_zones.zone15.hit_effect_receiver_type)
    -- //! ================     Z O N E 16
    writeInteger(target_address + 0x2094, target_data.dmg_zones.zone16.dmg_multiplier)
    writeInteger(target_address + 0x2098, target_data.dmg_zones.zone16.dmg_multipler_dps)
    writeInteger(target_address + 0x209C, target_data.dmg_zones.zone16.proj_drb_resistance)
    writeInteger(target_address + 0x20A0, target_data.dmg_zones.zone16.armor)
    writeInteger(target_address + 0x20A4, target_data.dmg_zones.zone16.armor_angle_check)
    writeInteger(target_address + 0x20A8, target_data.dmg_zones.zone16.max_armor)
    writeInteger(target_address + 0x20AC, target_data.dmg_zones.zone16.ignore_armor_on_self)
    writeFloat(target_address   + 0x20B0, target_data.dmg_zones.zone16.health)
    writeInteger(target_address + 0x20B4, target_data.dmg_zones.zone16.constitution)
    writeByte(target_address    + 0x20B8, target_data.dmg_zones.zone16.immortal)
    writeFloat(target_address   + 0x20C0, target_data.dmg_zones.zone16.affects_main_health)
    writeByte(target_address    + 0x2105, target_data.dmg_zones.zone16.regeneration_enabled)
    writeByte(target_address    + 0x2106, target_data.dmg_zones.zone16.bleedout_enabled)
    writeByte(target_address    + 0x2107, target_data.dmg_zones.zone16.affected_by_explosions)
    writeFloat(target_address   + 0x2108, target_data.dmg_zones.zone16.explosion_dmg_mult)
    writeInteger(target_address + 0x210C, target_data.dmg_zones.zone16.affected_by_collision_impact)
    writeInteger(target_address + 0x2110, target_data.dmg_zones.zone16.on_dead_disable_all_actors)
    writeInteger(target_address + 0x2114, target_data.dmg_zones.zone16.explosion_verification)
    writeInteger(target_address + 0x2118, target_data.dmg_zones.zone16.main_health_affect_capped_zh)
    writeInteger(target_address + 0x211C, target_data.dmg_zones.zone16.hit_effect_receiver_type)
    -- //! ================     Z O N E 17
    writeInteger(target_address + 0x2294, target_data.dmg_zones.zone17.dmg_multiplier)
    writeInteger(target_address + 0x2298, target_data.dmg_zones.zone17.dmg_multipler_dps)
    writeInteger(target_address + 0x229C, target_data.dmg_zones.zone17.proj_drb_resistance)
    writeInteger(target_address + 0x22A0, target_data.dmg_zones.zone17.armor)
    writeInteger(target_address + 0x22A4, target_data.dmg_zones.zone17.armor_angle_check)
    writeInteger(target_address + 0x22A8, target_data.dmg_zones.zone17.max_armor)
    writeInteger(target_address + 0x22AC, target_data.dmg_zones.zone17.ignore_armor_on_self)
    writeFloat(target_address   + 0x22B0, target_data.dmg_zones.zone17.health)
    writeInteger(target_address + 0x22B4, target_data.dmg_zones.zone17.constitution)
    writeByte(target_address    + 0x22B8, target_data.dmg_zones.zone17.immortal)
    writeFloat(target_address   + 0x22C0, target_data.dmg_zones.zone17.affects_main_health)
    writeByte(target_address    + 0x2305, target_data.dmg_zones.zone17.regeneration_enabled)
    writeByte(target_address    + 0x2306, target_data.dmg_zones.zone17.bleedout_enabled)
    writeByte(target_address    + 0x2307, target_data.dmg_zones.zone17.affected_by_explosions)
    writeFloat(target_address   + 0x2308, target_data.dmg_zones.zone17.explosion_dmg_mult)
    writeInteger(target_address + 0x230C, target_data.dmg_zones.zone17.affected_by_collision_impact)
    writeInteger(target_address + 0x2310, target_data.dmg_zones.zone17.on_dead_disable_all_actors)
    writeInteger(target_address + 0x2314, target_data.dmg_zones.zone17.explosion_verification)
    writeInteger(target_address + 0x2318, target_data.dmg_zones.zone17.main_health_affect_capped_zh)
    writeInteger(target_address + 0x231C, target_data.dmg_zones.zone17.hit_effect_receiver_type)
    -- //! ================     Z O N E 18
    writeInteger(target_address + 0x2494, target_data.dmg_zones.zone18.dmg_multiplier)
    writeInteger(target_address + 0x2498, target_data.dmg_zones.zone18.dmg_multipler_dps)
    writeInteger(target_address + 0x249C, target_data.dmg_zones.zone18.proj_drb_resistance)
    writeInteger(target_address + 0x24A0, target_data.dmg_zones.zone18.armor)
    writeInteger(target_address + 0x24A4, target_data.dmg_zones.zone18.armor_angle_check)
    writeInteger(target_address + 0x24A8, target_data.dmg_zones.zone18.max_armor)
    writeInteger(target_address + 0x24AC, target_data.dmg_zones.zone18.ignore_armor_on_self)
    writeFloat(target_address   + 0x24B0, target_data.dmg_zones.zone18.health)
    writeInteger(target_address + 0x24B4, target_data.dmg_zones.zone18.constitution)
    writeByte(target_address    + 0x24B8, target_data.dmg_zones.zone18.immortal)
    writeFloat(target_address   + 0x24C0, target_data.dmg_zones.zone18.affects_main_health)
    writeByte(target_address    + 0x2505, target_data.dmg_zones.zone18.regeneration_enabled)
    writeByte(target_address    + 0x2506, target_data.dmg_zones.zone18.bleedout_enabled)
    writeByte(target_address    + 0x2507, target_data.dmg_zones.zone18.affected_by_explosions)
    writeFloat(target_address   + 0x2508, target_data.dmg_zones.zone18.explosion_dmg_mult)
    writeInteger(target_address + 0x250C, target_data.dmg_zones.zone18.affected_by_collision_impact)
    writeInteger(target_address + 0x2510, target_data.dmg_zones.zone18.on_dead_disable_all_actors)
    writeInteger(target_address + 0x2514, target_data.dmg_zones.zone18.explosion_verification)
    writeInteger(target_address + 0x2518, target_data.dmg_zones.zone18.main_health_affect_capped_zh)
    writeInteger(target_address + 0x251C, target_data.dmg_zones.zone18.hit_effect_receiver_type)
    writeInteger(target_address + 0x2694, target_data.dmg_zones.zone19.dmg_multiplier)
    writeInteger(target_address + 0x2698, target_data.dmg_zones.zone19.dmg_multipler_dps)
    writeInteger(target_address + 0x269C, target_data.dmg_zones.zone19.proj_drb_resistance)
    writeInteger(target_address + 0x26A0, target_data.dmg_zones.zone19.armor)
    writeInteger(target_address + 0x26A4, target_data.dmg_zones.zone19.armor_angle_check)
    writeInteger(target_address + 0x26A8, target_data.dmg_zones.zone19.max_armor)
    writeInteger(target_address + 0x26AC, target_data.dmg_zones.zone19.ignore_armor_on_self)
    writeFloat(target_address   + 0x26B0, target_data.dmg_zones.zone19.health)
    writeInteger(target_address + 0x26B4, target_data.dmg_zones.zone19.constitution)
    writeByte(target_address    + 0x26B8, target_data.dmg_zones.zone19.immortal)
    writeFloat(target_address   + 0x26C0, target_data.dmg_zones.zone19.affects_main_health)
    writeByte(target_address    + 0x2705, target_data.dmg_zones.zone19.regeneration_enabled)
    writeByte(target_address    + 0x2706, target_data.dmg_zones.zone19.bleedout_enabled)
    writeByte(target_address    + 0x2707, target_data.dmg_zones.zone19.affected_by_explosions)
    writeFloat(target_address   + 0x2708, target_data.dmg_zones.zone19.explosion_dmg_mult)
    writeInteger(target_address + 0x270C, target_data.dmg_zones.zone19.affected_by_collision_impact)
    writeInteger(target_address + 0x2710, target_data.dmg_zones.zone19.on_dead_disable_all_actors)
    writeInteger(target_address + 0x2714, target_data.dmg_zones.zone19.explosion_verification)
    writeInteger(target_address + 0x2718, target_data.dmg_zones.zone19.main_health_affect_capped_zh)
    writeInteger(target_address + 0x271C, target_data.dmg_zones.zone19.hit_effect_receiver_type)
    -- //! ================     Z O N E 20
    writeInteger(target_address + 0x2894, target_data.dmg_zones.zone20.dmg_multiplier)
    writeInteger(target_address + 0x2898, target_data.dmg_zones.zone20.dmg_multipler_dps)
    writeInteger(target_address + 0x289C, target_data.dmg_zones.zone20.proj_drb_resistance)
    writeInteger(target_address + 0x28A0, target_data.dmg_zones.zone20.armor)
    writeInteger(target_address + 0x28A4, target_data.dmg_zones.zone20.armor_angle_check)
    writeInteger(target_address + 0x28A8, target_data.dmg_zones.zone20.max_armor)
    writeInteger(target_address + 0x28AC, target_data.dmg_zones.zone20.ignore_armor_on_self)
    writeFloat(target_address   + 0x28B0, target_data.dmg_zones.zone20.health)
    writeInteger(target_address + 0x28B4, target_data.dmg_zones.zone20.constitution)
    writeByte(target_address    + 0x28B8, target_data.dmg_zones.zone20.immortal)
    writeFloat(target_address   + 0x28C0, target_data.dmg_zones.zone20.affects_main_health)
    writeByte(target_address    + 0x2905, target_data.dmg_zones.zone20.regeneration_enabled)
    writeByte(target_address    + 0x2906, target_data.dmg_zones.zone20.bleedout_enabled)
    writeByte(target_address    + 0x2907, target_data.dmg_zones.zone20.affected_by_explosions)
    writeFloat(target_address   + 0x2908, target_data.dmg_zones.zone20.explosion_dmg_mult)
    writeInteger(target_address + 0x290C, target_data.dmg_zones.zone20.affected_by_collision_impact)
    writeInteger(target_address + 0x2910, target_data.dmg_zones.zone20.on_dead_disable_all_actors)
    writeInteger(target_address + 0x2914, target_data.dmg_zones.zone20.explosion_verification)
    writeInteger(target_address + 0x2918, target_data.dmg_zones.zone20.main_health_affect_capped_zh)
    writeInteger(target_address + 0x291C, target_data.dmg_zones.zone20.hit_effect_receiver_type)
    -- //! ================     Z O N E 21
    writeInteger(target_address + 0x2A94, target_data.dmg_zones.zone21.dmg_multiplier)
    writeInteger(target_address + 0x2A98, target_data.dmg_zones.zone21.dmg_multipler_dps)
    writeInteger(target_address + 0x2A9C, target_data.dmg_zones.zone21.proj_drb_resistance)
    writeInteger(target_address + 0x2AA0, target_data.dmg_zones.zone21.armor)
    writeInteger(target_address + 0x2AA4, target_data.dmg_zones.zone21.armor_angle_check)
    writeInteger(target_address + 0x2AA8, target_data.dmg_zones.zone21.max_armor)
    writeInteger(target_address + 0x2AAC, target_data.dmg_zones.zone21.ignore_armor_on_self)
    writeFloat(target_address   + 0x2AB0, target_data.dmg_zones.zone21.health)
    writeInteger(target_address + 0x2AB4, target_data.dmg_zones.zone21.constitution)
    writeByte(target_address    + 0x2AB8, target_data.dmg_zones.zone21.immortal)
    writeFloat(target_address   + 0x2AC0, target_data.dmg_zones.zone21.affects_main_health)
    writeByte(target_address    + 0x2B05, target_data.dmg_zones.zone21.regeneration_enabled)
    writeByte(target_address    + 0x2B06, target_data.dmg_zones.zone21.bleedout_enabled)
    writeByte(target_address    + 0x2B07, target_data.dmg_zones.zone21.affected_by_explosions)
    writeFloat(target_address   + 0x2B08, target_data.dmg_zones.zone21.explosion_dmg_mult)
    writeInteger(target_address + 0x2B0C, target_data.dmg_zones.zone21.affected_by_collision_impact)
    writeInteger(target_address + 0x2B10, target_data.dmg_zones.zone21.on_dead_disable_all_actors)
    writeInteger(target_address + 0x2B14, target_data.dmg_zones.zone21.explosion_verification)
    writeInteger(target_address + 0x2B18, target_data.dmg_zones.zone21.main_health_affect_capped_zh)
    writeInteger(target_address + 0x2B1C, target_data.dmg_zones.zone21.hit_effect_receiver_type)
    -- //! ================     Z O N E 22
    writeInteger(target_address + 0x2C94, target_data.dmg_zones.zone22.dmg_multiplier)
    writeInteger(target_address + 0x2C98, target_data.dmg_zones.zone22.dmg_multipler_dps)
    writeInteger(target_address + 0x2C9C, target_data.dmg_zones.zone22.proj_drb_resistance)
    writeInteger(target_address + 0x2CA0, target_data.dmg_zones.zone22.armor)
    writeInteger(target_address + 0x2CA4, target_data.dmg_zones.zone22.armor_angle_check)
    writeInteger(target_address + 0x2CA8, target_data.dmg_zones.zone22.max_armor)
    writeInteger(target_address + 0x2CAC, target_data.dmg_zones.zone22.ignore_armor_on_self)
    writeFloat(target_address   + 0x2CB0, target_data.dmg_zones.zone22.health)
    writeInteger(target_address + 0x2CB4, target_data.dmg_zones.zone22.constitution)
    writeByte(target_address    + 0x2CB8, target_data.dmg_zones.zone22.immortal)
    writeFloat(target_address   + 0x2CC0, target_data.dmg_zones.zone22.affects_main_health)
    writeByte(target_address    + 0x2D05, target_data.dmg_zones.zone22.regeneration_enabled)
    writeByte(target_address    + 0x2D06, target_data.dmg_zones.zone22.bleedout_enabled)
    writeByte(target_address    + 0x2D07, target_data.dmg_zones.zone22.affected_by_explosions)
    writeFloat(target_address   + 0x2D08, target_data.dmg_zones.zone22.explosion_dmg_mult)
    writeInteger(target_address + 0x2D0C, target_data.dmg_zones.zone22.affected_by_collision_impact)
    writeInteger(target_address + 0x2D10, target_data.dmg_zones.zone22.on_dead_disable_all_actors)
    writeInteger(target_address + 0x2D14, target_data.dmg_zones.zone22.explosion_verification)
    writeInteger(target_address + 0x2D18, target_data.dmg_zones.zone22.main_health_affect_capped_zh)
    writeInteger(target_address + 0x2D1C, target_data.dmg_zones.zone22.hit_effect_receiver_type)
    -- //! ================     Z O N E 23
    writeInteger(target_address + 0x2E94, target_data.dmg_zones.zone23.dmg_multiplier)
    writeInteger(target_address + 0x2E98, target_data.dmg_zones.zone23.dmg_multipler_dps)
    writeInteger(target_address + 0x2E9C, target_data.dmg_zones.zone23.proj_drb_resistance)
    writeInteger(target_address + 0x2EA0, target_data.dmg_zones.zone23.armor)
    writeInteger(target_address + 0x2EA4, target_data.dmg_zones.zone23.armor_angle_check)
    writeInteger(target_address + 0x2EA8, target_data.dmg_zones.zone23.max_armor)
    writeInteger(target_address + 0x2EAC, target_data.dmg_zones.zone23.ignore_armor_on_self)
    writeFloat(target_address   + 0x2EB0, target_data.dmg_zones.zone23.health)
    writeInteger(target_address + 0x2EB4, target_data.dmg_zones.zone23.constitution)
    writeByte(target_address    + 0x2EB8, target_data.dmg_zones.zone23.immortal)
    writeFloat(target_address   + 0x2EC0, target_data.dmg_zones.zone23.affects_main_health)
    writeByte(target_address    + 0x2F05, target_data.dmg_zones.zone23.regeneration_enabled)
    writeByte(target_address    + 0x2F06, target_data.dmg_zones.zone23.bleedout_enabled)
    writeByte(target_address    + 0x2F07, target_data.dmg_zones.zone23.affected_by_explosions)
    writeFloat(target_address   + 0x2F08, target_data.dmg_zones.zone23.explosion_dmg_mult)
    writeInteger(target_address + 0x2F0C, target_data.dmg_zones.zone23.affected_by_collision_impact)
    writeInteger(target_address + 0x2F10, target_data.dmg_zones.zone23.on_dead_disable_all_actors)
    writeInteger(target_address + 0x2F14, target_data.dmg_zones.zone23.explosion_verification)
    writeInteger(target_address + 0x2F18, target_data.dmg_zones.zone23.main_health_affect_capped_zh)
    writeInteger(target_address + 0x2F1C, target_data.dmg_zones.zone23.hit_effect_receiver_type)
    writeInteger(target_address + 0x3094, target_data.dmg_zones.zone24.dmg_multiplier)
    writeInteger(target_address + 0x3098, target_data.dmg_zones.zone24.dmg_multipler_dps)
    writeInteger(target_address + 0x309C, target_data.dmg_zones.zone24.proj_drb_resistance)
    writeInteger(target_address + 0x30A0, target_data.dmg_zones.zone24.armor)
    writeInteger(target_address + 0x30A4, target_data.dmg_zones.zone24.armor_angle_check)
    writeInteger(target_address + 0x30A8, target_data.dmg_zones.zone24.max_armor)
    writeInteger(target_address + 0x30AC, target_data.dmg_zones.zone24.ignore_armor_on_self)
    writeFloat(target_address   + 0x30B0, target_data.dmg_zones.zone24.health)
    writeInteger(target_address + 0x30B4, target_data.dmg_zones.zone24.constitution)
    writeByte(target_address    + 0x30B8, target_data.dmg_zones.zone24.immortal)
    writeFloat(target_address   + 0x30C0, target_data.dmg_zones.zone24.affects_main_health)
    writeByte(target_address    + 0x3105, target_data.dmg_zones.zone24.regeneration_enabled)
    writeByte(target_address    + 0x3106, target_data.dmg_zones.zone24.bleedout_enabled)
    writeByte(target_address    + 0x3107, target_data.dmg_zones.zone24.affected_by_explosions)
    writeFloat(target_address   + 0x3108, target_data.dmg_zones.zone24.explosion_dmg_mult)
    writeInteger(target_address + 0x310C, target_data.dmg_zones.zone24.affected_by_collision_impact)
    writeInteger(target_address + 0x3110, target_data.dmg_zones.zone24.on_dead_disable_all_actors)
    writeInteger(target_address + 0x3114, target_data.dmg_zones.zone24.explosion_verification)
    writeInteger(target_address + 0x3118, target_data.dmg_zones.zone24.main_health_affect_capped_zh)
    writeInteger(target_address + 0x311C, target_data.dmg_zones.zone24.hit_effect_receiver_type)
    writeInteger(target_address + 0x3294, target_data.dmg_zones.zone25.dmg_multiplier)
    writeInteger(target_address + 0x3298, target_data.dmg_zones.zone25.dmg_multipler_dps)
    writeInteger(target_address + 0x329C, target_data.dmg_zones.zone25.proj_drb_resistance)
    writeInteger(target_address + 0x32A0, target_data.dmg_zones.zone25.armor)
    writeInteger(target_address + 0x32A4, target_data.dmg_zones.zone25.armor_angle_check)
    writeInteger(target_address + 0x32A8, target_data.dmg_zones.zone25.max_armor)
    writeInteger(target_address + 0x32AC, target_data.dmg_zones.zone25.ignore_armor_on_self)
    writeFloat(target_address   + 0x32B0, target_data.dmg_zones.zone25.health)
    writeInteger(target_address + 0x32B4, target_data.dmg_zones.zone25.constitution)
    writeByte(target_address    + 0x32B8, target_data.dmg_zones.zone25.immortal)
    writeFloat(target_address   + 0x32C0, target_data.dmg_zones.zone25.affects_main_health)
    writeByte(target_address    + 0x3305, target_data.dmg_zones.zone25.regeneration_enabled)
    writeByte(target_address    + 0x3306, target_data.dmg_zones.zone25.bleedout_enabled)
    writeByte(target_address    + 0x3307, target_data.dmg_zones.zone25.affected_by_explosions)
    writeFloat(target_address   + 0x3308, target_data.dmg_zones.zone25.explosion_dmg_mult)
    writeInteger(target_address + 0x330C, target_data.dmg_zones.zone25.affected_by_collision_impact)
    writeInteger(target_address + 0x3310, target_data.dmg_zones.zone25.on_dead_disable_all_actors)
    writeInteger(target_address + 0x3314, target_data.dmg_zones.zone25.explosion_verification)
    writeInteger(target_address + 0x3318, target_data.dmg_zones.zone25.main_health_affect_capped_zh)
    writeInteger(target_address + 0x331C, target_data.dmg_zones.zone25.hit_effect_receiver_type)
    writeInteger(target_address + 0x3494, target_data.dmg_zones.zone26.dmg_multiplier)
    writeInteger(target_address + 0x3498, target_data.dmg_zones.zone26.dmg_multipler_dps)
    writeInteger(target_address + 0x349C, target_data.dmg_zones.zone26.proj_drb_resistance)
    writeInteger(target_address + 0x34A0, target_data.dmg_zones.zone26.armor)
    writeInteger(target_address + 0x34A4, target_data.dmg_zones.zone26.armor_angle_check)
    writeInteger(target_address + 0x34A8, target_data.dmg_zones.zone26.max_armor)
    writeInteger(target_address + 0x34AC, target_data.dmg_zones.zone26.ignore_armor_on_self)
    writeFloat(target_address   + 0x34B0, target_data.dmg_zones.zone26.health)
    writeInteger(target_address + 0x34B4, target_data.dmg_zones.zone26.constitution)
    writeByte(target_address    + 0x34B8, target_data.dmg_zones.zone26.immortal)
    writeFloat(target_address   + 0x34C0, target_data.dmg_zones.zone26.affects_main_health)
    writeByte(target_address    + 0x3505, target_data.dmg_zones.zone26.regeneration_enabled)
    writeByte(target_address    + 0x3506, target_data.dmg_zones.zone26.bleedout_enabled)
    writeByte(target_address    + 0x3507, target_data.dmg_zones.zone26.affected_by_explosions)
    writeFloat(target_address   + 0x3508, target_data.dmg_zones.zone26.explosion_dmg_mult)
    writeInteger(target_address + 0x350C, target_data.dmg_zones.zone26.affected_by_collision_impact)
    writeInteger(target_address + 0x3510, target_data.dmg_zones.zone26.on_dead_disable_all_actors)
    writeInteger(target_address + 0x3514, target_data.dmg_zones.zone26.explosion_verification)
    writeInteger(target_address + 0x3518, target_data.dmg_zones.zone26.main_health_affect_capped_zh)
    writeInteger(target_address + 0x351C, target_data.dmg_zones.zone26.hit_effect_receiver_type)
    writeInteger(target_address + 0x3694, target_data.dmg_zones.zone27.dmg_multiplier)
    writeInteger(target_address + 0x3698, target_data.dmg_zones.zone27.dmg_multipler_dps)
    writeInteger(target_address + 0x369C, target_data.dmg_zones.zone27.proj_drb_resistance)
    writeInteger(target_address + 0x36A0, target_data.dmg_zones.zone27.armor)
    writeInteger(target_address + 0x36A4, target_data.dmg_zones.zone27.armor_angle_check)
    writeInteger(target_address + 0x36A8, target_data.dmg_zones.zone27.max_armor)
    writeInteger(target_address + 0x36AC, target_data.dmg_zones.zone27.ignore_armor_on_self)
    writeFloat(target_address   + 0x36B0, target_data.dmg_zones.zone27.health)
    writeInteger(target_address + 0x36B4, target_data.dmg_zones.zone27.constitution)
    writeByte(target_address    + 0x36B8, target_data.dmg_zones.zone27.immortal)
    writeFloat(target_address   + 0x36C0, target_data.dmg_zones.zone27.affects_main_health)
    writeByte(target_address    + 0x3705, target_data.dmg_zones.zone27.regeneration_enabled)
    writeByte(target_address    + 0x3706, target_data.dmg_zones.zone27.bleedout_enabled)
    writeByte(target_address    + 0x3707, target_data.dmg_zones.zone27.affected_by_explosions)
    writeFloat(target_address   + 0x3708, target_data.dmg_zones.zone27.explosion_dmg_mult)
    writeInteger(target_address + 0x370C, target_data.dmg_zones.zone27.affected_by_collision_impact)
    writeInteger(target_address + 0x3710, target_data.dmg_zones.zone27.on_dead_disable_all_actors)
    writeInteger(target_address + 0x3714, target_data.dmg_zones.zone27.explosion_verification)
    writeInteger(target_address + 0x3718, target_data.dmg_zones.zone27.main_health_affect_capped_zh)
    writeInteger(target_address + 0x371C, target_data.dmg_zones.zone27.hit_effect_receiver_type)
    writeInteger(target_address + 0x3894, target_data.dmg_zones.zone28.dmg_multiplier)
    writeInteger(target_address + 0x3898, target_data.dmg_zones.zone28.dmg_multipler_dps)
    writeInteger(target_address + 0x389C, target_data.dmg_zones.zone28.proj_drb_resistance)
    writeInteger(target_address + 0x38A0, target_data.dmg_zones.zone28.armor)
    writeInteger(target_address + 0x38A4, target_data.dmg_zones.zone28.armor_angle_check)
    writeInteger(target_address + 0x38A8, target_data.dmg_zones.zone28.max_armor)
    writeInteger(target_address + 0x38AC, target_data.dmg_zones.zone28.ignore_armor_on_self)
    writeFloat(target_address   + 0x38B0, target_data.dmg_zones.zone28.health)
    writeInteger(target_address + 0x38B4, target_data.dmg_zones.zone28.constitution)
    writeByte(target_address    + 0x38B8, target_data.dmg_zones.zone28.immortal)
    writeFloat(target_address   + 0x38C0, target_data.dmg_zones.zone28.affects_main_health)
    writeByte(target_address    + 0x3905, target_data.dmg_zones.zone28.regeneration_enabled)
    writeByte(target_address    + 0x3906, target_data.dmg_zones.zone28.bleedout_enabled)
    writeByte(target_address    + 0x3907, target_data.dmg_zones.zone28.affected_by_explosions)
    writeFloat(target_address   + 0x3908, target_data.dmg_zones.zone28.explosion_dmg_mult)
    writeInteger(target_address + 0x390C, target_data.dmg_zones.zone28.affected_by_collision_impact)
    writeInteger(target_address + 0x3910, target_data.dmg_zones.zone28.on_dead_disable_all_actors)
    writeInteger(target_address + 0x3914, target_data.dmg_zones.zone28.explosion_verification)
    writeInteger(target_address + 0x3918, target_data.dmg_zones.zone28.main_health_affect_capped_zh)
    writeInteger(target_address + 0x391C, target_data.dmg_zones.zone28.hit_effect_receiver_type)
    writeInteger(target_address + 0x3A94, target_data.dmg_zones.zone29.dmg_multiplier)
    writeInteger(target_address + 0x3A98, target_data.dmg_zones.zone29.dmg_multipler_dps)
    writeInteger(target_address + 0x3A9C, target_data.dmg_zones.zone29.proj_drb_resistance)
    writeInteger(target_address + 0x3AA0, target_data.dmg_zones.zone29.armor)
    writeInteger(target_address + 0x3AA4, target_data.dmg_zones.zone29.armor_angle_check)
    writeInteger(target_address + 0x3AA8, target_data.dmg_zones.zone29.max_armor)
    writeInteger(target_address + 0x3AAC, target_data.dmg_zones.zone29.ignore_armor_on_self)
    writeFloat(target_address   + 0x3AB0, target_data.dmg_zones.zone29.health)
    writeInteger(target_address + 0x3AB4, target_data.dmg_zones.zone29.constitution)
    writeByte(target_address    + 0x3AB8, target_data.dmg_zones.zone29.immortal)
    writeFloat(target_address   + 0x3AC0, target_data.dmg_zones.zone29.affects_main_health)
    writeByte(target_address    + 0x3B05, target_data.dmg_zones.zone29.regeneration_enabled)
    writeByte(target_address    + 0x3B06, target_data.dmg_zones.zone29.bleedout_enabled)
    writeByte(target_address    + 0x3B07, target_data.dmg_zones.zone29.affected_by_explosions)
    writeFloat(target_address   + 0x3B08, target_data.dmg_zones.zone29.explosion_dmg_mult)
    writeInteger(target_address + 0x3B0C, target_data.dmg_zones.zone29.affected_by_collision_impact)
    writeInteger(target_address + 0x3B10, target_data.dmg_zones.zone29.on_dead_disable_all_actors)
    writeInteger(target_address + 0x3B14, target_data.dmg_zones.zone29.explosion_verification)
    writeInteger(target_address + 0x3B18, target_data.dmg_zones.zone29.main_health_affect_capped_zh)
    writeInteger(target_address + 0x3B1C, target_data.dmg_zones.zone29.hit_effect_receiver_type)
    writeInteger(target_address + 0x3C94, target_data.dmg_zones.zone30.dmg_multiplier)
    writeInteger(target_address + 0x3C98, target_data.dmg_zones.zone30.dmg_multipler_dps)
    writeInteger(target_address + 0x3C9C, target_data.dmg_zones.zone30.proj_drb_resistance)
    writeInteger(target_address + 0x3CA0, target_data.dmg_zones.zone30.armor)
    writeInteger(target_address + 0x3CA4, target_data.dmg_zones.zone30.armor_angle_check)
    writeInteger(target_address + 0x3CA8, target_data.dmg_zones.zone30.max_armor)
    writeInteger(target_address + 0x3CAC, target_data.dmg_zones.zone30.ignore_armor_on_self)
    writeFloat(target_address   + 0x3CB0, target_data.dmg_zones.zone30.health)
    writeInteger(target_address + 0x3CB4, target_data.dmg_zones.zone30.constitution)
    writeByte(target_address    + 0x3CB8, target_data.dmg_zones.zone30.immortal)
    writeFloat(target_address   + 0x3CC0, target_data.dmg_zones.zone30.affects_main_health)
    writeByte(target_address    + 0x3D05, target_data.dmg_zones.zone30.regeneration_enabled)
    writeByte(target_address    + 0x3D06, target_data.dmg_zones.zone30.bleedout_enabled)
    writeByte(target_address    + 0x3D07, target_data.dmg_zones.zone30.affected_by_explosions)
    writeFloat(target_address   + 0x3D08, target_data.dmg_zones.zone30.explosion_dmg_mult)
    writeInteger(target_address + 0x3D0C, target_data.dmg_zones.zone30.affected_by_collision_impact)
    writeInteger(target_address + 0x3D10, target_data.dmg_zones.zone30.on_dead_disable_all_actors)
    writeInteger(target_address + 0x3D14, target_data.dmg_zones.zone30.explosion_verification)
    writeInteger(target_address + 0x3D18, target_data.dmg_zones.zone30.main_health_affect_capped_zh)
    writeInteger(target_address + 0x3D1C, target_data.dmg_zones.zone30.hit_effect_receiver_type)
    writeInteger(target_address + 0x3E94, target_data.dmg_zones.zone31.dmg_multiplier)
    writeInteger(target_address + 0x3E98, target_data.dmg_zones.zone31.dmg_multipler_dps)
    writeInteger(target_address + 0x3E9C, target_data.dmg_zones.zone31.proj_drb_resistance)
    writeInteger(target_address + 0x3EA0, target_data.dmg_zones.zone31.armor)
    writeInteger(target_address + 0x3EA4, target_data.dmg_zones.zone31.armor_angle_check)
    writeInteger(target_address + 0x3EA8, target_data.dmg_zones.zone31.max_armor)
    writeInteger(target_address + 0x3EAC, target_data.dmg_zones.zone31.ignore_armor_on_self)
    writeFloat(target_address   + 0x3EB0, target_data.dmg_zones.zone31.health)
    writeInteger(target_address + 0x3EB4, target_data.dmg_zones.zone31.constitution)
    writeByte(target_address    + 0x3EB8, target_data.dmg_zones.zone31.immortal)
    writeFloat(target_address   + 0x3EC0, target_data.dmg_zones.zone31.affects_main_health)
    writeByte(target_address    + 0x3F05, target_data.dmg_zones.zone31.regeneration_enabled)
    writeByte(target_address    + 0x3F06, target_data.dmg_zones.zone31.bleedout_enabled)
    writeByte(target_address    + 0x3F07, target_data.dmg_zones.zone31.affected_by_explosions)
    writeFloat(target_address   + 0x3F08, target_data.dmg_zones.zone31.explosion_dmg_mult)
    writeInteger(target_address + 0x3F0C, target_data.dmg_zones.zone31.affected_by_collision_impact)
    writeInteger(target_address + 0x3F10, target_data.dmg_zones.zone31.on_dead_disable_all_actors)
    writeInteger(target_address + 0x3F14, target_data.dmg_zones.zone31.explosion_verification)
    writeInteger(target_address + 0x3F18, target_data.dmg_zones.zone31.main_health_affect_capped_zh)
    writeInteger(target_address + 0x3F1C, target_data.dmg_zones.zone31.hit_effect_receiver_type)
    writeInteger(target_address + 0x4094, target_data.dmg_zones.zone32.dmg_multiplier)
    writeInteger(target_address + 0x4098, target_data.dmg_zones.zone32.dmg_multipler_dps)
    writeInteger(target_address + 0x409C, target_data.dmg_zones.zone32.proj_drb_resistance)
    writeInteger(target_address + 0x40A0, target_data.dmg_zones.zone32.armor)
    writeInteger(target_address + 0x40A4, target_data.dmg_zones.zone32.armor_angle_check)
    writeInteger(target_address + 0x40A8, target_data.dmg_zones.zone32.max_armor)
    writeInteger(target_address + 0x40AC, target_data.dmg_zones.zone32.ignore_armor_on_self)
    writeFloat(target_address   + 0x40B0, target_data.dmg_zones.zone32.health)
    writeInteger(target_address + 0x40B4, target_data.dmg_zones.zone32.constitution)
    writeByte(target_address    + 0x40B8, target_data.dmg_zones.zone32.immortal)
    writeFloat(target_address   + 0x40C0, target_data.dmg_zones.zone32.affects_main_health)
    writeByte(target_address    + 0x4105, target_data.dmg_zones.zone32.regeneration_enabled)
    writeByte(target_address    + 0x4106, target_data.dmg_zones.zone32.bleedout_enabled)
    writeByte(target_address    + 0x4107, target_data.dmg_zones.zone32.affected_by_explosions)
    writeFloat(target_address   + 0x4108, target_data.dmg_zones.zone32.explosion_dmg_mult)
    writeInteger(target_address + 0x410C, target_data.dmg_zones.zone32.affected_by_collision_impact)
    writeInteger(target_address + 0x4110, target_data.dmg_zones.zone32.on_dead_disable_all_actors)
    writeInteger(target_address + 0x4114, target_data.dmg_zones.zone32.explosion_verification)
    writeInteger(target_address + 0x4118, target_data.dmg_zones.zone32.main_health_affect_capped_zh)
    writeInteger(target_address + 0x411C, target_data.dmg_zones.zone32.hit_effect_receiver_type)
    writeInteger(target_address + 0x4294, target_data.dmg_zones.zone33.dmg_multiplier)
    writeInteger(target_address + 0x4298, target_data.dmg_zones.zone33.dmg_multipler_dps)
    writeInteger(target_address + 0x429C, target_data.dmg_zones.zone33.proj_drb_resistance)
    writeInteger(target_address + 0x42A0, target_data.dmg_zones.zone33.armor)
    writeInteger(target_address + 0x42A4, target_data.dmg_zones.zone33.armor_angle_check)
    writeInteger(target_address + 0x42A8, target_data.dmg_zones.zone33.max_armor)
    writeInteger(target_address + 0x42AC, target_data.dmg_zones.zone33.ignore_armor_on_self)
    writeFloat(target_address   + 0x42B0, target_data.dmg_zones.zone33.health)
    writeInteger(target_address + 0x42B4, target_data.dmg_zones.zone33.constitution)
    writeByte(target_address    + 0x42B8, target_data.dmg_zones.zone33.immortal)
    writeFloat(target_address   + 0x42C0, target_data.dmg_zones.zone33.affects_main_health)
    writeByte(target_address    + 0x4305, target_data.dmg_zones.zone33.regeneration_enabled)
    writeByte(target_address    + 0x4306, target_data.dmg_zones.zone33.bleedout_enabled)
    writeByte(target_address    + 0x4307, target_data.dmg_zones.zone33.affected_by_explosions)
    writeFloat(target_address   + 0x4308, target_data.dmg_zones.zone33.explosion_dmg_mult)
    writeInteger(target_address + 0x430C, target_data.dmg_zones.zone33.affected_by_collision_impact)
    writeInteger(target_address + 0x4310, target_data.dmg_zones.zone33.on_dead_disable_all_actors)
    writeInteger(target_address + 0x4314, target_data.dmg_zones.zone33.explosion_verification)
    writeInteger(target_address + 0x4318, target_data.dmg_zones.zone33.main_health_affect_capped_zh)
    writeInteger(target_address + 0x431C, target_data.dmg_zones.zone33.hit_effect_receiver_type)
    writeInteger(target_address + 0x4494, target_data.dmg_zones.zone34.dmg_multiplier)
    writeInteger(target_address + 0x4498, target_data.dmg_zones.zone34.dmg_multipler_dps)
    writeInteger(target_address + 0x449C, target_data.dmg_zones.zone34.proj_drb_resistance)
    writeInteger(target_address + 0x44A0, target_data.dmg_zones.zone34.armor)
    writeInteger(target_address + 0x44A4, target_data.dmg_zones.zone34.armor_angle_check)
    writeInteger(target_address + 0x44A8, target_data.dmg_zones.zone34.max_armor)
    writeInteger(target_address + 0x44AC, target_data.dmg_zones.zone34.ignore_armor_on_self)
    writeFloat(target_address   + 0x44B0, target_data.dmg_zones.zone34.health)
    writeInteger(target_address + 0x44B4, target_data.dmg_zones.zone34.constitution)
    writeByte(target_address    + 0x44B8, target_data.dmg_zones.zone34.immortal)
    writeFloat(target_address   + 0x44C0, target_data.dmg_zones.zone34.affects_main_health)
    writeByte(target_address    + 0x4505, target_data.dmg_zones.zone34.regeneration_enabled)
    writeByte(target_address    + 0x4506, target_data.dmg_zones.zone34.bleedout_enabled)
    writeByte(target_address    + 0x4507, target_data.dmg_zones.zone34.affected_by_explosions)
    writeFloat(target_address   + 0x4508, target_data.dmg_zones.zone34.explosion_dmg_mult)
    writeInteger(target_address + 0x450C, target_data.dmg_zones.zone34.affected_by_collision_impact)
    writeInteger(target_address + 0x4510, target_data.dmg_zones.zone34.on_dead_disable_all_actors)
    writeInteger(target_address + 0x4514, target_data.dmg_zones.zone34.explosion_verification)
    writeInteger(target_address + 0x4518, target_data.dmg_zones.zone34.main_health_affect_capped_zh)
    writeInteger(target_address + 0x451C, target_data.dmg_zones.zone34.hit_effect_receiver_type)
    -- //! ================     Z O N E 35
    writeInteger(target_address + 0x4694, target_data.dmg_zones.zone35.dmg_multiplier)
    writeInteger(target_address + 0x4698, target_data.dmg_zones.zone35.dmg_multipler_dps)
    writeInteger(target_address + 0x469C, target_data.dmg_zones.zone35.proj_drb_resistance)
    writeInteger(target_address + 0x46A0, target_data.dmg_zones.zone35.armor)
    writeInteger(target_address + 0x46A4, target_data.dmg_zones.zone35.armor_angle_check)
    writeInteger(target_address + 0x46A8, target_data.dmg_zones.zone35.max_armor)
    writeInteger(target_address + 0x46AC, target_data.dmg_zones.zone35.ignore_armor_on_self)
    writeFloat(target_address   + 0x46B0, target_data.dmg_zones.zone35.health)
    writeInteger(target_address + 0x46B4, target_data.dmg_zones.zone35.constitution)
    writeByte(target_address    + 0x46B8, target_data.dmg_zones.zone35.immortal)
    writeFloat(target_address   + 0x46C0, target_data.dmg_zones.zone35.affects_main_health)
    writeByte(target_address    + 0x4705, target_data.dmg_zones.zone35.regeneration_enabled)
    writeByte(target_address    + 0x4706, target_data.dmg_zones.zone35.bleedout_enabled)
    writeByte(target_address    + 0x4707, target_data.dmg_zones.zone35.affected_by_explosions)
    writeFloat(target_address   + 0x4708, target_data.dmg_zones.zone35.explosion_dmg_mult)
    writeInteger(target_address + 0x470C, target_data.dmg_zones.zone35.affected_by_collision_impact)
    writeInteger(target_address + 0x4710, target_data.dmg_zones.zone35.on_dead_disable_all_actors)
    writeInteger(target_address + 0x4714, target_data.dmg_zones.zone35.explosion_verification)
    writeInteger(target_address + 0x4718, target_data.dmg_zones.zone35.main_health_affect_capped_zh)
    writeInteger(target_address + 0x471C, target_data.dmg_zones.zone35.hit_effect_receiver_type)
    writeInteger(target_address + 0x4894, target_data.dmg_zones.zone36.dmg_multiplier)
    writeInteger(target_address + 0x4898, target_data.dmg_zones.zone36.dmg_multipler_dps)
    writeInteger(target_address + 0x489C, target_data.dmg_zones.zone36.proj_drb_resistance)
    writeInteger(target_address + 0x48A0, target_data.dmg_zones.zone36.armor)
    writeInteger(target_address + 0x48A4, target_data.dmg_zones.zone36.armor_angle_check)
    writeInteger(target_address + 0x48A8, target_data.dmg_zones.zone36.max_armor)
    writeInteger(target_address + 0x48AC, target_data.dmg_zones.zone36.ignore_armor_on_self)
    writeFloat(target_address   + 0x48B0, target_data.dmg_zones.zone36.health)
    writeInteger(target_address + 0x48B4, target_data.dmg_zones.zone36.constitution)
    writeByte(target_address    + 0x48B8, target_data.dmg_zones.zone36.immortal)
    writeFloat(target_address   + 0x48C0, target_data.dmg_zones.zone36.affects_main_health)
    writeByte(target_address    + 0x4905, target_data.dmg_zones.zone36.regeneration_enabled)
    writeByte(target_address    + 0x4906, target_data.dmg_zones.zone36.bleedout_enabled)
    writeByte(target_address    + 0x4907, target_data.dmg_zones.zone36.affected_by_explosions)
    writeFloat(target_address   + 0x4908, target_data.dmg_zones.zone36.explosion_dmg_mult)
    writeInteger(target_address + 0x490C, target_data.dmg_zones.zone36.affected_by_collision_impact)
    writeInteger(target_address + 0x4910, target_data.dmg_zones.zone36.on_dead_disable_all_actors)
    writeInteger(target_address + 0x4914, target_data.dmg_zones.zone36.explosion_verification)
    writeInteger(target_address + 0x4918, target_data.dmg_zones.zone36.main_health_affect_capped_zh)
    writeInteger(target_address + 0x491C, target_data.dmg_zones.zone36.hit_effect_receiver_type)
    writeInteger(target_address + 0x4A94, target_data.dmg_zones.zone37.dmg_multiplier)
    writeInteger(target_address + 0x4A98, target_data.dmg_zones.zone37.dmg_multipler_dps)
    writeInteger(target_address + 0x4A9C, target_data.dmg_zones.zone37.proj_drb_resistance)
    writeInteger(target_address + 0x4AA0, target_data.dmg_zones.zone37.armor)
    writeInteger(target_address + 0x4AA4, target_data.dmg_zones.zone37.armor_angle_check)
    writeInteger(target_address + 0x4AA8, target_data.dmg_zones.zone37.max_armor)
    writeInteger(target_address + 0x4AAC, target_data.dmg_zones.zone37.ignore_armor_on_self)
    writeFloat(target_address   + 0x4AB0, target_data.dmg_zones.zone37.health)
    writeInteger(target_address + 0x4AB4, target_data.dmg_zones.zone37.constitution)
    writeByte(target_address    + 0x4AB8, target_data.dmg_zones.zone37.immortal)
    writeFloat(target_address   + 0x4AC0, target_data.dmg_zones.zone37.affects_main_health)
    writeByte(target_address    + 0x4B05, target_data.dmg_zones.zone37.regeneration_enabled)
    writeByte(target_address    + 0x4B06, target_data.dmg_zones.zone37.bleedout_enabled)
    writeByte(target_address    + 0x4B07, target_data.dmg_zones.zone37.affected_by_explosions)
    writeFloat(target_address   + 0x4B08, target_data.dmg_zones.zone37.explosion_dmg_mult)
    writeInteger(target_address + 0x4B0C, target_data.dmg_zones.zone37.affected_by_collision_impact)
    writeInteger(target_address + 0x4B10, target_data.dmg_zones.zone37.on_dead_disable_all_actors)
    writeInteger(target_address + 0x4B14, target_data.dmg_zones.zone37.explosion_verification)
    writeInteger(target_address + 0x4B18, target_data.dmg_zones.zone37.main_health_affect_capped_zh)
    writeInteger(target_address + 0x4B1C, target_data.dmg_zones.zone37.hit_effect_receiver_type)
    -- // Zone 38
    writeInteger(target_address + 0x4C94, target_data.dmg_zones.zone38.dmg_multiplier)
    writeInteger(target_address + 0x4C98, target_data.dmg_zones.zone38.dmg_multipler_dps)
    writeInteger(target_address + 0x4C9C, target_data.dmg_zones.zone38.proj_drb_resistance)
    writeInteger(target_address + 0x4CA0, target_data.dmg_zones.zone38.armor)
    writeInteger(target_address + 0x4CA4, target_data.dmg_zones.zone38.armor_angle_check)
    writeInteger(target_address + 0x4CA8, target_data.dmg_zones.zone38.max_armor)
    writeInteger(target_address + 0x4CAC, target_data.dmg_zones.zone38.ignore_armor_on_self)
    writeFloat(target_address   + 0x4CB0, target_data.dmg_zones.zone38.health)
    writeInteger(target_address + 0x4CB4, target_data.dmg_zones.zone38.constitution)
    writeByte(target_address    + 0x4CB8, target_data.dmg_zones.zone38.immortal)
    writeFloat(target_address   + 0x4CC0, target_data.dmg_zones.zone38.affects_main_health)
    writeByte(target_address    + 0x4D05, target_data.dmg_zones.zone38.regeneration_enabled)
    writeByte(target_address    + 0x4D06, target_data.dmg_zones.zone38.bleedout_enabled)
    writeByte(target_address    + 0x4D07, target_data.dmg_zones.zone38.affected_by_explosions)
    writeFloat(target_address   + 0x4D08, target_data.dmg_zones.zone38.explosion_dmg_mult)
    writeInteger(target_address + 0x4D0C, target_data.dmg_zones.zone38.affected_by_collision_impact)
    writeInteger(target_address + 0x4D10, target_data.dmg_zones.zone38.on_dead_disable_all_actors)
    writeInteger(target_address + 0x4D14, target_data.dmg_zones.zone38.explosion_verification)
    writeInteger(target_address + 0x4D18, target_data.dmg_zones.zone38.main_health_affect_capped_zh)
    writeInteger(target_address + 0x4D1C, target_data.dmg_zones.zone38.hit_effect_receiver_type)
    -- // Elemental damage
    writeInteger(target_address + 0x4DE0, target_data.elem_dmg.elem1_type)
    writeFloat(target_address   + 0x4DE4, target_data.elem_dmg.elem1_mult)
    writeInteger(target_address + 0x4DE8, target_data.elem_dmg.elem2_type)
    writeFloat(target_address   + 0x4DEC, target_data.elem_dmg.elem2_mult)
    writeInteger(target_address + 0x4DF0, target_data.elem_dmg.elem3_type)
    writeFloat(target_address   + 0x4DF4, target_data.elem_dmg.elem3_mult)
    writeInteger(target_address + 0x4DF8, target_data.elem_dmg.elem4_type)
    writeFloat(target_address   + 0x4DFC, target_data.elem_dmg.elem4_mult)
    -- // Decay
    writeInteger(target_address + 0x4E00, target_data.decay.mode)
    writeFloat(target_address   + 0x4E04, target_data.decay.accel)
    writeFloat(target_address   + 0x4E08, target_data.decay.min_delay)
    writeFloat(target_address   + 0x4E0C, target_data.decay.max_delay)
    -- // Others
    writeInteger(target_address + 0x4F64, target_data.require_demo)
    writeInteger(target_address + 0x4F68, target_data.downed_anim)
    writeInteger(target_address + 0x4F6C, target_data.dead_anim)
    writeInteger(target_address + 0x4F70, target_data.on_downed_hide_vis_group)
    writeInteger(target_address + 0x4F74, target_data.on_downed_show_vis_group)
    writeInteger(target_address + 0x4F78, target_data.on_dead_hide_vis_group)
    writeInteger(target_address + 0x4F7C, target_data.on_dead_show_vis_group)
    writeInteger(target_address + 0x4F80, target_data.on_death_destruct_lvl)
    writeInteger(target_address + 0x4F84, target_data.can_die_naturally)
    writeInteger(target_address + 0x4F88, target_data.death_propagation)
    writeInteger(target_address + 0x4F8C, target_data.ui_health_str.str1)
    writeInteger(target_address + 0x4F90, target_data.ui_health_str.str2)
    writeInteger(target_address + 0x4F94, target_data.ui_health_str.str3)
    writeInteger(target_address + 0x4F98, target_data.ui_health_str.str4)

}

{$asm}
[DISABLE]
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>375</ID>
              <Description>"[𝐂𝐎𝐌𝐌𝐔𝐍𝐈𝐓𝐘 𝐓𝐄𝐒𝐓𝐈𝐍𝐆] 𝐁𝐚𝐥𝐥𝐢𝐬𝐭𝐢𝐜 𝐒𝐡𝐢𝐞𝐥𝐝 𝐀𝐝𝐣𝐮𝐬𝐭𝐦𝐞𝐧𝐭𝐬"</Description>
              <Color>FF80FF</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.005
  Date   : 2024-10-10
  Author : MEOW-SEE-SEE (MIAUSISI)
  Many thanks to "That super cool Russian Guy" to help me
  with a faster way to look up the passive!

  &gt; IMPROVED ELECTRICAL CONDUIT
  -----------------------------
  - Sets resistance to ARC damage from 95% to 100%

}

{$lua}

ballistic_shield_healthentity1.DATA.health = 1000
ballistic_shield_healthentity1.DATA.default_dmg_zone_info.armor = 9
ballistic_shield_healthentity1.DATA.default_dmg_zone_info.affected_by_explosions = 0
ballistic_shield_healthentity1.DATA.default_dmg_zone_info.explosion_dmg_mult = 0.0
ballistic_shield_healthentity1.DATA.dmg_zones.zone1.armor = 9
ballistic_shield_healthentity1.DATA.dmg_zones.zone1.max_armor = 9
ballistic_shield_healthentity1.DATA.dmg_zones.zone1.affected_by_explosions = 0
ballistic_shield_healthentity1.DATA.dmg_zones.zone1.explosion_dmg_mult = 0.0
ballistic_shield_healthentity1.DATA.dmg_zones.zone2.armor = 9
ballistic_shield_healthentity1.DATA.dmg_zones.zone2.max_armor = 9
ballistic_shield_healthentity1.DATA.dmg_zones.zone2.affected_by_explosions = 0
ballistic_shield_healthentity1.DATA.dmg_zones.zone3.explosion_dmg_mult = 0.0
ballistic_shield_healthentity1.DATA.dmg_zones.zone3.armor = 9
ballistic_shield_healthentity1.DATA.dmg_zones.zone3.max_armor = 9
ballistic_shield_healthentity1.DATA.dmg_zones.zone3.affected_by_explosions = 0
ballistic_shield_healthentity1.DATA.dmg_zones.zone3.explosion_dmg_mult = 0.0
ballistic_shield_healthentity1.DATA.dmg_zones.zone4.armor = 9
ballistic_shield_healthentity1.DATA.dmg_zones.zone4.max_armor = 9
ballistic_shield_healthentity1.DATA.dmg_zones.zone4.affected_by_explosions = 0
ballistic_shield_healthentity1.DATA.dmg_zones.zone4.explosion_dmg_mult = 0.0
ballistic_shield_healthentity1.DATA.dmg_zones.zone5.armor = 9
ballistic_shield_healthentity1.DATA.dmg_zones.zone5.max_armor = 9
ballistic_shield_healthentity1.DATA.dmg_zones.zone5.affected_by_explosions = 0
ballistic_shield_healthentity1.DATA.dmg_zones.zone5.explosion_dmg_mult = 0.0
ballistic_shield_healthentity1.DATA.dmg_zones.zone6.armor = 9
ballistic_shield_healthentity1.DATA.dmg_zones.zone6.max_armor = 9
ballistic_shield_healthentity1.DATA.dmg_zones.zone6.affected_by_explosions = 0
ballistic_shield_healthentity1.DATA.dmg_zones.zone6.explosion_dmg_mult = 0.0
ballistic_shield_healthentity1.DATA.dmg_zones.zone7.armor = 9
ballistic_shield_healthentity1.DATA.dmg_zones.zone7.max_armor = 9
ballistic_shield_healthentity1.DATA.dmg_zones.zone7.affected_by_explosions = 0
ballistic_shield_healthentity1.DATA.dmg_zones.zone7.explosion_dmg_mult = 0.0
ballistic_shield_healthentity1.DATA.dmg_zones.zone8.armor = 9
ballistic_shield_healthentity1.DATA.dmg_zones.zone8.max_armor = 9
ballistic_shield_healthentity1.DATA.dmg_zones.zone8.affected_by_explosions = 0
ballistic_shield_healthentity1.DATA.dmg_zones.zone8.explosion_dmg_mult = 0.0
ballistic_shield_healthentity1.DATA.dmg_zones.zone9.armor = 9
ballistic_shield_healthentity1.DATA.dmg_zones.zone9.max_armor = 9
ballistic_shield_healthentity1.DATA.dmg_zones.zone9.affected_by_explosions = 0
ballistic_shield_healthentity1.DATA.dmg_zones.zone9.explosion_dmg_mult = 0.0
ballistic_shield_healthentity1.DATA.dmg_zones.zone10.armor = 9
ballistic_shield_healthentity1.DATA.dmg_zones.zone10.max_armor = 9
ballistic_shield_healthentity1.DATA.dmg_zones.zone10.affected_by_explosions = 0
ballistic_shield_healthentity1.DATA.dmg_zones.zone10.explosion_dmg_mult = 0.0
ballistic_shield_healthentity1.DATA.dmg_zones.zone11.armor = 9
ballistic_shield_healthentity1.DATA.dmg_zones.zone11.max_armor = 9
ballistic_shield_healthentity1.DATA.dmg_zones.zone11.affected_by_explosions = 0
ballistic_shield_healthentity1.DATA.dmg_zones.zone11.explosion_dmg_mult = 0.0
ballistic_shield_healthentity1.DATA.dmg_zones.zone12.armor = 9
ballistic_shield_healthentity1.DATA.dmg_zones.zone12.max_armor = 9
ballistic_shield_healthentity1.DATA.dmg_zones.zone12.affected_by_explosions = 0
ballistic_shield_healthentity1.DATA.dmg_zones.zone12.explosion_dmg_mult = 0.0
ballistic_shield_healthentity1.DATA.dmg_zones.zone13.armor = 9
ballistic_shield_healthentity1.DATA.dmg_zones.zone13.max_armor = 9
ballistic_shield_healthentity1.DATA.dmg_zones.zone13.affected_by_explosions = 0
ballistic_shield_healthentity1.DATA.dmg_zones.zone13.explosion_dmg_mult = 0.0
ballistic_shield_healthentity1.DATA.dmg_zones.zone14.armor = 9
ballistic_shield_healthentity1.DATA.dmg_zones.zone14.max_armor = 9
ballistic_shield_healthentity1.DATA.dmg_zones.zone14.affected_by_explosions = 0
ballistic_shield_healthentity1.DATA.dmg_zones.zone14.explosion_dmg_mult = 0.0


ballistic_shield_unitcomp_ent1.DATA.scale_min = 3
ballistic_shield_unitcomp_ent1.DATA.scale_max = 3
ballistic_shield_unitcomp_ent1.DATA.radius    = 3





ballistic_shield_healthentity2.DATA.health = 1000
ballistic_shield_healthentity2.DATA.default_dmg_zone_info.armor = 9
ballistic_shield_healthentity2.DATA.default_dmg_zone_info.affected_by_explosions = 0
ballistic_shield_healthentity2.DATA.default_dmg_zone_info.explosion_dmg_mult = 0.0
ballistic_shield_healthentity2.DATA.dmg_zones.zone1.armor = 9
ballistic_shield_healthentity2.DATA.dmg_zones.zone1.affected_by_explosions = 0
ballistic_shield_healthentity2.DATA.dmg_zones.zone1.explosion_dmg_mult = 0.0
ballistic_shield_healthentity2.DATA.dmg_zones.zone2.armor = 9
ballistic_shield_healthentity2.DATA.dmg_zones.zone2.affected_by_explosions = 0
ballistic_shield_healthentity2.DATA.dmg_zones.zone3.explosion_dmg_mult = 0.0
ballistic_shield_healthentity2.DATA.dmg_zones.zone3.armor = 9
ballistic_shield_healthentity2.DATA.dmg_zones.zone3.affected_by_explosions = 0
ballistic_shield_healthentity2.DATA.dmg_zones.zone3.explosion_dmg_mult = 0.0
ballistic_shield_healthentity2.DATA.dmg_zones.zone4.armor = 9
ballistic_shield_healthentity2.DATA.dmg_zones.zone4.max_armor = 9
ballistic_shield_healthentity2.DATA.dmg_zones.zone4.affected_by_explosions = 0
ballistic_shield_healthentity2.DATA.dmg_zones.zone4.explosion_dmg_mult = 0.0
ballistic_shield_healthentity2.DATA.dmg_zones.zone5.armor = 9
ballistic_shield_healthentity2.DATA.dmg_zones.zone5.max_armor = 9
ballistic_shield_healthentity2.DATA.dmg_zones.zone5.affected_by_explosions = 0
ballistic_shield_healthentity2.DATA.dmg_zones.zone5.explosion_dmg_mult = 0.0
ballistic_shield_healthentity2.DATA.dmg_zones.zone6.armor = 9
ballistic_shield_healthentity2.DATA.dmg_zones.zone6.max_armor = 9
ballistic_shield_healthentity2.DATA.dmg_zones.zone6.affected_by_explosions = 0
ballistic_shield_healthentity2.DATA.dmg_zones.zone6.explosion_dmg_mult = 0.0
ballistic_shield_healthentity2.DATA.dmg_zones.zone7.armor = 9
ballistic_shield_healthentity2.DATA.dmg_zones.zone7.max_armor = 9
ballistic_shield_healthentity2.DATA.dmg_zones.zone7.affected_by_explosions = 0
ballistic_shield_healthentity2.DATA.dmg_zones.zone7.explosion_dmg_mult = 0.0
ballistic_shield_healthentity2.DATA.dmg_zones.zone8.armor = 9
ballistic_shield_healthentity2.DATA.dmg_zones.zone8.max_armor = 9
ballistic_shield_healthentity2.DATA.dmg_zones.zone8.affected_by_explosions = 0
ballistic_shield_healthentity2.DATA.dmg_zones.zone8.explosion_dmg_mult = 0.0
ballistic_shield_healthentity2.DATA.dmg_zones.zone9.armor = 9
ballistic_shield_healthentity2.DATA.dmg_zones.zone9.max_armor = 9
ballistic_shield_healthentity2.DATA.dmg_zones.zone9.affected_by_explosions = 0
ballistic_shield_healthentity2.DATA.dmg_zones.zone9.explosion_dmg_mult = 0.0
ballistic_shield_healthentity2.DATA.dmg_zones.zone10.armor = 9
ballistic_shield_healthentity2.DATA.dmg_zones.zone10.max_armor = 9
ballistic_shield_healthentity2.DATA.dmg_zones.zone10.affected_by_explosions = 0
ballistic_shield_healthentity2.DATA.dmg_zones.zone10.explosion_dmg_mult = 0.0
ballistic_shield_healthentity2.DATA.dmg_zones.zone11.armor = 9
ballistic_shield_healthentity2.DATA.dmg_zones.zone11.max_armor = 9
ballistic_shield_healthentity2.DATA.dmg_zones.zone11.affected_by_explosions = 0
ballistic_shield_healthentity2.DATA.dmg_zones.zone11.explosion_dmg_mult = 0.0
ballistic_shield_healthentity2.DATA.dmg_zones.zone12.armor = 9
ballistic_shield_healthentity2.DATA.dmg_zones.zone12.max_armor = 9
ballistic_shield_healthentity2.DATA.dmg_zones.zone12.affected_by_explosions = 0
ballistic_shield_healthentity2.DATA.dmg_zones.zone12.explosion_dmg_mult = 0.0
ballistic_shield_healthentity2.DATA.dmg_zones.zone13.armor = 9
ballistic_shield_healthentity2.DATA.dmg_zones.zone13.max_armor = 9
ballistic_shield_healthentity2.DATA.dmg_zones.zone13.affected_by_explosions = 0
ballistic_shield_healthentity2.DATA.dmg_zones.zone13.explosion_dmg_mult = 0.0
ballistic_shield_healthentity2.DATA.dmg_zones.zone14.armor = 9
ballistic_shield_healthentity2.DATA.dmg_zones.zone14.max_armor = 9
ballistic_shield_healthentity2.DATA.dmg_zones.zone14.affected_by_explosions = 0
ballistic_shield_healthentity2.DATA.dmg_zones.zone14.explosion_dmg_mult = 0.0

ballistic_shield_unitcomp_ent2.DATA.scale_min = 3
ballistic_shield_unitcomp_ent2.DATA.scale_max = 3
ballistic_shield_unitcomp_ent2.DATA.radius    = 3

Apply_HealthConfiguration_Modifications(ballistic_shield_healthentity1.DATA)
Apply_HealthConfiguration_Modifications(ballistic_shield_healthentity2.DATA)

Apply_UnitComponent_Modifications(ballistic_shield_unitcomp_ent1.DATA)
Apply_UnitComponent_Modifications(ballistic_shield_unitcomp_ent2.DATA)

{$asm}
[DISABLE]
{$lua}

Apply_HealthConfiguration_Modifications(ballistic_shield_healthentity1.backup)
Apply_HealthConfiguration_Modifications(ballistic_shield_healthentity2.backup)

Apply_UnitComponent_Modifications(ballistic_shield_unitcomp_ent1.backup)
Apply_UnitComponent_Modifications(ballistic_shield_unitcomp_ent2.backup)

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>408</ID>
              <Description>"[𝐂𝐎𝐌𝐌𝐔𝐍𝐈𝐓𝐘 𝐓𝐄𝐒𝐓𝐈𝐍𝐆] 𝐇𝐞𝐥𝐥𝐝𝐢𝐯𝐞𝐫 𝐏𝐚𝐫𝐚𝐦𝐞𝐭𝐞𝐫 𝐀𝐝𝐣𝐮𝐬𝐭𝐦𝐞𝐧𝐭𝐬"</Description>
              <Color>FF80FF</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.005
  Date   : 2024-10-10
  Author : MEOW-SEE-SEE (MIAUSISI)
}

{$lua}

helldiver_parameters.DATA.long_throw_info.power_multiplier = 3



Apply_PlayerAttributes_Modifications(helldiver_parameters.DATA)


{$asm}
[DISABLE]
{$lua}


Apply_PlayerAttributes_Modifications(helldiver_parameters.backup)

</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>117493</ID>
      <Description>"---------------------------ОРУЖИЕ----------------------------------"</Description>
      <Color>808080</Color>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>0</ID>
      <Description>"Бесконечные Гранаты"</Description>
      <Color>A4A4FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript Async="1">// Game Executable   : helldivers2.exe
// Author            : gir489
// Executable Version: 1.8.18735.0
// MD5 Signature     : E087C5451277E6CC21E544AB6FE4932B
// EXE Compile Date  : April 25, 2024 04:05 AM
// Script Date       : April 29, 2024 11:13 AM
[ENABLE]
aobscanmodule(aob_Grenades,game.dll,41 FF 0C 06 48 8B 45 40)
registersymbol(aob_Grenades)
alloc(newmem_Grenades,1024)
label(return_Grenades)

newmem_Grenades:
  cmp [r14+rax], #1
  je short @f
    dec [r14+rax]
  @@:
  mov rax,[rbp+40]
  mov r8,[rbp+58]
  add r8,r14
  jmp return_Grenades

aob_Grenades:
  jmp far newmem_Grenades
  nop
return_Grenades:

[DISABLE]
aob_Grenades:
  db 41 FF 0C 06 48 8B 45 40 4C 8B 45 58 4D 03 C6

unregistersymbol(aob_Grenades)
dealloc(newmem_Grenades)

{
// ORIGINAL CODE - INJECTION POINT: game.dll+61FE6B

game.dll+61FE26: 84 C0                       - test al,al
game.dll+61FE28: 74 0A                       - je game.dll+61FE34
game.dll+61FE2A: 8B D3                       - mov edx,ebx
game.dll+61FE2C: 49 8B CF                    - mov rcx,r15
game.dll+61FE2F: E8 8C 77 DF FF              - call game.dll+4175C0
game.dll+61FE34: 44 0F B6 A4 24 88 00 00 00  - movzx r12d,byte ptr [rsp+00000088]
game.dll+61FE3D: 44 8B C3                    - mov r8d,ebx
game.dll+61FE40: 8B D7                       - mov edx,edi
game.dll+61FE42: E8 B9 BD DE FF              - call game.dll+40BC00
game.dll+61FE47: 44 8B F8                    - mov r15d,eax
game.dll+61FE4A: 45 84 E4                    - test r12b,r12b
game.dll+61FE4D: 74 37                       - je game.dll+61FE86
game.dll+61FE4F: 48 8B 4D 40                 - mov rcx,[rbp+40]
game.dll+61FE53: 4A 8B 14 E9                 - mov rdx,[rcx+r13*8]
game.dll+61FE57: 48 85 D2                    - test rdx,rdx
game.dll+61FE5A: 74 2A                       - je game.dll+61FE86
game.dll+61FE5C: F6 42 14 01                 - test byte ptr [rdx+14],01
game.dll+61FE60: 74 24                       - je game.dll+61FE86
game.dll+61FE62: 48 8B 45 58                 - mov rax,[rbp+58]
game.dll+61FE66: BA F9 82 20 D9              - mov edx,D92082F9
// ---------- INJECTING HERE ----------
game.dll+61FE6B: 41 FF 0C 06                 - dec [r14+rax]
// ---------- DONE INJECTING  ----------
game.dll+61FE6F: 48 8B 45 40                 - mov rax,[rbp+40]
game.dll+61FE73: 4C 8B 45 58                 - mov r8,[rbp+58]
game.dll+61FE77: 4D 03 C6                    - add r8,r14
game.dll+61FE7A: 4A 8B 0C E8                 - mov rcx,[rax+r13*8]
game.dll+61FE7E: 8B 49 10                    - mov ecx,[rcx+10]
game.dll+61FE81: E8 9A A0 47 00              - call game.dll+A99F20
game.dll+61FE86: 48 C7 44 24 70 00 00 00 00  - mov qword ptr [rsp+70],00000000
game.dll+61FE8F: 41 B1 01                    - mov r9b,01
game.dll+61FE92: 48 8B 44 24 70              - mov rax,[rsp+70]
game.dll+61FE97: 44 8B C7                    - mov r8d,edi
game.dll+61FE9A: 48 89 44 24 28              - mov [rsp+28],rax
game.dll+61FE9F: 8B D6                       - mov edx,esi
game.dll+61FEA1: C6 44 24 20 00              - mov byte ptr [rsp+20],00
game.dll+61FEA6: E8 75 6F 06 00              - call game.dll+686E20
game.dll+61FEAB: 48 8B 0D A6 90 28 01        - mov rcx,[game.dll+18A8F58]
game.dll+61FEB2: 45 33 C0                    - xor r8d,r8d
game.dll+61FEB5: 41 83 FF FF                 - cmp r15d,-01
game.dll+61FEB9: C7 44 24 20 00 00 00 00     - mov [rsp+20],00000000
game.dll+61FEC1: 44 8B CE                    - mov r9d,esi
game.dll+61FEC4: 8B D7                       - mov edx,edi
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>45</ID>
      <Description>"Бесконечные Патроны"</Description>
      <Color>A4A4FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript Async="1">// Game Executable   : helldivers2.exe
// Author            : gir489
// Executable Version: 1.8.18735.0
// MD5 Signature     : E087C5451277E6CC21E544AB6FE4932B
// EXE Compile Date  : April 25, 2024 04:05 AM
// Script Date       : April 29, 2024 11:28 AM
[ENABLE]
aobscanmodule(aob_SubtractAmmo,game.dll,8B D7 4C 8D 04 D2)
registersymbol(aob_SubtractAmmo)
alloc(newmem_SubtractAmmo,1024)
label(return_SubtractAmmo)

newmem_SubtractAmmo:
  mov edx,edi
  lea r8,[rdx+rdx*8]
  cmp [rcx+r8*8], #2
  jle short @f
    sub dword ptr [rcx+r8*8],1
  @@:
  mov rax,[rbp+38]
  jmp return_SubtractAmmo

aob_SubtractAmmo:
  jmp far newmem_SubtractAmmo
  nop
return_SubtractAmmo:

[DISABLE]
aob_SubtractAmmo:
  db 8B D7 4C 8D 04 D2 42 83 2C C1 01 48 8B 45 38

unregistersymbol(aob_SubtractAmmo)
dealloc(newmem_SubtractAmmo)

{
// ORIGINAL CODE - INJECTION POINT: game.dll+41603D

game.dll+415FFC: 44 0F AF DB              - imul r11d,ebx
game.dll+416000: 41 8D 50 FF              - lea edx,[r8-01]
game.dll+416004: 0F 1F 40 00              - nop dword ptr [rax+00]
game.dll+416008: 0F 1F 84 00 00 00 00 00  - nop dword ptr [rax+rax+00000000]
game.dll+416010: 8B C2                    - mov eax,edx
game.dll+416012: 43 8D 0C 2B              - lea ecx,[r11+r13]
game.dll+416016: 48 23 C8                 - and rcx,rax
game.dll+416019: 41 8B 04 C9              - mov eax,[r9+rcx*8]
game.dll+41601D: 41 3B C2                 - cmp eax,r10d
game.dll+416020: 74 0E                    - je game.dll+416030
game.dll+416022: 3B C3                    - cmp eax,ebx
game.dll+416024: 74 0E                    - je game.dll+416034
game.dll+416026: 41 FF C5                 - inc r13d
game.dll+416029: 45 3B E8                 - cmp r13d,r8d
game.dll+41602C: 72 E2                    - jb game.dll+416010
game.dll+41602E: EB 09                    - jmp game.dll+416039
game.dll+416030: 3B C3                    - cmp eax,ebx
game.dll+416032: 75 05                    - jne game.dll+416039
game.dll+416034: 41 8B 7C C9 04           - mov edi,[r9+rcx*8+04]
game.dll+416039: 48 8B 4D 50              - mov rcx,[rbp+50]
// ---------- INJECTING HERE ----------
game.dll+41603D: 8B D7                    - mov edx,edi
// ---------- DONE INJECTING  ----------
game.dll+41603F: 4C 8D 04 D2              - lea r8,[rdx+rdx*8]
game.dll+416043: 42 83 2C C1 01           - sub dword ptr [rcx+r8*8],01
game.dll+416048: 48 8B 45 38              - mov rax,[rbp+38]
game.dll+41604C: 0F 94 C3                 - sete bl
game.dll+41604F: 48 8B 0C D0              - mov rcx,[rax+rdx*8]
game.dll+416053: 48 8B 45 50              - mov rax,[rbp+50]
game.dll+416057: 4E 8D 04 C0              - lea r8,[rax+r8*8]
game.dll+41605B: 8B 49 10                 - mov ecx,[rcx+10]
game.dll+41605E: BA 8B 91 64 EC           - mov edx,EC64918B
game.dll+416063: E8 B8 3E 68 00           - call game.dll+A99F20
game.dll+416068: 84 DB                    - test bl,bl
game.dll+41606A: 0F 84 42 01 00 00        - je game.dll+4161B2
game.dll+416070: E9 AC 00 00 00           - jmp game.dll+416121
game.dll+416075: 3B C3                    - cmp eax,ebx
game.dll+416077: 0F 85 35 01 00 00        - jne game.dll+4161B2
game.dll+41607D: 41 39 7C D2 04           - cmp [r10+rdx*8+04],edi
game.dll+416082: 0F 84 2A 01 00 00        - je game.dll+4161B2
game.dll+416088: 48 8B 44 24 20           - mov rax,[rsp+20]
game.dll+41608D: 48 8B 48 38              - mov rcx,[rax+38]
game.dll+416091: 41 8B C7                 - mov eax,r15d
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>30</ID>
      <Description>"Бесконечные Рюкзаки"</Description>
      <Color>A4A4FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript Async="1">// Game Executable   : helldivers2.exe
// Author            : gir489
// Executable Version: 1.8.22927.0
// MD5 Signature     : 34B03C63A9B3946A71A77D7719475948
// EXE Compile Date  : September 19, 2024 11:09 AM
// Script Date       : September 24, 2024 06:53 PM
[ENABLE]
aobscanmodule(aob_Autocannon,game.dll, 2B C8 BA)
registersymbol(aob_Autocannon)

aob_Autocannon:
nop 2

[DISABLE]
aob_Autocannon:
  db 2B C8

unregistersymbol(aob_Autocannon)

{
// ORIGINAL CODE - INJECTION POINT: game.dll+774DF5

game.dll+774DAE: 74 2D                    - je game.dll+774DDD
game.dll+774DB0: 4D 8B 53 20              - mov r10,[r11+20]
game.dll+774DB4: 41 8B 6B 2C              - mov ebp,[r11+2C]
game.dll+774DB8: 0F 1F 84 00 00 00 00 00  - nop dword ptr [rax+rax+00000000]
game.dll+774DC0: 41 8B C6                 - mov eax,r14d
game.dll+774DC3: 42 8D 14 09              - lea edx,[rcx+r9]
game.dll+774DC7: 48 23 D0                 - and rdx,rax
game.dll+774DCA: 41 8B 04 D2              - mov eax,[r10+rdx*8]
game.dll+774DCE: 3B C5                    - cmp eax,ebp
game.dll+774DD0: 74 4F                    - je game.dll+774E21
game.dll+774DD2: 3B C3                    - cmp eax,ebx
game.dll+774DD4: 74 4F                    - je game.dll+774E25
game.dll+774DD6: FF C1                    - inc ecx
game.dll+774DD8: 41 3B C8                 - cmp ecx,r8d
game.dll+774DDB: 72 E3                    - jb game.dll+774DC0
game.dll+774DDD: 4C 8B 74 24 50           - mov r14,[rsp+50]
game.dll+774DE2: 43 8B 0C E6              - mov ecx,[r14+r12*8]
game.dll+774DE6: 8B 84 24 E0 00 00 00     - mov eax,[rsp+000000E0]
game.dll+774DED: 3B C1                    - cmp eax,ecx
game.dll+774DEF: 0F 87 79 02 00 00        - ja game.dll+77506E
// ---------- INJECTING HERE ----------
game.dll+774DF5: 2B C8                    - sub ecx,eax
// ---------- DONE INJECTING  ----------
game.dll+774DF7: BA 52 97 88 69           - mov edx,69889752
game.dll+774DFC: 49 8B 45 50              - mov rax,[r13+50]
game.dll+774E00: 42 89 0C E0              - mov [rax+r12*8],ecx
game.dll+774E04: 49 8B 45 50              - mov rax,[r13+50]
game.dll+774E08: 4E 8D 04 E0              - lea r8,[rax+r12*8]
game.dll+774E0C: 49 8B 45 38              - mov rax,[r13+38]
game.dll+774E10: 4A 8B 0C E0              - mov rcx,[rax+r12*8]
game.dll+774E14: 8B 49 10                 - mov ecx,[rcx+10]
game.dll+774E17: E8 54 F2 3B 00           - call game.dll+B34070
game.dll+774E1C: E9 4D 02 00 00           - jmp game.dll+77506E
game.dll+774E21: 3B C3                    - cmp eax,ebx
game.dll+774E23: 75 B8                    - jne game.dll+774DDD
game.dll+774E25: 41 83 7C D2 04 FF        - cmp dword ptr [r10+rdx*8+04],-01
game.dll+774E2B: 74 B0                    - je game.dll+774DDD
game.dll+774E2D: 45 8B 53 30              - mov r10d,[r11+30]
game.dll+774E31: 45 8D 70 FF              - lea r14d,[r8-01]
game.dll+774E35: 44 0F AF D3              - imul r10d,ebx
game.dll+774E39: 41 8B CF                 - mov ecx,r15d
game.dll+774E3C: 45 85 C0                 - test r8d,r8d
game.dll+774E3F: 74 34                    - je game.dll+774E75
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>113934</ID>
      <Description>"Менее палевная вер. (Патроны)"</Description>
      <Color>A4A4FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : helldivers2.exe
  Version: 
  Date   : 2024-04-30
  Author : ZoDDeL

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(legit_ammo,game.dll,4C 8D 04 D2 42 83 2C C1 01 48 8B 45 38 0F 94 C3) // should be unique
alloc(legit_ammo_newmem,$1000)

label(legit_ammo_code)
label(legit_ammo_return)

legit_ammo_newmem:
  lea r8,[rdx+rdx*8]

  cmp dword ptr [rcx+r8*8],#2
  jl legit_ammo_code
  sub dword ptr [rcx+r8*8],01
  jmp legit_ammo_code


legit_ammo_code:
  mov rax,[rbp+38]
  sete bl
  jmp legit_ammo_return

legit_ammo:
  jmp far legit_ammo_newmem
  nop 2
legit_ammo_return:

[DISABLE]
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>113873</ID>
      <Description>"Менее палевная вер. (Гранаты)"</Description>
      <Color>A4A4FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>// Game Executable   : helldivers2.exe
// Author            : gir489
// Executable Version: 1.8.18735.0
// MD5 Signature     : E087C5451277E6CC21E544AB6FE4932B
// EXE Compile Date  : April 25, 2024 04:05 AM
// Script Date       : April 29, 2024 11:13 AM
[ENABLE]
aobscanmodule(aob_Grenades,game.dll,41 FF 0C 06 48 8B 45 40)
registersymbol(aob_Grenades)
alloc(newmem_Grenades,1024)
label(return_Grenades)

newmem_Grenades:
  cmp [r14+rax], #1
  je short @f
    dec [r14+rax]
  @@:
  mov rax,[rbp+40]
  mov r8,[rbp+58]
  add r8,r14
  jmp return_Grenades

aob_Grenades:
  jmp far newmem_Grenades
  nop
return_Grenades:

[DISABLE]
aob_Grenades:
  db 41 FF 0C 06 48 8B 45 40 4C 8B 45 58 4D 03 C6

unregistersymbol(aob_Grenades)
dealloc(newmem_Grenades)

{
// ORIGINAL CODE - INJECTION POINT: game.dll+61FE6B

game.dll+61FE26: 84 C0                       - test al,al
game.dll+61FE28: 74 0A                       - je game.dll+61FE34
game.dll+61FE2A: 8B D3                       - mov edx,ebx
game.dll+61FE2C: 49 8B CF                    - mov rcx,r15
game.dll+61FE2F: E8 8C 77 DF FF              - call game.dll+4175C0
game.dll+61FE34: 44 0F B6 A4 24 88 00 00 00  - movzx r12d,byte ptr [rsp+00000088]
game.dll+61FE3D: 44 8B C3                    - mov r8d,ebx
game.dll+61FE40: 8B D7                       - mov edx,edi
game.dll+61FE42: E8 B9 BD DE FF              - call game.dll+40BC00
game.dll+61FE47: 44 8B F8                    - mov r15d,eax
game.dll+61FE4A: 45 84 E4                    - test r12b,r12b
game.dll+61FE4D: 74 37                       - je game.dll+61FE86
game.dll+61FE4F: 48 8B 4D 40                 - mov rcx,[rbp+40]
game.dll+61FE53: 4A 8B 14 E9                 - mov rdx,[rcx+r13*8]
game.dll+61FE57: 48 85 D2                    - test rdx,rdx
game.dll+61FE5A: 74 2A                       - je game.dll+61FE86
game.dll+61FE5C: F6 42 14 01                 - test byte ptr [rdx+14],01
game.dll+61FE60: 74 24                       - je game.dll+61FE86
game.dll+61FE62: 48 8B 45 58                 - mov rax,[rbp+58]
game.dll+61FE66: BA F9 82 20 D9              - mov edx,D92082F9
// ---------- INJECTING HERE ----------
game.dll+61FE6B: 41 FF 0C 06                 - dec [r14+rax]
// ---------- DONE INJECTING  ----------
game.dll+61FE6F: 48 8B 45 40                 - mov rax,[rbp+40]
game.dll+61FE73: 4C 8B 45 58                 - mov r8,[rbp+58]
game.dll+61FE77: 4D 03 C6                    - add r8,r14
game.dll+61FE7A: 4A 8B 0C E8                 - mov rcx,[rax+r13*8]
game.dll+61FE7E: 8B 49 10                    - mov ecx,[rcx+10]
game.dll+61FE81: E8 9A A0 47 00              - call game.dll+A99F20
game.dll+61FE86: 48 C7 44 24 70 00 00 00 00  - mov qword ptr [rsp+70],00000000
game.dll+61FE8F: 41 B1 01                    - mov r9b,01
game.dll+61FE92: 48 8B 44 24 70              - mov rax,[rsp+70]
game.dll+61FE97: 44 8B C7                    - mov r8d,edi
game.dll+61FE9A: 48 89 44 24 28              - mov [rsp+28],rax
game.dll+61FE9F: 8B D6                       - mov edx,esi
game.dll+61FEA1: C6 44 24 20 00              - mov byte ptr [rsp+20],00
game.dll+61FEA6: E8 75 6F 06 00              - call game.dll+686E20
game.dll+61FEAB: 48 8B 0D A6 90 28 01        - mov rcx,[game.dll+18A8F58]
game.dll+61FEB2: 45 33 C0                    - xor r8d,r8d
game.dll+61FEB5: 41 83 FF FF                 - cmp r15d,-01
game.dll+61FEB9: C7 44 24 20 00 00 00 00     - mov [rsp+20],00000000
game.dll+61FEC1: 44 8B CE                    - mov r9d,esi
game.dll+61FEC4: 8B D7                       - mov edx,edi
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>43</ID>
      <Description>"No Sway"</Description>
      <Color>A4A4FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript Async="1">{ Game   : helldivers2.exe
  Version:
  Date   : 2024-12-13
  Author : cfemen

  This script does blah blah blah
}

[ENABLE]


aobscanmodule(aobCalcSway,game.dll,F3 0F 51 FA EB 0B 0F 28 C2 E8 ?? ?? ?? ?? 0F 28 F8 44 0F 28 C7 0F 28 F7) // should be unique

aobCalcSway:
  nop 4

[DISABLE]

aobCalcSway:
  db F3 0F 51 FA

unregistersymbol(aobCalcSway)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>51</ID>
      <Description>"No Recoil"</Description>
      <Color>A4A4FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript Async="1">//cfemen
[ENABLE]

aobscanmodule(aobRecoil,game.dll,48 83 EC 18 48 8B 01) // should be unique

aobRecoil:
  db C3
registersymbol(aobRecoil)

[DISABLE]

aobRecoil:
  db 48
unregistersymbol(aobRecoil)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>42</ID>
      <Description>"Мгновенная зарядка Рельсотрона"</Description>
      <Color>A4A4FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript Async="1">// Game Executable   : helldivers2.exe
// Author            : gir489
// Executable Version: 1.8.25984.0
// MD5 Signature     : F1A0F5136B9035B653BDE0217332B2C8
// EXE Compile Date  : December 06, 2024 11:43 AM
// Script Date       : December 12, 2024 10:40 PM
[ENABLE]
aobscanmodule(aob_RailgunCharge,game.dll, F3 43 0F 11 44 F7 ? 45 84 E4)
registersymbol(aob_RailgunCharge)
assert(aob_RailgunCharge+3F, 45 0F 2F D9)
alloc(newmem,1024)
label(return)

newmem:
  mov [r15+r14*8+4], (float)2.999999
  movss xmm0, [r15+r14*8+4]
  test r12b,r12b
  je far return+2F
  comiss xmm10,xmm9
  jmp far return

aob_RailgunCharge:
  jmp far newmem
  nop 2
return:

[DISABLE]
aob_RailgunCharge:
  db F3 43 0F 11 44 F7 04 45 84 E4 74 33 45 0F 2F D1

unregistersymbol(aob_RailgunCharge)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: game.dll+58FDB9

game.dll+58FD6C: 0F 85 53 FF FF FF        - jne game.dll+58FCC5
game.dll+58FD72: 41 8B 44 D2 04           - mov eax,[r10+rdx*8+04]
game.dll+58FD77: 83 F8 FF                 - cmp eax,-01
game.dll+58FD7A: 0F 84 45 FF FF FF        - je game.dll+58FCC5
game.dll+58FD80: 8B C8                    - mov ecx,eax
game.dll+58FD82: 49 8B 43 38              - mov rax,[r11+38]
game.dll+58FD86: 8B 3C 88                 - mov edi,[rax+rcx*4]
game.dll+58FD89: E9 3D FF FF FF           - jmp game.dll+58FCCB
game.dll+58FD8E: 3B C3                    - cmp eax,ebx
game.dll+58FD90: 75 AB                    - jne game.dll+58FD3D
game.dll+58FD92: 41 83 7C D2 04 FF        - cmp dword ptr [r10+rdx*8+04],-01
game.dll+58FD98: 74 A3                    - je game.dll+58FD3D
game.dll+58FD9A: 48 8B 74 24 48           - mov rsi,[rsp+48]
game.dll+58FD9F: 8B 56 08                 - mov edx,[rsi+08]
game.dll+58FDA2: E8 49 46 E9 FF           - call game.dll+4243F0
game.dll+58FDA7: 83 F8 05                 - cmp eax,05
game.dll+58FDAA: 41 0F 95 C4              - setne r12b
game.dll+58FDAE: 75 92                    - jne game.dll+58FD42
game.dll+58FDB0: 41 0F 28 C1              - movaps xmm0,xmm9
game.dll+58FDB4: F3 41 0F 58 C7           - addss xmm0,xmm15
// ---------- INJECTING HERE ----------
game.dll+58FDB9: F3 43 0F 11 44 3E 04     - movss [r14+r15+04],xmm0
// ---------- DONE INJECTING  ----------
game.dll+58FDC0: 45 84 E4                 - test r12b,r12b
game.dll+58FDC3: 74 32                    - je game.dll+58FDF7
game.dll+58FDC5: 45 0F 2F D1              - comiss xmm10,xmm9
game.dll+58FDC9: 76 63                    - jna game.dll+58FE2E
game.dll+58FDCB: 41 0F 2F C2              - comiss xmm0,xmm10
game.dll+58FDCF: 72 5D                    - jb game.dll+58FE2E
game.dll+58FDD1: 41 80 BD B8 00 00 00 00  - cmp byte ptr [r13+000000B8],00
game.dll+58FDD9: 74 53                    - je game.dll+58FE2E
game.dll+58FDDB: 80 7C 24 40 00           - cmp byte ptr [rsp+40],00
game.dll+58FDE0: 74 4C                    - je game.dll+58FE2E
game.dll+58FDE2: 48 8B 4D 88              - mov rcx,[rbp-78]
game.dll+58FDE6: 48 8B D6                 - mov rdx,rsi
game.dll+58FDE9: F3 43 0F 11 44 3E 08     - movss [r14+r15+08],xmm0
game.dll+58FDF0: E8 8B 53 EA FF           - call game.dll+435180
game.dll+58FDF5: EB 2E                    - jmp game.dll+58FE25
game.dll+58FDF7: 45 0F 2F D9              - comiss xmm11,xmm9
game.dll+58FDFB: 76 31                    - jna game.dll+58FE2E
game.dll+58FDFD: 41 0F 2F C3              - comiss xmm0,xmm11
game.dll+58FE01: 72 2B                    - jb game.dll+58FE2E
game.dll+58FE03: 80 7C 24 40 00           - cmp byte ptr [rsp+40],00
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>57</ID>
      <Description>"Без перезарядки"</Description>
      <Color>A4A4FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript Async="1">// Game Executable   : helldivers2.exe
// Author            : gir489
// Executable Version: 1.8.17201.0
// MD5 Signature     : 495C5D1678F8B6C0A61041D667C48362
// EXE Compile Date  : March 08, 2024 10:46 AM
// Script Date       : March 13, 2024 03:32 PM
[ENABLE]
aobscanmodule(aob_SetAmmo,game.dll,44 89 74 01 18 4D 8B 42 50)
registersymbol(aob_SetAmmo)

aob_SetAmmo:
 nop 5

[DISABLE]
aob_SetAmmo:
  db 44 89 74 01 18

unregistersymbol(aob_SetAmmo)
dealloc(newmem_SetAmmo)

{
// ORIGINAL CODE - INJECTION POINT: game.dll+41946B

game.dll+419422: 41 8D 0C 18              - lea ecx,[r8+rbx]
game.dll+419426: 48 23 C8                 - and rcx,rax
game.dll+419429: 8B 04 CF                 - mov eax,[rdi+rcx*8]
game.dll+41942C: 4C 8D 1C CF              - lea r11,[rdi+rcx*8]
game.dll+419430: 3B C6                    - cmp eax,esi
game.dll+419432: 74 62                    - je game.dll+419496
game.dll+419434: 3B C2                    - cmp eax,edx
game.dll+419436: 74 62                    - je game.dll+41949A
game.dll+419438: 41 FF C0                 - inc r8d
game.dll+41943B: 45 3B C1                 - cmp r8d,r9d
game.dll+41943E: 72 E0                    - jb game.dll+419420
game.dll+419440: B8 FF FF FF FF           - mov eax,FFFFFFFF
game.dll+419445: 48 8B 74 24 40           - mov rsi,[rsp+40]
game.dll+41944A: 48 8B 6C 24 38           - mov rbp,[rsp+38]
game.dll+41944F: 48 8B 5C 24 30           - mov rbx,[rsp+30]
game.dll+419454: 48 8B 7C 24 48           - mov rdi,[rsp+48]
game.dll+419459: 8B D0                    - mov edx,eax
game.dll+41945B: 48 8D 04 D2              - lea rax,[rdx+rdx*8]
game.dll+41945F: 48 8D 0C C5 00 00 00 00  - lea rcx,[rax*8+00000000]
game.dll+419467: 49 8B 42 50              - mov rax,[r10+50]
// ---------- INJECTING HERE ----------
game.dll+41946B: 44 89 74 01 18           - mov [rcx+rax+18],r14d
// ---------- DONE INJECTING  ----------
game.dll+419470: 4D 8B 42 50              - mov r8,[r10+50]
game.dll+419474: 49 8B 42 38              - mov rax,[r10+38]
game.dll+419478: 49 83 C0 18              - add r8,18
game.dll+41947C: 4C 03 C1                 - add r8,rcx
game.dll+41947F: 48 8B 0C D0              - mov rcx,[rax+rdx*8]
game.dll+419483: BA 3E D6 A5 D7           - mov edx,D7A5D63E
game.dll+419488: 8B 49 10                 - mov ecx,[rcx+10]
game.dll+41948B: 48 83 C4 20              - add rsp,20
game.dll+41948F: 41 5E                    - pop r14
game.dll+419491: E9 8A 0A 68 00           - jmp game.dll+A99F20
game.dll+419496: 3B C2                    - cmp eax,edx
game.dll+419498: 75 A6                    - jne game.dll+419440
game.dll+41949A: 41 8B 43 04              - mov eax,[r11+04]
game.dll+41949E: EB A5                    - jmp game.dll+419445
game.dll+4194A0: CC                       - int 3
game.dll+4194A1: CC                       - int 3
game.dll+4194A2: CC                       - int 3
game.dll+4194A3: CC                       - int 3
game.dll+4194A4: CC                       - int 3
game.dll+4194A5: CC                       - int 3
}
</AssemblerScript>
      <Hotkeys>
        <Hotkey>
          <Action>Toggle Activation</Action>
          <Keys>
            <Key>16</Key>
            <Key>39</Key>
          </Keys>
          <ID>0</ID>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>117475</ID>
      <Description>"500kg expanded radius                                                      "</Description>
      <Options moHideChildren="1"/>
      <Color>A4A4FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
{$lua}
registerSymbol("eagle500kg_base", '[game.dll + 02124038] + 100*A + 9C')
{$asm}
//

// eagle 500kg bomb
eagle500kg_base: //explosion_type_on_impact
  dd #58 //(58=Hellbomb) (177=500kg) (157=SEAF Mininuke also works)

[DISABLE]
//  eagle 500kg bomb
eagle500kg_base: //explosion_type_on_impact
  dd #177 //177=500kg
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>113931</ID>
      <Description>"Нет перегрева (Оружие)"</Description>
      <Color>A4A4FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript Async="1">// Game Executable   : helldivers2.exe
// Author            : gir489
// Executable Version: 1.8.19279.0
// MD5 Signature     : 94CE72E11EB1E8E8CA9D1201B779444F
// EXE Compile Date  : May 08, 2024 11:48 AM
// Script Date       : May 25, 2024 03:25 PM
[ENABLE]
aobscanmodule(aob_ImmaChargingMahLasor,game.dll,F3 41 0F 11 08 8B 49)
registersymbol(aob_ImmaChargingMahLasor)

aob_ImmaChargingMahLasor+4:
 db 28

[DISABLE]
aob_ImmaChargingMahLasor:
  db F3 41 0F 11 08

unregistersymbol(aob_ImmaChargingMahLasor)

{
// ORIGINAL CODE - INJECTION POINT: game.dll+41F4FA

game.dll+41F4B0: 74 75                    - je game.dll+41F527
game.dll+41F4B2: 3B C3                    - cmp eax,ebx
game.dll+41F4B4: 74 75                    - je game.dll+41F52B
game.dll+41F4B6: FF C1                    - inc ecx
game.dll+41F4B8: 41 3B C8                 - cmp ecx,r8d
game.dll+41F4BB: 72 E3                    - jb game.dll+41F4A0
game.dll+41F4BD: 33 ED                    - xor ebp,ebp
game.dll+41F4BF: 48 8B 9C 24 C8 00 00 00  - mov rbx,[rsp+000000C8]
game.dll+41F4C7: 48 8B 7C 24 20           - mov rdi,[rsp+20]
game.dll+41F4CC: 0F 2F F7                 - comiss xmm6,xmm7
game.dll+41F4CF: 0F 86 CF 02 00 00        - jbe game.dll+41F7A4
game.dll+41F4D5: 0F 28 C6                 - movaps xmm0,xmm6
game.dll+41F4D8: F3 41 0F 10 4E 0C        - movss xmm1,[r14+0C]
game.dll+41F4DE: F3 0F 5D C8              - minss xmm1,xmm0
game.dll+41F4E2: 4D 8B 45 58              - mov r8,[r13+58]
game.dll+41F4E6: BA 36 38 02 A5           - mov edx,A5023836
game.dll+41F4EB: 49 8B 45 40              - mov rax,[r13+40]
game.dll+41F4EF: 49 83 C0 18              - add r8,18
game.dll+41F4F3: 4D 03 C7                 - add r8,r15
game.dll+41F4F6: 48 8B 0C D8              - mov rcx,[rax+rbx*8]
// ---------- INJECTING HERE ----------
game.dll+41F4FA: F3 41 0F 11 08           - movss [r8],xmm1
// ---------- DONE INJECTING  ----------
game.dll+41F4FF: 8B 49 10                 - mov ecx,[rcx+10]
game.dll+41F502: E8 19 BC 67 00           - call game.dll+A9B120
game.dll+41F507: 41 0F 2F 7E 0C           - comiss xmm7,[r14+0C]
game.dll+41F50C: 0F 82 AF 02 00 00        - jb game.dll+41F7C1
game.dll+41F512: 80 BC 24 B0 00 00 00 00  - cmp byte ptr [rsp+000000B0],00
game.dll+41F51A: 0F 85 A1 02 00 00        - jne game.dll+41F7C1
game.dll+41F520: B0 01                    - mov al,01
game.dll+41F522: E9 9C 02 00 00           - jmp game.dll+41F7C3
game.dll+41F527: 3B C3                    - cmp eax,ebx
game.dll+41F529: 75 92                    - jne game.dll+41F4BD
game.dll+41F52B: 41 83 7C D2 04 FF        - cmp dword ptr [r10+rdx*8+04],-01
game.dll+41F531: 74 8A                    - je game.dll+41F4BD
game.dll+41F533: 3B DF                    - cmp ebx,edi
game.dll+41F535: 74 3E                    - je game.dll+41F575
game.dll+41F537: 44 8B 4D 28              - mov r9d,[rbp+28]
game.dll+41F53B: 41 8D 70 FF              - lea esi,[r8-01]
game.dll+41F53F: 44 0F AF CB              - imul r9d,ebx
game.dll+41F543: 33 C9                    - xor ecx,ecx
game.dll+41F545: 45 85 C0                 - test r8d,r8d
game.dll+41F548: 74 2B                    - je game.dll+41F575
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>236</ID>
      <Description>"Супер Урон (Советую просто через редактор изменить нужное оружие)"</Description>
      <Color>A4A4FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript Async="1">{ Game   : helldivers2.exe
  Version:
  Date   : 2024-04-07
  Author : ZoDDeL

  This script does blah blah blah
}

[ENABLE]


aobscanmodule(damageMulti,game.dll,66 0F 6E 59 04 66 0F 6E 49 08 0F 5B C9 0F 5B DB) // should be unique
registersymbol(damageMulti)
alloc(dmg_newmem,$2000)

label(dmg_code)
label(dmg_return)

dmg_newmem:
  cmp [rcx+04],#0 // skip any 0 dmg weapons like smoke or unknown shit
  je dmg_code

// whitelisted weapons that get super damage
  cmp [rcx+00], #10 // Projectile_Flamethrower FLAM-40 part 1
    je dmg_Super
  cmp [rcx+00], #15 // Projectile_Grenade_40mm_HE GL-21 part 1 projectile / mortar shell (turret)
    je dmg_Super
  cmp [rcx+00], #25 // Projectile_Laser_Long LAS-16 Sickle
    je dmg_Super
  cmp [rcx+00], #27 // Projectile_Plasma_Bolt SG-8P Punisher Plasma (1) / PLAS-1 Scorcher
    je dmg_Super
  cmp [rcx+00], #28 // Projectile_Plasma_Punisher
    je dmg_Super
  cmp [rcx+00], #30 // Projectile_Plasma_Rifle_Charge
    je dmg_Super
  cmp [rcx+00], #31 // Projectile_Railgun RS-422 railgun
    je dmg_Super
  cmp [rcx+00], #34 // Projectile_Pistol_9x20mm_fmj P-19 Redeemer
    je dmg_Super
  cmp [rcx+00], #35 // Projectile_Pistol_9x20mm_smj MP-98 Knight
    je dmg_Super
  cmp [rcx+00], #36 // Projectile_Pistol_9x20mm_hp P-2 Peacemaker
    je dmg_Super
  cmp [rcx+00], #43 // Projectile_Pistol_12x25mm_fmj SMG-37 Defender
    je dmg_Pump
  cmp [rcx+00], #50 // Projectile_Pistol_12x25mm_stun SMG-72 Pummeler
    je dmg_Pump
  cmp [rcx+00], #51 // Projectile_Pistol_Magnum P-113 Verdict
    je dmg_Super
  cmp [rcx+00], #54 // Projectile_Pistol_13x40mm_fmj P-4 Senator
    je dmg_Super
  cmp [rcx+00], #58 // Projectile_Rifle_5p5x50mm_ap AR-23P Liberator Penetrator
    je dmg_Super
  cmp [rcx+00], #60 // Projectile_Rifle_5p5x50mm_exp AR-23C Liberator Concussive
    je dmg_Super
  cmp [rcx+00], #61 // Projectile_Rifle_5p5x50mm_fmj AR-23 Liberator / AR-22C Patriot / AR-48 Truth Whisperer / M-105 Stalwart / AR-61 Tenderizer / Guard Dog
    je dmg_Super
  cmp [rcx+00], #75 // Projectile_Rifle_8x60mm_fmj MG-43 / EXO-45 Gatling / Gatling Turret / BR-14 Adjudicator / AR-L20 Jus
    je dmg_Super
  cmp [rcx+00], #82 // Projectile_Rifle_Rico AR-61 Tenderizer
    je dmg_Super
  cmp [rcx+00], #83 // Projectile_Rifle_Constitution R-2124 Constitution
    je dmg_Super
  cmp [rcx+00], #85 // Projectile_Rifle_9x70mm_fmj R-63 Diligence
    je dmg_Super
  cmp [rcx+00], #86 // Projectile_Rifle_9x70mm_hv R-63CS Diligence Counter Sniper
    je dmg_Super
  cmp [rcx+00], #92 // Projectile_Rocket_15x100mm_exp R-36 Eruptor 1
    je dmg_Super
  cmp [rcx+00], #96 // Projectile_Rocket_15x100mm_std JAR-5 Dominator
    je dmg_Super
  cmp [rcx+00], #101 // Projectile_Shotgun_10g_buc SG-8 Punisher / SG-22 Bushwack
    je dmg_Super
  cmp [rcx+00], #102 // Projectile_Shotgun_Dragon_10g_flm SG-451 Cookout
    je dmg_Super
  cmp [rcx+00], #114 // Projectile_Shotgun_10g_slug SG-8S Slugger
    je dmg_Super
  cmp [rcx+00], #116 // Projectile_Shotgun_12g_bir SG-225SP Breaker Spray&amp;Pray
    je dmg_Super
  cmp [rcx+00], #117 // Projectile_Shotgun_12g_buc SG-225 Breaker
    je dmg_Super
  cmp [rcx+00], #118 // Projectile_Shotgun_12g_bug SG-225BB Breaker BugBiter
    je dmg_Super
  cmp [rcx+00], #119 // Projectile_Shotgun_12g_fle SG-225NS Breaker Nailspitter
    je dmg_Super
  cmp [rcx+00], #120 // Projectile_Shotgun_12g_flm SG-225IE Breaker Incendiary
    je dmg_Super
  cmp [rcx+00], #130 // Projectile_Arc_Thrower ARC-3 Arc Thrower
    je dmg_Super
  cmp [rcx+00], #131 // Projectile_Arc_Thrower_Mk2
    je dmg_Super
  cmp [rcx+00], #132 // Projectile_Arc_Shotgun ARC-12 Blitzer
    je dmg_Super
  cmp [rcx+00], #135 // Projectile_Rifle_12p5x100mm_fmj HMG Emplacement
    je dmg_Super
  cmp [rcx+00], #136 // Projectile_Rifle_12p5x100mm_bchp MG-206 HMG
    je dmg_Super
  cmp [rcx+00], #137 // Projectile_Rifle_12p5x100mm_eit anti material rifle
    je dmg_Super
  cmp [rcx+00], #139 // Projectile_Crossbow_Bolt CB-9 explosive crossbow 1
    je dmg_Super
  cmp [rcx+00], #140 // Explosion_Crossbow_Bolt CB-9 explosive crossbow 2
    je dmg_Super
  cmp [rcx+00], #142 // Projectile_Cannon_20mm_APHET autocannon part 1
    je dmg_Super
  cmp [rcx+00], #143 // Projectile_Cannon_20mm_HVAPT
    je dmg_Super
  cmp [rcx+00], #144 // Projectile_Cannon_30mm_APHE emancipator exo gun part 1
    je dmg_Super
  cmp [rcx+00], #149 // Projectile_Grenade_40mm_HEAT GP-31 grenade pistol part 1 (part 2 = gren launcher explo)
    je dmg_Super
  cmp [rcx+00], #151 // Projectile_Grenade_75mm_HEAT EAT-17 part 1
    je dmg_Super
  cmp [rcx+00], #152 // Projectile_Grenade_85mm_HEAT recoil-less rifle part 1 shell
    je dmg_Super
  cmp [rcx+00], #153 // Projectile_Grenade_85mm_HEAT_MK2
    je dmg_Super
  cmp [rcx+00], #161 // Projectile_Missile_66mm MLS-4X Commando part 1 shell
    je dmg_Super
  cmp [rcx+00], #162 // Projectile_Missile_66mm_MK2
    je dmg_Super
  cmp [rcx+00], #163 // Projectile_Missile_Combat_Walker EXO-45 rocket part 1
    je dmg_Super
  cmp [rcx+00], #164 // Projectile_Missile_Combat_Walker_MK2
    je dmg_Super
  cmp [rcx+00], #166 // Projectile_Missile_Faf FAF-14 Spear 1 shell
    je dmg_Super
  cmp [rcx+00], #203 // Explosion_Projectile_PlasmaBolt_Small
    je dmg_Super
  cmp [rcx+00], #204 // Explosion_Projectile_PlasmaBolt_Medium PLAS-1 Scorcher explosion
    je dmg_Super
  cmp [rcx+00], #205 // Explosion_Projectile_PlasmaBolt_Medium_Volatile
    je dmg_Super
  cmp [rcx+00], #208 // Explosion_Projectile_PlasmaBolt_Large SG-8P Punisher Plasma explosion
    je dmg_Super
  cmp [rcx+00], #209 // Explosion_Projectile_Plasma_Punisher PLAS-101 Purifier Explosion
    je dmg_Super
  cmp [rcx+00], #214 // Explosion_Plasma_Cone
    je dmg_Super
  cmp [rcx+00], #231 // Explosion_HandGrenade_Frag_Cluster RL-77 airburst (ground???)
    je dmg_Super
  cmp [rcx+00], #240 // Explosion_RailgunOvercharge
    je dmg_Super
  cmp [rcx+00], #235 // Explosion_Projectile_Cannon_20mm_Flak R-36 Eruptor 3
    je dmg_Super
  cmp [rcx+00], #248 // Explosion_Projectile_Cannon_20mm_HE autocannon part 2 explosion
    je dmg_Super
  cmp [rcx+00], #249 // Explosion_Projectile_Cannon_20mm_APHET emancipator exo gun part 2
    je dmg_Super
  cmp [rcx+00], #253 // Explosion_Projectile_Grenade_40mm_HE GL-21 / GP-31 grenade pistol explosion
    je dmg_Super
  cmp [rcx+00], #257 // Explosion_Projectile_Grenade_85mm_DirectHit RL-77 airburst (rocket)
    je dmg_Super
  cmp [rcx+00], #258 // Explosion_Projectile_Grenade_85mm_HEAT recoil-less rifle part 2 explosion
    je dmg_Super
  cmp [rcx+00], #259 // Explosion_Projectile_Grenade_75mm_HEAT EAT-17 part 3
    je dmg_Super
  cmp [rcx+00], #260 // Projectile_Laser_Pulse LAS-99 quasar part 1
    je dmg_Super
  cmp [rcx+00], #261 // Explosion_Laser_Pulse LAS-99 quasar part 2
    je dmg_Super
  cmp [rcx+00], #265 // Explosion_Projectile_Missile_66mm MLS-4X Commando part 2 explosion
    je dmg_Super
  cmp [rcx+00], #266 // Explosion_Projectile_Missile_66mm_MK2
    je dmg_Super
  cmp [rcx+00], #267 // Explosion_Projectile_Missile_CombatWalker EXO-45 rocket part 2
    je dmg_Super
  cmp [rcx+00], #268 // Explosion_Projectile_Missile_CombatWalker_MK2
    je dmg_Super
  cmp [rcx+00], #270 // Explosion_Projectile_Missile_Faf FAF-14 Spear 2 explosion
    je dmg_Super
  cmp [rcx+00], #271 // Explosion_Projectile_Missile_Faf_MK2
    je dmg_Super
  cmp [rcx+00], #272 // Explosion_Projectile_Missile_Stinger
    je dmg_Super
  cmp [rcx+00], #339 // DPS_BeamSmall LAS-7 Dagger
    je dmg_Super
  cmp [rcx+00], #340 // DPS_BeamMedium LAS-5 Scythe
    je dmg_Super
  cmp [rcx+00], #345 // DPS_BeamLarge LAS-98
    je dmg_Super
  cmp [rcx+00], #431 // Impact_Throwing_Knife K-2 Throwing Knife
    je dmg_Super

// these weapons stay default
  cmp [rcx+00], #126 // Projectile_Shrapnel G-6 Frag part 2
    je dmg_code
  cmp [rcx+00], #127 // Projectile_Shrapnel_High_Velocity Orbital airburst impact
    je dmg_code
  cmp [rcx+00], #128 // Projectile_StratagemLauncher
    je dmg_code
  cmp [rcx+00], #141 // Projectile_Tesla_Turret tesla tower
    je dmg_code
  cmp [rcx+00], #145 // Projectile_Cannon_40mm_APHE Autocannon Sentry impact
    je dmg_code
  cmp [rcx+00], #146 // Projectile_Cannon_40mm_Flak
    je dmg_code
  cmp [rcx+00], #147 // Projectile_Cannon_Eagle_23mm Eagle strafing run impact
    je dmg_code
  cmp [rcx+00], #156 // Projectile_Rocket_70mm rocket sentry turret 1
    je dmg_code
  cmp [rcx+00], #158 // Projectile_Bomb_100kg Eagle airstrike impact
    je dmg_code
  cmp [rcx+00], #169 // Projectile_Rocket_110mm Eagle 110MM rocket pods impact
    je dmg_code
  cmp [rcx+00], #172 // Projectile_Bomb_500kg 500KG bomb impact
    je dmg_code
  cmp [rcx+00], #176 // Projectile_Orbital_Cannon_110mm Orbital gas canister impact
    je dmg_code
  cmp [rcx+00], #177 // Projectile_Orbital_Cannon_120mm_HE Orbital 120MM HE barrage impact
    je dmg_code
  cmp [rcx+00], #178 // Projectile_Orbital_Cannon_380MM_HE Orbital 380MM HE barrage/precison strike/walking impact
    je dmg_code
  cmp [rcx+00], #179 // Projectile_Orbital_Napalm
    je dmg_code
  cmp [rcx+00], #180 // Explosion_Orbital_Napalm
    je dmg_code
  cmp [rcx+00], #181 // Projectile_Orbital_Railcannon Orbital railcannon impact
    je dmg_code
  cmp [rcx+00], #182 // Projectile_Orbital_Stunround
    je dmg_code
  cmp [rcx+00], #189 // Explosion_HandGrenade_Flash
    je dmg_code
  cmp [rcx+00], #190 // Explosion_Projectile_Grenade_40mm_Stun
    je dmg_code
  cmp [rcx+00], #191 // Explosion_Projectile_Snowball
    je dmg_code
  cmp [rcx+00], #224 // Explosion_Prop_Barrel
    je dmg_code
  cmp [rcx+00], #226 // Explosion_Building_Small
    je dmg_code
  cmp [rcx+00], #227 // Explosion_Building_Medium
    je dmg_code
  cmp [rcx+00], #228 // Explosion_Building_Large
    je dmg_code
  cmp [rcx+00], #229 // Explosion_Building_Huge
    je dmg_code
  cmp [rcx+00], #230 // Explosion_HandGrenade_Frag G-6 Frag part 1
    je dmg_code
  cmp [rcx+00], #232 // Explosion_HandGrenade_Incendiary G-10 Incendiary/incendiary mines (explosion)
    je dmg_code
  cmp [rcx+00], #234 // Explosion_HandGrenade_Thermite G-123 Thermite (explosion)
    je dmg_code
  cmp [rcx+00], #245 // Explosion_HandGrenade_HighExplosive G-12 High Explosive /  G-16 Impact
    je dmg_code
  cmp [rcx+00], #247 // Explosion_Projectile_Cannon_Eagle_23mm Eagle strafing run pods
    je dmg_code
  cmp [rcx+00], #250 // Explosion_Projectile_Cannon_30mm_APHE
    je dmg_code
  cmp [rcx+00], #251 // Explosion_Projectile_Cannon_40mm_Flak
    je dmg_code
  cmp [rcx+00], #252 // Explosion_Projectile_Cannon_40mm_APHE Autocannon sentry explosion
    je dmg_code
  cmp [rcx+00], #254 // Explosion_Projectile_Grenade_40mm_APHE
    je dmg_code
  cmp [rcx+00], #255 // Explosion_Projectile_Grenade_40mm_ProximityCone
    je dmg_code
  cmp [rcx+00], #256 // Explosion_Projectile_Grenade_Mortar_40mm_HE mortar turred explosion
    je dmg_code
  cmp [rcx+00], #262 // Explosion_Projectile_OrbitalShot Eagle Clusterbomb pods
    je dmg_code
  cmp [rcx+00], #263 // Explosion_Projectile_OrbitalShot_MK2
    je dmg_code
  cmp [rcx+00], #264 // Explosion_Projectile_EagleBomb_Napalm Napalm SEAF impact
    je dmg_code
  cmp [rcx+00], #273 // Explosion_Projectile_Rocket_70mm rocket sentry turret 2
    je dmg_code
  cmp [rcx+00], #274 // Explosion_Projectile_Rocket_70mm_HE
    je dmg_code
  cmp [rcx+00], #275 // Explosion_Projectile_Rocket_110mm Eagle 110MM rocket pods
    je dmg_code
  cmp [rcx+00], #277 // Explosion_ContactMine anti personnel mines
    je dmg_code
  cmp [rcx+00], #278 // Explosion_ContactMine_Incendiary
    je dmg_code
  cmp [rcx+00], #279 // Explosion_AntiTankMine anti tank mines
    je dmg_code
  cmp [rcx+00], #288 // Explosion_Projectile_EagleBomb_Impact Eagle Airstrike Impact
    je dmg_code
  cmp [rcx+00], #289 // Explosion_Projectile_EagleBomb_100kg Eagle Airstrike
    je dmg_code
  cmp [rcx+00], #290 // Explosion_Projectile_EagleBomb_100kg_MK3
    je dmg_code
  cmp [rcx+00], #291 // Explosion_Projectile_EagleMissile
    je dmg_code
  cmp [rcx+00], #293 // Explosion_HellpodImpact Hellpod impact damage
    je dmg_code
  cmp [rcx+00], #294 // Explosion_HellpodImpact_FieryDrop
    je dmg_code
  cmp [rcx+00], #295 // Explosion_HellpodExplosion
    je dmg_code
  cmp [rcx+00], #296 // Explosion_Vehicle_CyborgHugeDeath
    je dmg_code
  cmp [rcx+00], #298 // Explosion_Vehicle_DropshipCrash
    je dmg_code
  cmp [rcx+00], #303 // Explosion_Projectile_Railcannon Orbital railcannon explosion
    je dmg_code
  cmp [rcx+00], #304 // Explosion_Projectile_OrbitalBarrage Orbital 380MM HE barrage/walking explosion
    je dmg_code
  cmp [rcx+00], #305 // Explosion_Projectile_OrbitalStrike Orbital 120MM HE barrage
    je dmg_code
  cmp [rcx+00], #306 // Explosion_Projectile_OrbitalGas
    je dmg_code
  cmp [rcx+00], #308 // Explosion_Projectile_OrbitalShell
    je dmg_code
  cmp [rcx+00], #311 // Explosion_Projectile_EagleBomb_500kg High-yield SEAF explosion/500KG Bomb Explosion
    je dmg_code
  cmp [rcx+00], #323 // Explosion_EscapePodCrash
    je dmg_code
  cmp [rcx+00], #326 // Explosion_Hellbomb Hellbomb / SEAF Mini-Nuke
    je dmg_code
  cmp [rcx+00], #327 // Explosion_BugDrill
    je dmg_code
  cmp [rcx+00], #328 // Explosion_ICBM_explode
    je dmg_code
  cmp [rcx+00], #341 // DPS_BeamMediumDrone AX/LAS-5 "Guard Dog" Rover
    je dmg_code
  cmp [rcx+00], #348 // DPS_BeamHuge Orbital Laser
    je dmg_code
  cmp [rcx+00], #349 // DPS_BeamHuge_Upgrade Orbital Laser
    je dmg_code
  cmp [rcx+00], #352 // DPS_Fire Napalm SEAF burn
    je dmg_code
  cmp [rcx+00], #353 // DPS_Thermite G-123 Thermite (burn)
    je dmg_code
  cmp [rcx+00], #363 // DPS_Gas Orbital Gas
    je dmg_code
  cmp [rcx+00], #370 // Ability_Avatar_Melee Melee
    je dmg_code
  cmp [rcx+00], #372 // Ability_Avatar_Melee_Booster_Muscle_Enhancement Melee
    je dmg_code
  cmp [rcx+00], #373 // Ability_Avatar_Melee_Bayonet Melee
    je dmg_code
  cmp [rcx+00], #425 // Ability_SuperEarth_Soldier_Shove Melee
    je dmg_code

  jmp dmg_Enemy


dmg_Super:
  mov [rcx+04],#4000 // writes m_max_damage
  mov [rcx+08],#4000 // writes m_min_damage
  mov [rcx+0C],#10 // writes m_penetration_no_angle
  mov [rcx+10],#10 // writes m_penetration_angle
  mov [rcx+14],#10 // writes m_penetration_3
  mov [rcx+18],#10 // writes m_penetration_4
  mov [rcx+1C],#50 // writes m_demolition
  mov [rcx+20],#100 // writes m_pushback
  mov [rcx+24],#100 // writes m_unk1 value.
  jmp dmg_code
  //movd xmm3,[rcx+04]
  //movd xmm1,[rcx+08]dmg_Super
  //cvtdq2ps xmm1,xmm1
  //cvtdq2ps xmm3,xmm3
  //mulss xmm3, [dmg_multiplier] // multiplies value with dmg_multiplier
  //mulss xmm1, [dmg_multiplier] // multiplies value with admg_multiplier
  //jmp dmg_check

dmg_Pump:
  mov [rcx+04],#320 // writes m_max_damage
  mov [rcx+08],#32 // writes m_min_damage
  mov [rcx+0C],#10 // writes m_penetration_no_angle
  mov [rcx+10],#10 // writes m_penetration_angle
  mov [rcx+14],#10 // writes m_penetration_3
  mov [rcx+18],#10 // writes m_penetration_4
  jmp dmg_code

//dmg_check:
//  comiss xmm3, [dmg_limit] // checks if dmg after multiplier is above dmg_limit
//  ja short dmg_cap
//  comiss xmm1, [dmg_limit] // checks if admg after multiplier is above dmg_limit
//  ja short dmg_cap
//  jmp dmg_return
//
//dmg_cap:
//  movss xmm3, [dmg_limit] // writes dmg_limit value
//  movss xmm1, [dmg_limit] // writes dmg_limit value
//  jmp dmg_return

dmg_Enemy:
  mov [rcx+0C],#0 // writes m_penetration_no_angle
  mov [rcx+10],#0 // writes m_penetration_angle
  mov [rcx+14],#0 // writes m_penetration_3
  mov [rcx+18],#0 // writes m_penetration_4
//  mov [rcx+1C],#0 // writes m_demolition //Removed because it makes bugs get stuck in their attack animation if they encounter a wall.
  mov [rcx+20],#0 // writes m_pushback
//  mov [rcx+24],#100 // writes m_unk1 value.
  movd xmm3,[rcx+04]
  movd xmm1,[rcx+08]
  cvtdq2ps xmm1,xmm1
  cvtdq2ps xmm3,xmm3
  mulss xmm3, [enemydmg_multiplier]
  mulss xmm1, [enemydmg_multiplier]
  jmp dmg_return

dmg_code:
  movd xmm3,[rcx+04]
  movd xmm1,[rcx+08]
  cvtdq2ps xmm1,xmm1
  cvtdq2ps xmm3,xmm3
  jmp dmg_return


dmg_multiplier:
  dd (float)20  // edit this for times x base damage (1 is default)

enemydmg_multiplier:
  dd (float)0.25  // edit this for times x enemy damage (1 is default)

dmg_limit:
  dd (float)7000 // limit the super damage to prevent creating weapons that would outdamage inf health


damageMulti:
  jmp far dmg_newmem
  nop 2
dmg_return:



[DISABLE]
damageMulti:
db 66 0F 6E 59 04 66 0F 6E 49 08 0F 5B C9 0F 5B DB

dealloc(dmg_newmem)
dealloc(dmg_multiplier)
dealloc(enemydmg_multiplier)
dealloc(dmg_limit)
unregistersymbol(damageMulti)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>138</ID>
      <Description>"Редактор Оружия"</Description>
      <Options moHideChildren="1"/>
      <Color>FF8000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : helldivers2.exe
  Version: 
  Date   : 2024-03-21
  Author : cfe

  This script does blah blah blah
}

[ENABLE]
globalalloc(fSpeed,4)
fSpeed:
dd (float)2
globalalloc(pWeapon,8)
pWeapon:
dq 0
globalalloc(pFirerate,8)
pFirerate:
dq 0

aobscanmodule(aobReadWeapon3,game.dll,66 0F 6E 40 04 4D 8B C6 41 8B 57 0C 0F 5B C0) // should be unique
alloc(newmem4,$1000)

label(code4)
label(return4)

newmem4:

code4:
  push rbx
  mov rbx,pWeapon
  mov [rbx],rax
  pop rbx
  movd xmm0,[rax+04]
  mov r8,r14
  mov edx,[r15+0C]
  cvtdq2ps xmm0,xmm0
  jmp return4

aobReadWeapon3:
  jmp far newmem4
  nop
return4:
registersymbol(aobReadWeapon3)

aobscanmodule(aobBlitzerFire,game.dll,0F 10 48 10 48 8D 8D B0 00 00 00 0F 29 85 B0 00 00 00) // should be unique
alloc(newmem5,$1000)

label(code5)
label(return5)

newmem5:

code5:
  push rbx
  push rcx
  mov rbx,pFirerate
  lea rcx,[rax-4]
  mov [rbx],rcx
  pop rcx
  pop rbx
  movups xmm1,[rax+10]
  lea rcx,[rbp+000000B0]
  movaps [rbp+000000B0],xmm0
  jmp return5

aobBlitzerFire:
  jmp far newmem5
  nop 4
return5:
registersymbol(aobBlitzerFire)

aobscanmodule(aobBlitzerDamage,game.dll,44 8B 7A 24 49 8B D6 66 0F 6E 70 04 0F 5B F6) // should be unique
alloc(newmem6,$1000)

label(code6)
label(return6)

newmem6:

code6:
  push rbx
  mov rbx,pWeapon
  mov [rbx],rax
  pop rbx
  mov r15d,[rdx+24]
  mov rdx,r14
  movd xmm6,[rax+04]
  cvtdq2ps xmm6,xmm6
  jmp return6

aobBlitzerDamage:
  jmp far newmem6
  nop
return6:
registersymbol(aobBlitzerDamage)


aobscanmodule(aobFireRate,game.dll,48 8D 80 80 00 00 00 0F 11 41 80 0F 10 40 A0 0F 11 49 90 0F 10 48 B0 0F 11 41 A0 0F 10 40 C0 0F 11 49 B0 0F 10 48 D0 0F 11 41 C0 0F 10 40 E0 0F 11 49 D0 0F 10 48 F0 0F 11 41 E0 0F 11 49 F0 49 2B D5 75 AE 0F 10 00 0F 10 48 10 0F 11 01 0F 10 40 20 0F 11 49 10 0F 10 48 30 0F 11 41 20 0F 10 40 40 0F 11 49 30 0F 10 48 50) // should be unique
alloc(newmem7,$1000)

label(code7)
label(return7)

newmem7:

code7:
  push rbx
  mov ebx,[rax+8]
  test ebx,ebx
  je short @f
   mov rbx,pFirerate
   mov [rbx],rax
  @@:
  pop rbx
  lea rax,[rax+00000080]
  movups [rcx-80],xmm0
  movups xmm0,[rax-60]
  jmp return7

aobFireRate:
  jmp far newmem7
  nop
return7:
registersymbol(aobFireRate)


aobscanmodule(aobReadDMG,game.dll,F3 44 0F 10 8D F8 01 00 00 4D 8B C6 66 0F 6E 40 04) // should be unique
alloc(newmem8,$1000)

label(code8)
label(return8)

newmem8:

code8:
  push rbx
  mov rbx,pWeapon
  mov [rbx],rax
  pop rbx
  movss xmm9,[rbp+000001F8]
  mov r8,r14
  movd xmm0,[rax+04]
  jmp return8

aobReadDMG:
  jmp far newmem8
  nop 3
return8:
registersymbol(aobReadDMG)

aobscanmodule(aobDamageSpecial,game.dll,F3 44 0F 10 B5 F8 01 00 00 4D 8B C6 66 0F 6E 40 04) // should be unique
alloc(newmem9,$1000)

label(code9)
label(return9)

newmem9:

code9:
  push rbx
  mov rbx,pWeapon
  mov [rbx],rax
  pop rbx
  movss xmm14,[rbp+000001F8]
  mov r8,r14
  movd xmm0,[rax+04]
  jmp return9

aobDamageSpecial:
  jmp far newmem9
  nop 3
return9:
registersymbol(aobDamageSpecial)

aobscanmodule(aobReadSpecialDamage,game.dll,45 8B C4 0F 28 C7 66 0F 6E 70 04 0F 5B F6) // should be unique
alloc(newmem10,$1000)

label(code10)
label(return10)

newmem10:

code10:
  mov r8,pWeapon
  mov [r8],rax
  mov r8d,r12d
  movaps xmm0,xmm7
  movd xmm6,[rax+04]
  cvtdq2ps xmm6,xmm6
  jmp return10

aobReadSpecialDamage:
  jmp far newmem10
return10:
registersymbol(aobReadSpecialDamage)

[DISABLE]



aobReadWeapon3:
  db 66 0F 6E 40 04 4D 8B C6 41 8B 57 0C 0F 5B C0

unregistersymbol(aobReadWeapon3)
dealloc(newmem4)


aobBlitzerFire:
  db 0F 10 48 10 48 8D 8D B0 00 00 00 0F 29 85 B0 00 00 00

unregistersymbol(aobBlitzerFire)
dealloc(newmem5)

aobBlitzerDamage:
  db 44 8B 7A 24 49 8B D6 66 0F 6E 70 04 0F 5B F6

unregistersymbol(aobBlitzerDamage)
dealloc(newmem6)



{
// ORIGINAL CODE - INJECTION POINT: game.dll+CFDA33

game.dll+CFDA0A: 8B 85 F0 00 00 00        - mov eax,[rbp+000000F0]
game.dll+CFDA10: 48 89 54 24 60           - mov [rsp+60],rdx
game.dll+CFDA15: 85 C0                    - test eax,eax
game.dll+CFDA17: 74 08                    - je game.dll+CFDA21
game.dll+CFDA19: 4D 8B AC C0 70 FD C9 01  - mov r13,[r8+rax*8+01C9FD70]
game.dll+CFDA21: 8B 4A 3C                 - mov ecx,[rdx+3C]
game.dll+CFDA24: 49 8B C6                 - mov rax,r14
game.dll+CFDA27: 85 C9                    - test ecx,ecx
game.dll+CFDA29: 74 08                    - je game.dll+CFDA33
game.dll+CFDA2B: 49 8B 84 C8 80 F0 C9 01  - mov rax,[r8+rcx*8+01C9F080]
// ---------- INJECTING HERE ----------
game.dll+CFDA33: 41 8B 7D 3C              - mov edi,[r13+3C]
// ---------- DONE INJECTING  ----------
game.dll+CFDA37: 49 8B D6                 - mov rdx,r14
game.dll+CFDA3A: 66 0F 6E 70 04           - movd xmm6,[rax+04]
game.dll+CFDA3F: 0F 5B F6                 - cvtdq2ps xmm6,xmm6
game.dll+CFDA42: 85 FF                    - test edi,edi
game.dll+CFDA44: 74 08                    - je game.dll+CFDA4E
game.dll+CFDA46: 49 8B 94 F8 80 F0 C9 01  - mov rdx,[r8+rdi*8+01C9F080]
game.dll+CFDA4E: 49 8B C6                 - mov rax,r14
game.dll+CFDA51: 85 C9                    - test ecx,ecx
game.dll+CFDA53: 74 08                    - je game.dll+CFDA5D
game.dll+CFDA55: 49 8B 84 C8 80 F0 C9 01  - mov rax,[r8+rcx*8+01C9F080]
}
aobFireRate:
  db 48 8D 80 80 00 00 00 0F 11 41 80 0F 10 40 A0

unregistersymbol(aobFireRate)
dealloc(newmem7)

{
// ORIGINAL CODE - INJECTION POINT: game.dll+D04C9E

game.dll+D04C6B: 45 0F 57 C0                       - xorps xmm8,xmm8
game.dll+D04C6F: 4D 85 DB                          - test r11,r11
game.dll+D04C72: 0F 84 35 2B 00 00                 - je game.dll+D077AD
game.dll+D04C78: 49 8B C3                          - mov rax,r11
game.dll+D04C7B: 48 8D 8D F0 01 00 00              - lea rcx,[rbp+000001F0]
game.dll+D04C82: 41 8B D4                          - mov edx,r12d
game.dll+D04C85: 66 66 66 0F 1F 84 00 00 00 00 00  - nop word ptr [rax+rax+00000000]
game.dll+D04C90: 48 8D 89 80 00 00 00              - lea rcx,[rcx+00000080]
game.dll+D04C97: 0F 10 00                          - movups xmm0,[rax]
game.dll+D04C9A: 0F 10 48 10                       - movups xmm1,[rax+10]
// ---------- INJECTING HERE ----------
game.dll+D04C9E: 48 8D 80 80 00 00 00              - lea rax,[rax+00000080]
// ---------- DONE INJECTING  ----------
game.dll+D04CA5: 0F 11 41 80                       - movups [rcx-80],xmm0
game.dll+D04CA9: 0F 10 40 A0                       - movups xmm0,[rax-60]
game.dll+D04CAD: 0F 11 49 90                       - movups [rcx-70],xmm1
game.dll+D04CB1: 0F 10 48 B0                       - movups xmm1,[rax-50]
game.dll+D04CB5: 0F 11 41 A0                       - movups [rcx-60],xmm0
game.dll+D04CB9: 0F 10 40 C0                       - movups xmm0,[rax-40]
game.dll+D04CBD: 0F 11 49 B0                       - movups [rcx-50],xmm1
game.dll+D04CC1: 0F 10 48 D0                       - movups xmm1,[rax-30]
game.dll+D04CC5: 0F 11 41 C0                       - movups [rcx-40],xmm0
game.dll+D04CC9: 0F 10 40 E0                       - movups xmm0,[rax-20]
}
aobReadDMG:
  db F3 44 0F 10 8D F8 01 00 00 4D 8B C6 66 0F 6E 40 04

unregistersymbol(aobReadDMG)
dealloc(newmem8)

{
// ORIGINAL CODE - INJECTION POINT: game.dll+D06A0C

game.dll+D069E3: 8B 85 90 05 00 00           - mov eax,[rbp+00000590]
game.dll+D069E9: 85 C0                       - test eax,eax
game.dll+D069EB: 74 08                       - je game.dll+D069F5
game.dll+D069ED: 4D 8B BC C1 80 7D CA 01     - mov r15,[r9+rax*8+01CA7D80]
game.dll+D069F5: 8B 4F 3C                    - mov ecx,[rdi+3C]
game.dll+D069F8: 49 8B C6                    - mov rax,r14
game.dll+D069FB: 44 89 64 24 20              - mov [rsp+20],r12d
game.dll+D06A00: 85 C9                       - test ecx,ecx
game.dll+D06A02: 74 08                       - je game.dll+D06A0C
game.dll+D06A04: 49 8B 84 C9 90 70 CA 01     - mov rax,[r9+rcx*8+01CA7090]
// ---------- INJECTING HERE ----------
game.dll+D06A0C: F3 44 0F 10 8D F8 01 00 00  - movss xmm9,[rbp+000001F8]
// ---------- DONE INJECTING  ----------
game.dll+D06A15: 4D 8B C6                    - mov r8,r14
game.dll+D06A18: 66 0F 6E 40 04              - movd xmm0,[rax+04]
game.dll+D06A1D: 41 0F 28 C9                 - movaps xmm1,xmm9
game.dll+D06A21: 41 8B 57 3C                 - mov edx,[r15+3C]
game.dll+D06A25: F3 44 0F 11 4C 24 50        - movss [rsp+50],xmm9
game.dll+D06A2C: F3 41 0F 5E CA              - divss xmm1,xmm10
game.dll+D06A31: 0F 5B C0                    - cvtdq2ps xmm0,xmm0
game.dll+D06A34: F3 0F 59 C1                 - mulss xmm0,xmm1
game.dll+D06A38: F3 0F 11 44 24 24           - movss [rsp+24],xmm0
game.dll+D06A3E: 85 D2                       - test edx,edx
}
aobDamageSpecial:
  db F3 44 0F 10 B5 F8 01 00 00 4D 8B C6 66 0F 6E 40 04

unregistersymbol(aobDamageSpecial)
dealloc(newmem9)

{
// ORIGINAL CODE - INJECTION POINT: game.dll+D04F27

game.dll+D04EFD: 8B 85 F0 00 00 00           - mov eax,[rbp+000000F0]
game.dll+D04F03: 85 C0                       - test eax,eax
game.dll+D04F05: 74 08                       - je game.dll+D04F0F
game.dll+D04F07: 49 8B BC C1 80 7D CA 01     - mov rdi,[r9+rax*8+01CA7D80]
game.dll+D04F0F: 41 8B 4D 3C                 - mov ecx,[r13+3C]
game.dll+D04F13: 49 8B C6                    - mov rax,r14
game.dll+D04F16: 44 89 64 24 20              - mov [rsp+20],r12d
game.dll+D04F1B: 85 C9                       - test ecx,ecx
game.dll+D04F1D: 74 08                       - je game.dll+D04F27
game.dll+D04F1F: 49 8B 84 C9 90 70 CA 01     - mov rax,[r9+rcx*8+01CA7090]
// ---------- INJECTING HERE ----------
game.dll+D04F27: F3 44 0F 10 B5 F8 01 00 00  - movss xmm14,[rbp+000001F8]
// ---------- DONE INJECTING  ----------
game.dll+D04F30: 4D 8B C6                    - mov r8,r14
game.dll+D04F33: 66 0F 6E 40 04              - movd xmm0,[rax+04]
game.dll+D04F38: 41 0F 28 CE                 - movaps xmm1,xmm14
game.dll+D04F3C: 8B 57 3C                    - mov edx,[rdi+3C]
game.dll+D04F3F: F3 44 0F 11 74 24 4C        - movss [rsp+4C],xmm14
game.dll+D04F46: F3 41 0F 5E CA              - divss xmm1,xmm10
game.dll+D04F4B: 0F 5B C0                    - cvtdq2ps xmm0,xmm0
game.dll+D04F4E: F3 0F 59 C1                 - mulss xmm0,xmm1
game.dll+D04F52: F3 0F 11 44 24 24           - movss [rsp+24],xmm0
game.dll+D04F58: 85 D2                       - test edx,edx
}
aobReadSpecialDamage:
  db 45 8B C4 0F 28 C7 66 0F 6E 70 04 0F 5B F6

unregistersymbol(aobReadSpecialDamage)
dealloc(newmem10)

{
// ORIGINAL CODE - INJECTION POINT: game.dll+E1E082

game.dll+E1E051: E8 9A C0 FF FF           - call game.dll+E1A0F0
game.dll+E1E056: 83 FF 2E                 - cmp edi,2E
game.dll+E1E059: 0F 83 F1 2A 00 00        - jae game.dll+E20B50
game.dll+E1E05F: 8B 4D 38                 - mov ecx,[rbp+38]
game.dll+E1E062: E8 C9 B0 E0 FF           - call game.dll+C29130
game.dll+E1E067: 8B 8D 78 01 00 00        - mov ecx,[rbp+00000178]
game.dll+E1E06D: 66 0F 6E 78 04           - movd xmm7,[rax+04]
game.dll+E1E072: 0F 5B FF                 - cvtdq2ps xmm7,xmm7
game.dll+E1E075: F3 0F 59 3D CF 90 38 00  - mulss xmm7,[game.dll+11A714C]
game.dll+E1E07D: E8 AE B0 E0 FF           - call game.dll+C29130
// ---------- INJECTING HERE ----------
game.dll+E1E082: 45 8B C4                 - mov r8d,r12d
// ---------- DONE INJECTING  ----------
game.dll+E1E085: 0F 28 C7                 - movaps xmm0,xmm7
game.dll+E1E088: 66 0F 6E 70 04           - movd xmm6,[rax+04]
game.dll+E1E08D: 0F 5B F6                 - cvtdq2ps xmm6,xmm6
game.dll+E1E090: F3 0F 59 35 B4 90 38 00  - mulss xmm6,[game.dll+11A714C]
game.dll+E1E098: 0F 28 CE                 - movaps xmm1,xmm6
game.dll+E1E09B: E8 90 85 FC FF           - call game.dll+DE6630
game.dll+E1E0A0: 45 33 DB                 - xor r11d,r11d
game.dll+E1E0A3: 8B CF                    - mov ecx,edi
game.dll+E1E0A5: 48 6B D1 1C              - imul rdx,rcx,1C
game.dll+E1E0A9: FF C7                    - inc edi
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>139</ID>
          <Description>"Firerate:"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Float</VariableType>
          <Address>pFirerate</Address>
          <Offsets>
            <Offset>8</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>140</ID>
          <Description>"Damage:"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>pWeapon</Address>
          <Offsets>
            <Offset>4</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>141</ID>
          <Description>"Structure Penetration"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>pWeapon</Address>
          <Offsets>
            <Offset>8</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>142</ID>
          <Description>"Penetration (No Angle)"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>pWeapon</Address>
          <Offsets>
            <Offset>C</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>143</ID>
          <Description>"Penetration (Angle)"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>pWeapon</Address>
          <Offsets>
            <Offset>10</Offset>
          </Offsets>
        </CheatEntry>
        <CheatEntry>
          <ID>144</ID>
          <Description>"Demolition"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>4 Bytes</VariableType>
          <Address>pWeapon</Address>
          <Offsets>
            <Offset>1C</Offset>
          </Offsets>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>117490</ID>
      <Description>"------------------------ЗДОРОВЬЕ И СКОРОСТЬ-------------------------------"</Description>
      <Color>808080</Color>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>32</ID>
      <Description>"Бесконечное Здоровье"</Description>
      <Color>80FF80</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript Async="1">[ENABLE]

aobscanmodule(aobReadLocalPlayerHealth,game.dll,41 8B 47 18 4C 8B 7C 24 20 4C 8B 74 24 28) // should be unique
alloc(newmem,$1000)

label(code)
label(return)
label(pHealth)
registersymbol(pHealth)
newmem:

code:
  lea rax,[rax+rcx*8]
  mov [pHealth],rax
  mov [rax],#9999
  mov eax,[r15+18]
  mov r15,[rsp+20]
  mov r14,[rsp+28]
  jmp return
pHealth:
dq 0

aobReadLocalPlayerHealth:
  jmp far newmem
return:
registersymbol(aobReadLocalPlayerHealth)



aobscanmodule(aobWriteHealth,game.dll,41 89 2C 00 48 8B 46 38 4C 03 46 50 4A 8B 0C C8) // should be unique
alloc(newmem2,$1000)

label(code2)
label(return2)

newmem2:

code2:
  push rbx
  push rcx
  mov rbx,pHealth
  mov rbx,[rbx]
  lea rcx,[r8+rax]
  cmp rbx,rcx
  jne short @f
   mov ebp,#9999
  @@:
  pop rcx
  pop rbx
  mov [r8+rax],ebp
  mov rax,[rsi+38]
  add r8,[rsi+50]
  mov rcx,[rax+r9*8]
  jmp return2

aobWriteHealth:
  jmp far newmem2
  nop 2
return2:
registersymbol(aobWriteHealth)

[DISABLE]

aobReadLocalPlayerHealth:
  db 41 8B 47 18 4C 8B 7C 24 20 4C 8B 74 24 28

unregistersymbol(aobReadLocalPlayerHealth)
dealloc(newmem)

aobWriteHealth:
  db 41 89 2C 00 48 8B 46 38 4C 03 46 50 4A 8B 0C C8

unregistersymbol(aobWriteHealth)
dealloc(newmem2)

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>2</ID>
      <Description>"Бесконечные Шприцы"</Description>
      <Color>80FF80</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript Async="1">// Game Executable   : helldivers2.exe
// Author            : gir489
// Executable Version: 1.8.22927.0
// MD5 Signature     : 34B03C63A9B3946A71A77D7719475948
// EXE Compile Date  : September 19, 2024 11:09 AM
// Script Date       : September 24, 2024 06:58 PM
[ENABLE]
aobscanmodule(aob_Syringes,game.dll, 48 8D 04 52 48 03 C0 45 8B 74 C7)
registersymbol(aob_Syringes)
alloc(newmem_Syringes,1024)
label(return_Syringes)

newmem_Syringes:
  lea rax,[rdx+rdx*2]
  add rax,rax
  mov r14d,[r15+rax*8+18]
  cmp r14d, #1
  je short @f
    dec r14d
  @@:
  jmp return_Syringes

aob_Syringes:
  jmp far newmem_Syringes
  nop
return_Syringes:

[DISABLE]
aob_Syringes:
  db 48 8D 04 52 48 03 C0 45 8B 74 C7 18 41 FF CE

unregistersymbol(aob_Syringes)
dealloc(newmem_Syringes)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>14</ID>
      <Description>"Бесконечная Выносливость"</Description>
      <Color>80FF80</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript Async="1">// Game Executable   : helldivers2.exe
// Author            : gir489
// Executable Version: 1.8.16570.0
// MD5 Signature     : 4BBCD22B016AF1F87FE9F374EDBA78CF
// EXE Compile Date  : February 16, 2024 11:03 AM
// Script Date       : March 02, 2024 11:35 PM
[ENABLE]
aobscanmodule(aob_Stamina,game.dll,F3 41 0F 11 08 8B 48 10 E8 ?? ?? ?? ?? 41 8B 47 48)
registersymbol(aob_Stamina)

aob_Stamina:
movss [r8],xmm6

[DISABLE]
aob_Stamina:
  db F3 41 0F 11 08

unregistersymbol(aob_Stamina)

{
// ORIGINAL CODE - INJECTION POINT: game.dll+5C7ED2

game.dll+5C7E70: 48 8B 08                       - mov rcx,[rax]
game.dll+5C7E73: 83 79 24 01                    - cmp dword ptr [rcx+24],01
game.dll+5C7E77: 75 05                          - jne game.dll+5C7E7E
game.dll+5C7E79: F3 0F 59 71 2C                 - mulss xmm6,[rcx+2C]
game.dll+5C7E7E: 48 83 C0 08                    - add rax,08
game.dll+5C7E82: 48 83 EA 01                    - sub rdx,01
game.dll+5C7E86: 75 E8                          - jne game.dll+5C7E70
game.dll+5C7E88: F3 41 0F 10 84 2E 08 7C 44 00  - movss xmm0,[r14+rbp+00447C08]
game.dll+5C7E92: BA 31 BB 70 78                 - mov edx,7870BB31
game.dll+5C7E97: F3 41 0F 5E 47 34              - divss xmm0,[r15+34]
game.dll+5C7E9D: 48 8B 05 5C FE 0A 01           - mov rax,[game.dll+1677D00]
game.dll+5C7EA4: 4C 8D 80 70 E2 44 00           - lea r8,[rax+0044E270]
game.dll+5C7EAB: 48 8B 84 F8 08 01 00 00        - mov rax,[rax+rdi*8+00000108]
game.dll+5C7EB3: 4C 03 C6                       - add r8,rsi
game.dll+5C7EB6: F3 0F 10 8C 2E 70 E2 44 00     - movss xmm1,[rsi+rbp+0044E270]
game.dll+5C7EBF: F3 0F 59 C7                    - mulss xmm0,xmm7
game.dll+5C7EC3: F3 0F 5E C6                    - divss xmm0,xmm6
game.dll+5C7EC7: F3 0F 5C C8                    - subss xmm1,xmm0
game.dll+5C7ECB: 0F 57 C0                       - xorps xmm0,xmm0
game.dll+5C7ECE: F3 0F 5F C8                    - maxss xmm1,xmm0
// ---------- INJECTING HERE ----------
game.dll+5C7ED2: F3 41 0F 11 08                 - movss [r8],xmm1
// ---------- DONE INJECTING  ----------
game.dll+5C7ED7: 8B 48 10                       - mov ecx,[rax+10]
game.dll+5C7EDA: E8 F1 FB 38 00                 - call game.dll+957AD0
game.dll+5C7EDF: 41 8B 47 48                    - mov eax,[r15+48]
game.dll+5C7EE3: 0F 28 B4 24 50 08 00 00        - movaps xmm6,[rsp+00000850]
game.dll+5C7EEB: 4C 8B BC 24 60 08 00 00        - mov r15,[rsp+00000860]
game.dll+5C7EF3: 41 89 84 2E 04 7C 44 00        - mov [r14+rbp+00447C04],eax
game.dll+5C7EFB: 4C 8B B4 24 68 08 00 00        - mov r14,[rsp+00000868]
game.dll+5C7F03: 48 8B B4 24 88 08 00 00        - mov rsi,[rsp+00000888]
game.dll+5C7F0B: 48 8B 9C 24 80 08 00 00        - mov rbx,[rsp+00000880]
game.dll+5C7F13: 48 8B BC 24 90 08 00 00        - mov rdi,[rsp+00000890]
game.dll+5C7F1B: 48 8B 8C 24 30 08 00 00        - mov rcx,[rsp+00000830]
game.dll+5C7F23: 48 33 CC                       - xor rcx,rsp
game.dll+5C7F26: E8 F5 C7 AD FF                 - call game.dll+A4720
game.dll+5C7F2B: 0F 28 BC 24 40 08 00 00        - movaps xmm7,[rsp+00000840]
game.dll+5C7F33: 48 81 C4 70 08 00 00           - add rsp,00000870
game.dll+5C7F3A: 5D                             - pop rbp
game.dll+5C7F3B: C3                             - ret
game.dll+5C7F3C: CC                             - int 3
game.dll+5C7F3D: CC                             - int 3
game.dll+5C7F3E: CC                             - int 3
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>113868</ID>
      <Description>"Менее палевная вер. (Шприцы)"</Description>
      <Color>80FF80</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>// Game Executable   : helldivers2.exe
// Author            : gir489
// Executable Version: 1.8.22927.0
// MD5 Signature     : 34B03C63A9B3946A71A77D7719475948
// EXE Compile Date  : September 19, 2024 11:09 AM
// Script Date       : September 24, 2024 06:58 PM
[ENABLE]
aobscanmodule(syringe,game.dll,48 8D 14 49 8B CF 48 03 D2 8B 74 D0 18) // should be unique
alloc(newmem,$1000,syringe)
label(code)
label(return)

newmem:
  lea rdx,[rcx+rcx2]
  mov ecx,edi
  add rdx,rdx
  cmp [rax+rdx8+18],#1
  jae code
  mov [rax+rdx8+18],#1

code:
  mov esi,[rax+rdx8+18]
  jmp return

syringe:
  jmp newmem
  nop 8
return:
registersymbol(syringe)

[DISABLE]
syringe:
  db 48 8D 14 49 8B CF 48 03 D2 8B 74 D0 18
unregistersymbol(syringe)
dealloc(newmem)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>66</ID>
      <Description>"Быстрый бег X1.25"</Description>
      <Color>80FF80</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript Async="1">[ENABLE]
aobscanmodule(aob_RunSpeed,game.dll,F3 41 0F 59 56 0C F3)
registersymbol(aob_RunSpeed)
alloc(newmem_RunSpeed,1024)
label(return_RunSpeed)

newmem_RunSpeed:
  push rbx
  mov rbx,F2F926ABF2F926AB
  cmp [rax],rbx
  jne short @f
   mov [r14+0C],(float)1.25
  @@:
  pop rbx
  mulss xmm2,[r14+0C]
  mulss xmm2,[r14+10]
  movaps xmm4,xmm2
  jmp return_RunSpeed

aob_RunSpeed:
  jmp far newmem_RunSpeed
  nop
return_RunSpeed:

[DISABLE]
aob_RunSpeed:
  db F3 41 0F 59 56 0C F3 41 0F 59 56 10 0F 28 E2

unregistersymbol(aob_RunSpeed)
dealloc(newmem_RunSpeed)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>113807</ID>
      <Description>"Быстрый бег X3"</Description>
      <Color>80FF80</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript Async="1">[ENABLE]
aobscanmodule(aob_RunSpeed,game.dll,F3 41 0F 59 56 0C F3)
registersymbol(aob_RunSpeed)
alloc(newmem_RunSpeed,1024)
label(return_RunSpeed)

newmem_RunSpeed:
  push rbx
  mov rbx,F2F926ABF2F926AB
  cmp [rax],rbx
  jne short @f
   mov [r14+0C],(float)3
  @@:
  pop rbx
  mulss xmm2,[r14+0C]
  mulss xmm2,[r14+10]
  movaps xmm4,xmm2
  jmp return_RunSpeed

aob_RunSpeed:
  jmp far newmem_RunSpeed
  nop
return_RunSpeed:

[DISABLE]
aob_RunSpeed:
  db F3 41 0F 59 56 0C F3 41 0F 59 56 10 0F 28 E2

unregistersymbol(aob_RunSpeed)
dealloc(newmem_RunSpeed)
</AssemblerScript>
      <Hotkeys>
        <Hotkey Active="0">
          <Action>Activate</Action>
          <Keys>
            <Key>49</Key>
          </Keys>
          <ID>0</ID>
          <ActivateSound>Activate</ActivateSound>
        </Hotkey>
      </Hotkeys>
    </CheatEntry>
    <CheatEntry>
      <ID>52</ID>
      <Description>"Редактор скорости передвижения"</Description>
      <Options moHideChildren="1"/>
      <Color>FF8000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript Async="1">// Game Executable   : helldivers2.exe
// Author            : gir489
// Executable Version: 1.8.17123.0
// MD5 Signature     : 319505530078A72820710D8A1FC6C069
// EXE Compile Date  : March 06, 2024 01:32 PM
// Script Date       : March 08, 2024 02:07 PM
[ENABLE]
aobscanmodule(aob_RunSpeed,game.dll,F3 41 0F 59 56 0C F3)
registersymbol(aob_RunSpeed)
registersymbol(runspeed_mult)
alloc(newmem_RunSpeed,1024)
alloc(runspeed_mult,4)
label(return_RunSpeed)

newmem_RunSpeed:
  push rbx
  mov rbx,F2F926ABF2F926AB
  cmp [rax],rbx
  jne short @f
   mov ebx, [runspeed_mult]
   mov [r14+0C], ebx
@@:
  pop rbx
  mulss xmm2,[r14+0C]
  mulss xmm2,[r14+10]
  movaps xmm4,xmm2
  jmp return_RunSpeed

aob_RunSpeed:
  jmp far newmem_RunSpeed
  nop
return_RunSpeed:

runspeed_mult:
dd (float)1.25

[DISABLE]
aob_RunSpeed:
  db F3 41 0F 59 56 0C F3 41 0F 59 56 10 0F 28 E2

unregistersymbol(aob_RunSpeed)
dealloc(newmem_RunSpeed)
dealloc(RunSpeedMult)

{
// ORIGINAL CODE - INJECTION POINT: game.dll+54902E

game.dll+548FCA: EB 08                       - jmp game.dll+548FD4
game.dll+548FCC: 41 0F 28 CC                 - movaps xmm1,xmm12
game.dll+548FD0: F3 0F 5D CA                 - minss xmm1,xmm2
game.dll+548FD4: 48 8B 44 24 68              - mov rax,[rsp+68]
game.dll+548FD9: F3 44 0F 10 1D 7A BB A9 00  - movss xmm11,[game.dll+FE4B5C]
game.dll+548FE2: 41 0F 28 C4                 - movaps xmm0,xmm12
game.dll+548FE6: 4C 8B 6C 24 50              - mov r13,[rsp+50]
game.dll+548FEB: F3 0F 5C C1                 - subss xmm0,xmm1
game.dll+548FEF: 4C 8B 7C 24 40              - mov r15,[rsp+40]
game.dll+548FF4: 4C 8B 65 88                 - mov r12,[rbp-78]
game.dll+548FF8: 44 0F 2F D8                 - comiss xmm11,xmm0
game.dll+548FFC: 77 09                       - ja game.dll+549007
game.dll+548FFE: 45 0F 28 DC                 - movaps xmm11,xmm12
game.dll+549002: F3 44 0F 5D D8              - minss xmm11,xmm0
game.dll+549007: F3 41 0F 10 56 04           - movss xmm2,[r14+04]
game.dll+54900D: F3 41 0F 59 16              - mulss xmm2,[r14]
game.dll+549012: F3 41 0F 10 6E 14           - movss xmm5,[r14+14]
game.dll+549018: F2 0F 10 05 90 BA A9 00     - movsd xmm0,[game.dll+FE4AB0]
game.dll+549020: F3 41 0F 59 56 08           - mulss xmm2,[r14+08]
game.dll+549026: F3 0F 10 98 B8 0C 00 00     - movss xmm3,[rax+00000CB8]
// ---------- INJECTING HERE ----------
game.dll+54902E: F3 41 0F 59 56 0C           - mulss xmm2,[r14+0C]
// ---------- DONE INJECTING  ----------
game.dll+549034: F3 41 0F 59 56 10           - mulss xmm2,[r14+10]
game.dll+54903A: 0F 28 E2                    - movaps xmm4,xmm2
game.dll+54903D: F3 0F 5C E5                 - subss xmm4,xmm5
game.dll+549041: 0F 5A CC                    - cvtps2pd xmm1,xmm4
game.dll+549044: 0F 54 0D D5 EF A9 00        - andps xmm1,[game.dll+FE8020]
game.dll+54904B: 66 0F 2F C1                 - comisd xmm0,xmm1
game.dll+54904F: 77 21                       - ja game.dll+549072
game.dll+549051: F3 41 0F 59 DD              - mulss xmm3,xmm13
game.dll+549056: 44 0F 2F C3                 - comiss xmm8,xmm3
game.dll+54905A: 76 06                       - jna game.dll+549062
game.dll+54905C: 41 0F 28 D0                 - movaps xmm2,xmm8
game.dll+549060: EB 08                       - jmp game.dll+54906A
game.dll+549062: 41 0F 28 D4                 - movaps xmm2,xmm12
game.dll+549066: F3 0F 5D D3                 - minss xmm2,xmm3
game.dll+54906A: F3 0F 59 D4                 - mulss xmm2,xmm4
game.dll+54906E: F3 0F 58 D5                 - addss xmm2,xmm5
game.dll+549072: F3 41 0F 11 56 14           - movss [r14+14],xmm2
game.dll+549078: 43 80 BC 3C AD 58 00 00 00  - cmp byte ptr [r12+r15+000058AD],00
game.dll+549081: F3 44 0F 59 DA              - mulss xmm11,xmm2
game.dll+549086: 75 04                       - jne game.dll+54908C
}
</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>65</ID>
          <Description>"Run Speed"</Description>
          <ShowAsSigned>0</ShowAsSigned>
          <VariableType>Float</VariableType>
          <Address>runspeed_mult</Address>
          <Hotkeys>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>16</Key>
                <Key>40</Key>
              </Keys>
              <Value>1.25</Value>
              <ID>0</ID>
            </Hotkey>
            <Hotkey>
              <Action>Set Value</Action>
              <Keys>
                <Key>16</Key>
                <Key>38</Key>
              </Keys>
              <Value>3</Value>
              <ID>1</ID>
            </Hotkey>
          </Hotkeys>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>117491</ID>
      <Description>"------------------------РАЗНОЕ-------------------------------"</Description>
      <Color>808080</Color>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>28</ID>
      <Description>"Бесконечные Стратогемы"</Description>
      <Color>83C2FC</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript Async="1">// Game Executable   : helldivers2.exe
// Author            : gir489
// Executable Version: 1.8.19279.0
// MD5 Signature     : 94CE72E11EB1E8E8CA9D1201B779444F
// EXE Compile Date  : May 08, 2024 11:48 AM
// Script Date       : May 15, 2024 09:25 PM
[ENABLE]
aobscanmodule(aob_Stragemens,game.dll, 0F 84 ? ? ? ? 48 8B 05 ? ? ? ? 4C 8D 4C 24 ? 44 8B 84 37)
registersymbol(aob_Stragemens)

aob_Stragemens:
  db 90 E9

[DISABLE]
aob_Stragemens:
  db 0F 84

unregistersymbol(aob_Stragemens)

{
// ORIGINAL CODE - INJECTION POINT: game.dll+925828

game.dll+9257D4: F2 41 0F 10 45 00        - movsd xmm0,[r13+00]
game.dll+9257DA: 45 8B 45 08              - mov r8d,[r13+08]
game.dll+9257DE: F2 0F 11 44 24 30        - movsd [rsp+30],xmm0
game.dll+9257E4: 44 89 44 24 38           - mov [rsp+38],r8d
game.dll+9257E9: 41 8B 96 00 59 0A 00     - mov edx,[r14+000A5900]
game.dll+9257F0: 85 D2                    - test edx,edx
game.dll+9257F2: 0F 84 16 01 00 00        - je game.dll+92590E
game.dll+9257F8: 49 8B CE                 - mov rcx,r14
game.dll+9257FB: 0F 1F 44 00 00           - nop dword ptr [rax+rax+00]
game.dll+925800: 48 39 19                 - cmp [rcx],rbx
game.dll+925803: 74 12                    - je game.dll+925817
game.dll+925805: FF C0                    - inc eax
game.dll+925807: 48 81 C1 C8 52 00 00     - add rcx,000052C8
game.dll+92580E: 3B C2                    - cmp eax,edx
game.dll+925810: 72 EE                    - jb game.dll+925800
game.dll+925812: E9 F7 00 00 00           - jmp game.dll+92590E
game.dll+925817: 48 69 F0 C8 52 00 00     - imul rsi,rax,000052C8
game.dll+92581E: 49 6B FC 78              - imul rdi,r12,78
game.dll+925822: 49 03 F6                 - add rsi,r14
game.dll+925825: 45 84 C9                 - test r9b,r9b
// ---------- INJECTING HERE ----------
game.dll+925828: 0F 84 B8 00 00 00        - je game.dll+9258E6
// ---------- DONE INJECTING  ----------
game.dll+92582E: 48 8B 05 EB 60 F8 00     - mov rax,[game.dll+18AB920]
game.dll+925835: 4C 8D 4C 24 30           - lea r9,[rsp+30]
game.dll+92583A: 44 8B 84 37 D0 01 00 00  - mov r8d,[rdi+rsi+000001D0]
game.dll+925842: 48 8B D3                 - mov rdx,rbx
game.dll+925845: C6 44 24 20 00           - mov byte ptr [rsp+20],00
game.dll+92584A: 48 8B 48 18              - mov rcx,[rax+18]
game.dll+92584E: 48 89 8C 37 30 02 00 00  - mov [rdi+rsi+00000230],rcx
game.dll+925856: F2 0F 10 44 24 30        - movsd xmm0,[rsp+30]
game.dll+92585C: 8B 44 24 38              - mov eax,[rsp+38]
game.dll+925860: 48 8B 0D 91 67 F8 00     - mov rcx,[game.dll+18ABFF8]
game.dll+925867: F2 0F 11 44 24 40        - movsd [rsp+40],xmm0
game.dll+92586D: 89 44 24 48              - mov [rsp+48],eax
game.dll+925871: E8 9A 26 DD FF           - call game.dll+6F7F10
game.dll+925876: 8B 94 37 D0 01 00 00     - mov edx,[rdi+rsi+000001D0]
game.dll+92587D: 4C 8D 44 24 40           - lea r8,[rsp+40]
game.dll+925882: 0F 28 F0                 - movaps xmm6,xmm0
game.dll+925885: E8 E6 25 B4 FF           - call game.dll+467E70
game.dll+92588A: 48 8B 05 8F 60 F8 00     - mov rax,[game.dll+18AB920]
game.dll+925891: F3 0F 58 C6              - addss xmm0,xmm6
game.dll+925895: F3 41 0F 59 C0           - mulss xmm0,xmm8
}
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>44</ID>
      <Description>"Показать все значки на карте"</Description>
      <Color>83C2FC</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript Async="1">// Game Executable   : helldivers2.exe
// Author            : gir489
// Executable Version: 1.8.21849.0
// MD5 Signature     : 781649FF615C49952775A0ED06AD982F
// EXE Compile Date  : August 02, 2024 11:21 AM
// Script Date       : August 06, 2024 10:04 AM
[ENABLE]
aobscanmodule(aob_CheckIsBlipSeen,game.dll,0F B6 40 33)
aobscanmodule(aob_CheckIfAlienHivesAreObstructed,game.dll,41 80 BF ? ? ? ? ? 0F 85 ? ? ? ? 41 80 BD)
aobscanmodule(aob_CheckIfMinorInterestBlipIsDiscovered,game.dll, 0F 85 ? ? ? ? 48 8B 44 24 ? 80 78)
aobscanmodule(aob_GetMinorInterestBlipIcon,game.dll, 0F 84 ? ? ? ? 48 8B 54 24 ? F3 42 0F 10 4C E3)
aobscanmodule(aob_CheckMissionBlip,game.dll,0F 85 ? ? ? ? 49 8D B8)
registersymbol(aob_CheckIsBlipSeen)
registersymbol(aob_CheckIfMinorInterestBlipIsDiscovered)
registersymbol(aob_GetMinorInterestBlipIcon)
registersymbol(aob_CheckIfAlienHivesAreObstructed)
registersymbol(aob_CheckMissionBlip)

aob_CheckIsBlipSeen:
  xor eax, eax
  mov al, #1

aob_CheckIfAlienHivesAreObstructed:
  clc
  nop 7

aob_CheckIfMinorInterestBlipIsDiscovered:
  db 90 E9

aob_GetMinorInterestBlipIcon:
  db 0F 84

aob_CheckMissionBlip:
  db 90 E9

[DISABLE]
aob_CheckIsBlipSeen:
  db 0F B6 40 33

aob_CheckIfAlienHivesAreObstructed:
  db 41 80 BF AC CA 05 00 00

aob_CheckIfMinorInterestBlipIsDiscovered:
  db 0F 85

aob_GetMinorInterestBlipIcon:
  db 0F 84

aob_CheckMissionBlip:
  db 0F 85

unregistersymbol(aob_CheckIsBlipSeen)
unregistersymbol(aob_CheckIfAlienHivesAreObstructed)
unregistersymbol(aob_CheckIfMinorInterestBlipIsDiscovered)
unregistersymbol(aob_GetMinorInterestBlipIcon)
unregistersymbol(aob_CheckMissionBlip)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>117487</ID>
      <Description>"Запрыгнуть на любую высоту"</Description>
      <Color>83C2FC</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.xxx
  Date   : 2024-08-25
  Author : (Discord)Sakuno

  This little script allow you to climb up anything can climb.
}
{$lua}
AvatarDataReplacer=decodeFunction('c-n1^!AiqG5QhJ4m$,8MLPb!a=4guigvffyZ8sZw5/CR#QBo61p;1HBs:ciU=F0Bic^DdkMFodp[-6i{Wp:LbH%W{k()qFThce38,arEr@ePEj4vy:#ec[5HC6oo.OJHCvVSx1??dSl[,3:B6.J]:UX,v0erE,QuJE!esNCwi9,Gj(JM((tiZ]1Bfy)C3qB3D$J8p[l_7)XYg@GTq15b$xp#h43GWhg3c:C{3S[Ydh/M[g-ur?4rJ?n4Vc*Ar2-*YJK9RrJW:,w^z2v-!HnOuSuA@9AiTTj_AoIjz;{eIJOjG,P%Y-xB.6U,twn=f')
AvatarDataReplacer()
{$asm}
// X
AvatarClimbAddr:
  dd (float)50.0 // Default 1.95

// Y
AvatarClimbAddr+4:
  dd (float)50.0 // Default 1.40

[DISABLE]
// X
AvatarClimbAddr:
  dd (float)1.95

// Y
AvatarClimbAddr+4:
  dd (float)1.40

unregistersymbol(AvatarClimbAddr)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>113970</ID>
      <Description>"Бесконечный Джетпак"</Description>
      <Color>83C2FC</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript Async="1">[ENABLE]
aobscanmodule(aob_ToTheSky,game.dll,89 04 B9 83 FD 01)
registersymbol(aob_ToTheSky)

aob_ToTheSky:
  nop 3

[DISABLE]
aob_ToTheSky:
  db 89 04 B9
unregistersymbol(aob_ToTheSky)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>113933</ID>
      <Description>"Бесконечный Щит (Быстрая перезарядка)"</Description>
      <Color>83C2FC</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>// Game Executable   : helldivers2.exe
// Author            : gir489
// Executable Version: 1.8.20424.0
// MD5 Signature     : 714FB37A355B892081B500B0148D8A2B
// EXE Compile Date  : June 05, 2024 09:54 AM
// Script Date       : June 14, 2024 09:00 PM
[ENABLE]
aobscanmodule(aob_ShielDeezNutts,game.dll,F3 41 0F 5C CE F3 43 0F 11 4C 3E)
registersymbol(aob_ShielDeezNutts)
alloc(ShieldDeezNutts,1024,game.dll)
label(ShieldDeezNutts_return)

ShieldDeezNutts:
  test rsi,rsi
  je short @f
  push rax
  mov rax,12C8D71AC3897A5C
  cmp [rsi],rax
  jne short @f
  comiss xmm1, dword ptr [compare_shield]
  jbe short @f
    movss xmm1, dword ptr [compare_shield]
@@:
  pop rax
  subss xmm1,xmm14
  movss [r14+r15+8],xmm1
  movaps xmm2, xmm1
  jmp ShieldDeezNutts_return
compare_shield:
dd (float)1.0  // maximum shield cooldown duration in seconds

aob_ShielDeezNutts:
  jmp far ShieldDeezNutts
  nop
ShieldDeezNutts_return:

[DISABLE]
dealloc(ShieldDeezNutts)
unregistersymbol(aob_ShielDeezNutts)

aob_ShielDeezNutts:
  db F3 41 0F 5C CE F3 43 0F 11 4C 3E 08 0F 28 D1
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>117483</ID>
      <Description>"100% Democracy (armor passive)                                       "</Description>
      <Color>83C2FC</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript Async="1">[ENABLE]
{$lua}
registerSymbol("DemocrayProtect_Chance", '[[[[[game.dll + 01B51540] + 900] + 30] + F60] + A8] + 3CC')

{$asm}
DemocrayProtect_Chance:
  dd (float)2.0

[DISABLE]
{$asm}
DemocrayProtect_Chance:
  dd (float)1.5

{$lua}
local timer = createTimer(nil, false)
timer.Interval = 100
timer.OnTimer = function()
  unregisterSymbol("DemocrayProtect_Chance")
  timer.destroy()
end
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>117492</ID>
      <Description>"------------------------ФАРМ-------------------------------"</Description>
      <Color>808080</Color>
      <GroupHeader>1</GroupHeader>
    </CheatEntry>
    <CheatEntry>
      <ID>64</ID>
      <Description>"Только Хост"</Description>
      <Color>FAFFD2</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>113932</ID>
          <Description>"Открыть бункер соло (сначала лево потом право)"</Description>
          <Color>D2FFFF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript Async="1">// Game Executable   : helldivers2.exe
// Author            : gir489
// Executable Version: 1.8.19279.0
// MD5 Signature     : 94CE72E11EB1E8E8CA9D1201B779444F
// EXE Compile Date  : May 08, 2024 11:48 AM
// Script Date       : May 28, 2024 02:48 PM
[ENABLE]
aobscanmodule(aob_OpenSaysMe,game.dll,83 88 ? ? ? ? ? 48 8B 01 8B 48 ? E8 ? ? ? ? BA 3A AB 19 9F)
registersymbol(aob_OpenSaysMe)

aob_OpenSaysMe+6:
  db 03

[DISABLE]
aob_OpenSaysMe+6:
  db 01

unregistersymbol(aob_OpenSaysMe)

{
// ORIGINAL CODE - INJECTION POINT: game.dll+2CC7A9

game.dll+2CC75D: CC                    - int 3
game.dll+2CC75E: CC                    - int 3
game.dll+2CC75F: CC                    - int 3
game.dll+2CC760: 48 89 5C 24 08        - mov [rsp+08],rbx
game.dll+2CC765: 57                    - push rdi
game.dll+2CC766: 48 83 EC 20           - sub rsp,20
game.dll+2CC76A: 48 8B F9              - mov rdi,rcx
game.dll+2CC76D: 81 FA 19 7D 49 8E     - cmp edx,8E497D19
game.dll+2CC773: 0F 87 EF 00 00 00     - ja game.dll+2CC868
game.dll+2CC779: 0F 84 BD 00 00 00     - je game.dll+2CC83C
game.dll+2CC77F: 81 FA E0 B8 96 68     - cmp edx,6896B8E0
game.dll+2CC785: 74 6C                 - je game.dll+2CC7F3
game.dll+2CC787: 81 FA DC 37 64 6C     - cmp edx,6C6437DC
game.dll+2CC78D: 74 44                 - je game.dll+2CC7D3
game.dll+2CC78F: 81 FA 03 4E 19 7A     - cmp edx,7A194E03
game.dll+2CC795: 0F 85 D5 01 00 00     - jne game.dll+2CC970
game.dll+2CC79B: 48 8B 41 08           - mov rax,[rcx+08]
game.dll+2CC79F: 33 DB                 - xor ebx,ebx
game.dll+2CC7A1: 44 8B C3              - mov r8d,ebx
game.dll+2CC7A4: BA 4F 64 B3 0F        - mov edx,0FB3644F
// ---------- INJECTING HERE ----------
game.dll+2CC7A9: 83 88 50 01 00 00 01  - or dword ptr [rax+00000150],01
// ---------- DONE INJECTING  ----------
game.dll+2CC7B0: 48 8B 01              - mov rax,[rcx]
game.dll+2CC7B3: 8B 48 0C              - mov ecx,[rax+0C]
game.dll+2CC7B6: E8 F5 57 AE 00        - call game.dll+DB1FB0
game.dll+2CC7BB: BA 3A AB 19 9F        - mov edx,9F19AB3A
game.dll+2CC7C0: 48 8B CF              - mov rcx,rdi
game.dll+2CC7C3: E8 08 A9 E9 FF        - call game.dll+1670D0
game.dll+2CC7C8: 41 B8 3A AB 19 9F     - mov r8d,9F19AB3A
game.dll+2CC7CE: E9 23 01 00 00        - jmp game.dll+2CC8F6
game.dll+2CC7D3: 48 8B 41 08           - mov rax,[rcx+08]
game.dll+2CC7D7: BA 3A AB 19 9F        - mov edx,9F19AB3A
game.dll+2CC7DC: 83 A0 50 01 00 00 FE  - and dword ptr [rax+00000150],-02
game.dll+2CC7E3: E8 E8 A8 E9 FF        - call game.dll+1670D0
game.dll+2CC7E8: 41 B8 3A AB 19 9F     - mov r8d,9F19AB3A
game.dll+2CC7EE: E9 AC 00 00 00        - jmp game.dll+2CC89F
game.dll+2CC7F3: 48 8B 41 08           - mov rax,[rcx+08]
game.dll+2CC7F7: 83 78 08 03           - cmp dword ptr [rax+08],03
game.dll+2CC7FB: 0F 84 6F 01 00 00     - je game.dll+2CC970
game.dll+2CC801: C7 40 08 03 00 00 00  - mov [rax+08],00000003
game.dll+2CC808: 33 DB                 - xor ebx,ebx
game.dll+2CC80A: C7 40 04 FF FF FF FF  - mov [rax+04],FFFFFFFF
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>59</ID>
          <Description>"Быстрый шатл"</Description>
          <Color>D2FFFF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>// Game Executable   : helldivers2.exe
// Author            : cfemen + gir489
// Executable Version: 1.8.20424.0
// MD5 Signature     : 714FB37A355B892081B500B0148D8A2B
// EXE Compile Date  : June 05, 2024 09:54 AM
// Script Date       : June 14, 2024 06:58 AM
[ENABLE]
aobscanmodule(aob_ShuttleLandingTimerSet,game.dll,F3 0F 5C C3 BA 66 F7 09 61 F3 0F 11 04 01)
registersymbol(aob_ShuttleLandingTimerSet)
alloc(newmem_ShuttleLandingTimerSet,1024)
label(return_ShuttleLandingTimerSet)
alloc(compare_float_check, 4)

newmem_ShuttleLandingTimerSet:
  subss   xmm0, xmm3
  ucomiss xmm0, DWORD [compare_float_check]
  jbe short @f
    movss xmm0, DWORD [compare_float_check]
  @@:
  mov edx,6109F766
  movss [rcx+rax],xmm0
  jmp return_ShuttleLandingTimerSet

aob_ShuttleLandingTimerSet:
  jmp far newmem_ShuttleLandingTimerSet
return_ShuttleLandingTimerSet:

compare_float_check:
dd (float)1.0

[DISABLE]
aob_ShuttleLandingTimerSet:
  db F3 0F 5C C3 BA 66 F7 09 61 F3 0F 11 04 01

unregistersymbol(aob_ShuttleLandingTimerSet)
dealloc(newmem_ShuttleLandingTimerSet)
dealloc(compare_float_check)
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>50</ID>
      <Description>"Остановить время миссии"</Description>
      <Color>D2FFFF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{ Game   : helldivers2.exe
  Version:
  Date   : 2024-12-13
  Author : cfemen

  This script does blah blah blah
}

[ENABLE]


aobscanmodule(aobSubTime,game.dll,F3 0F 5C C7 F3 41 0F 5F C2 F3 43 0F 11 84 EF ?? ?? ?? ??) // should be unique

aobSubTime:
  nop 4

registersymbol(aobSubTime)

[DISABLE]

aobSubTime:
  db F3 0F 5C C7

unregistersymbol(aobSubTime)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>63</ID>
      <Description>"Разблокировать (раскрыть меню)"</Description>
      <Options moHideChildren="1" moActivateChildrenAsWell="1"/>
      <Color>D2FFFF</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>60</ID>
          <Description>"Все стратагемы"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>// Game Executable   : helldivers2.exe
// Author            : gir489
// Executable Version: 1.8.17201.0
// MD5 Signature     : 495C5D1678F8B6C0A61041D667C48362
// EXE Compile Date  : March 08, 2024 10:46 AM
// Script Date       : March 14, 2024 11:52 AM
[ENABLE]
aobscanmodule(aob_AllStrategems,game.dll,48 89 5C 24 08 85 D2 75 09)
registersymbol(aob_AllStrategems)

aob_AllStrategems:
  db B0 01 C3

[DISABLE]
aob_AllStrategems:
  db 48 89 5C

unregistersymbol(aob_AllStrategems)

{
// ORIGINAL CODE - INJECTION POINT: game.dll+B81480

game.dll+B81450: 42 8B 94 29 F8 51 00 00  - mov edx,[rcx+r13+000051F8]
game.dll+B81458: 85 D2                    - test edx,edx
game.dll+B8145A: 0F 84 39 FE FF FF        - je game.dll+B81299
game.dll+B81460: 83 FA 01                 - cmp edx,01
game.dll+B81463: 0F 85 30 FE FF FF        - jne game.dll+B81299
game.dll+B81469: 4C 8B 5C 24 70           - mov r11,[rsp+70]
game.dll+B8146E: E9 7F FE FF FF           - jmp game.dll+B812F2
game.dll+B81473: CC                       - int 3 
game.dll+B81474: CC                       - int 3 
game.dll+B81475: CC                       - int 3 
game.dll+B81476: CC                       - int 3 
game.dll+B81477: CC                       - int 3 
game.dll+B81478: CC                       - int 3 
game.dll+B81479: CC                       - int 3 
game.dll+B8147A: CC                       - int 3 
game.dll+B8147B: CC                       - int 3 
game.dll+B8147C: CC                       - int 3 
game.dll+B8147D: CC                       - int 3 
game.dll+B8147E: CC                       - int 3 
game.dll+B8147F: CC                       - int 3 
// ---------- INJECTING HERE ----------
game.dll+B81480: 48 89 5C 24 08           - mov [rsp+08],rbx
// ---------- DONE INJECTING  ----------
game.dll+B81485: 48 8B D9                 - mov rbx,rcx
game.dll+B81488: 85 D2                    - test edx,edx
game.dll+B8148A: 75 09                    - jne game.dll+B81495
game.dll+B8148C: 4C 8D 15 DD 2C FF 00     - lea r10,[game.dll+1B74170]
game.dll+B81493: EB 0D                    - jmp game.dll+B814A2
game.dll+B81495: 8B C2                    - mov eax,edx
game.dll+B81497: 4C 8D 15 12 2E FF 00     - lea r10,[game.dll+1B742B0]
game.dll+B8149E: 4D 8B 14 C2              - mov r10,[r10+rax*8]
game.dll+B814A2: 45 8B 5A 04              - mov r11d,[r10+04]
game.dll+B814A6: 45 85 DB                 - test r11d,r11d
game.dll+B814A9: 74 3B                    - je game.dll+B814E6
game.dll+B814AB: 8B 91 08 52 05 00        - mov edx,[rcx+00055208]
game.dll+B814B1: 44 8B 89 0C 52 05 00     - mov r9d,[rcx+0005520C]
game.dll+B814B8: 41 3B D1                 - cmp edx,r9d
game.dll+B814BB: 73 29                    - jae game.dll+B814E6
game.dll+B814BD: 0F 1F 00                 - nop dword ptr [rax]
game.dll+B814C0: 8B C2                    - mov eax,edx
game.dll+B814C2: 8B 8C 83 44 52 05 00     - mov ecx,[rbx+rax*4+00055244]
game.dll+B814C9: 4C 8D 81 9E 4D 00 00     - lea r8,[rcx+00004D9E]
game.dll+B814D0: 4E 8D 04 41              - lea r8,[rcx+r8*2]
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>61</ID>
          <Description>"Все снаряжение в арсенале"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>// Game Executable   : helldivers2.exe
// Author            : gir489
// Executable Version: 1.8.18735.0
// MD5 Signature     : E087C5451277E6CC21E544AB6FE4932B
// EXE Compile Date  : April 25, 2024 04:05 AM
// Script Date       : April 29, 2024 12:53 PM
[ENABLE]
aobscanmodule(aob_AllEquipment,game.dll,83 B9 ?? ?? ?? ?? 07 76 2B 85 D2 74 27 44 8B 89 ?? ?? ?? ??  45 33 C0 45 85 C9 74 18 48 8D 81 ?? ?? ?? ?? 39 50 04 74 0F 41 FF C0 48 83 C0 18 45 3B C1 72 EF 32 C0 C3 8B 00 48 69 C8 E8 00 00 00)
registersymbol(aob_AllEquipment)

aob_AllEquipment:
  db B0 01 C3

[DISABLE]
aob_AllEquipment:
  db 83 B9 1C

unregistersymbol(aob_AllEquipment)

{
// ORIGINAL CODE - INJECTION POINT: game.dll+CD8050

game.dll+CD8025: 72 F1                    - jb game.dll+CD8018
game.dll+CD8027: BD 01 00 00 00           - mov ebp,00000001
game.dll+CD802C: 41 C7 06 00 00 00 00     - mov [r14],00000000
game.dll+CD8033: 48 8B BC 24 A8 00 00 00  - mov rdi,[rsp+000000A8]
game.dll+CD803B: 8B C5                    - mov eax,ebp
game.dll+CD803D: E9 70 FE FF FF           - jmp game.dll+CD7EB2
game.dll+CD8042: CC                       - int 3
game.dll+CD8043: CC                       - int 3
game.dll+CD8044: CC                       - int 3
game.dll+CD8045: CC                       - int 3
game.dll+CD8046: CC                       - int 3
game.dll+CD8047: CC                       - int 3
game.dll+CD8048: CC                       - int 3
game.dll+CD8049: CC                       - int 3
game.dll+CD804A: CC                       - int 3
game.dll+CD804B: CC                       - int 3
game.dll+CD804C: CC                       - int 3
game.dll+CD804D: CC                       - int 3
game.dll+CD804E: CC                       - int 3
game.dll+CD804F: CC                       - int 3
// ---------- INJECTING HERE ----------
game.dll+CD8050: 83 B9 1C 96 1F 00 07     - cmp dword ptr [rcx+001F961C],07
// ---------- DONE INJECTING  ----------
game.dll+CD8057: 76 2B                    - jna game.dll+CD8084
game.dll+CD8059: 85 D2                    - test edx,edx
game.dll+CD805B: 74 27                    - je game.dll+CD8084
game.dll+CD805D: 44 8B 89 68 53 00 00     - mov r9d,[rcx+00005368]
game.dll+CD8064: 45 33 C0                 - xor r8d,r8d
game.dll+CD8067: 45 85 C9                 - test r9d,r9d
game.dll+CD806A: 74 18                    - je game.dll+CD8084
game.dll+CD806C: 48 8D 81 70 DB 04 00     - lea rax,[rcx+0004DB70]
game.dll+CD8073: 39 50 04                 - cmp [rax+04],edx
game.dll+CD8076: 74 0F                    - je game.dll+CD8087
game.dll+CD8078: 41 FF C0                 - inc r8d
game.dll+CD807B: 48 83 C0 18              - add rax,18
game.dll+CD807F: 45 3B C1                 - cmp r8d,r9d
game.dll+CD8082: 72 EF                    - jb game.dll+CD8073
game.dll+CD8084: 32 C0                    - xor al,al
game.dll+CD8086: C3                       - ret
game.dll+CD8087: 8B 00                    - mov eax,[rax]
game.dll+CD8089: 48 69 C8 E8 00 00 00     - imul rcx,rax,000000E8
game.dll+CD8090: 48 8B 05 A9 CE C6 00     - mov rax,[game.dll+1944F40]
game.dll+CD8097: 8B 8C 01 88 53 00 00     - mov ecx,[rcx+rax+00005388]
}
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>62</ID>
          <Description>"Всю броню в арсенале"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>// Game Executable   : helldivers2.exe
// Author            : gir489
// Executable Version: 1.8.17201.0
// MD5 Signature     : 495C5D1678F8B6C0A61041D667C48362
// EXE Compile Date  : March 08, 2024 10:46 AM
// Script Date       : March 14, 2024 11:55 AM
[ENABLE]
aobscanmodule(aob_AllArmor,game.dll, 48 83 EC 08 44 8B 49 04 45 33 C0 8B 01)
registersymbol(aob_AllArmor)

aob_AllArmor:
  db B0 01 C3

[DISABLE]
aob_AllArmor:
  db 48 83 EC

unregistersymbol(aob_AllArmor)

{
// ORIGINAL CODE - INJECTION POINT: game.dll+A96BF0

game.dll+A96BD9: 48 83 C4 28           - add rsp,28
game.dll+A96BDD: C3                    - ret 
game.dll+A96BDE: CC                    - int 3 
game.dll+A96BDF: CC                    - int 3 
game.dll+A96BE0: CC                    - int 3 
game.dll+A96BE1: CC                    - int 3 
game.dll+A96BE2: CC                    - int 3 
game.dll+A96BE3: CC                    - int 3 
game.dll+A96BE4: CC                    - int 3 
game.dll+A96BE5: CC                    - int 3 
game.dll+A96BE6: CC                    - int 3 
game.dll+A96BE7: CC                    - int 3 
game.dll+A96BE8: CC                    - int 3 
game.dll+A96BE9: CC                    - int 3 
game.dll+A96BEA: CC                    - int 3 
game.dll+A96BEB: CC                    - int 3 
game.dll+A96BEC: CC                    - int 3 
game.dll+A96BED: CC                    - int 3 
game.dll+A96BEE: CC                    - int 3 
game.dll+A96BEF: CC                    - int 3 
// ---------- INJECTING HERE ----------
game.dll+A96BF0: 48 83 EC 08           - sub rsp,08
// ---------- DONE INJECTING  ----------
game.dll+A96BF4: 44 8B 49 04           - mov r9d,[rcx+04]
game.dll+A96BF8: 45 33 C0              - xor r8d,r8d
game.dll+A96BFB: 8B 01                 - mov eax,[rcx]
game.dll+A96BFD: 4C 8B 15 2C A5 CD 00  - mov r10,[game.dll+1771130]
game.dll+A96C04: 45 85 C9              - test r9d,r9d
game.dll+A96C07: 74 59                 - je game.dll+A96C62
game.dll+A96C09: 69 C8 95 E9 D1 5B     - imul ecx,eax,5BD1E995
game.dll+A96C0F: 48 89 1C 24           - mov [rsp],rbx
game.dll+A96C13: 8B D1                 - mov edx,ecx
game.dll+A96C15: C1 EA 18              - shr edx,18
game.dll+A96C18: 33 D1                 - xor edx,ecx
game.dll+A96C1A: 41 69 C9 95 E9 D1 5B  - imul ecx,r9d,5BD1E995
game.dll+A96C21: 69 DA 95 E9 D1 5B     - imul ebx,edx,5BD1E995
game.dll+A96C27: 33 D9                 - xor ebx,ecx
game.dll+A96C29: 74 33                 - je game.dll+A96C5E
game.dll+A96C2B: 45 8B 9A D8 51 00 00  - mov r11d,[r10+000051D8]
game.dll+A96C32: 41 8B D0              - mov edx,r8d
game.dll+A96C35: 45 85 DB              - test r11d,r11d
game.dll+A96C38: 74 24                 - je game.dll+A96C5E
game.dll+A96C3A: 49 8D 8A E0 D9 04 00  - lea rcx,[r10+0004D9E0]
}
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>113920</ID>
      <Description>"Быстрое завершение миссии (Открыть карту и нажать ПКМ)"</Description>
      <Color>D2FFFF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript Async="1">{ Game   : helldivers2.exe
  Version:
  Date   : 2024-04-05
  Author : ZoDDeL

  This script does blah blah blah
}

[ENABLE]
//aobscanmodule(aob_GetAsyncKeyState,USER32.dll,E9 ? ? ? ? 57 48 83 EC 20)
aobscanmodule(missionA,game.dll,45 8B 4A ? 48 8D 8D) // should be unique
registersymbol(missionA)
alloc(missionA_newmem,$1000)

label(missionA_code)
label(missionA_return)

missionA_newmem:
  push rax
  push rcx
  push rdx
  push r8
  push r9
  push r10
  push r11
  sub rsp,28
  mov rcx,2  // checks for mouse 2
  call USER32.GetAsyncKeyState
  add rsp,28
  pop r11
  pop r10
  pop r9
  pop r8
  pop rdx
  pop rcx
  //cmp ax,8001  // having problems with this so instead i check for not 0
  cmp ax,0
  pop rax
  jne missionA_complete
  jmp missionA_code

missionA_complete:
  mov [r10+18],#1
  jmp missionA_code


missionA_code:
  mov r9d,[r10+18]
  lea rcx,[rbp+148]
  mov edx, r13d
  jmp missionA_return

missionA:
  jmp far missionA_newmem
missionA_return:


aobscanmodule(missionB,game.dll,41 8B 47 38 83 E8 02 83 F8 01 8B 83 14 08 00 00) // should be unique
registersymbol(missionB)
alloc(missionB_newmem,$1000)

label(missionB_code)
label(missionB_return)

missionB_newmem:
  push rax
  push rcx
  push rdx
  push r8
  push r9
  push r10
  push r11
  sub rsp,28
  mov rcx,2  // checks for mouse 2
  call USER32.GetAsyncKeyState
  add rsp,28
  pop r11
  pop r10
  pop r9
  pop r8
  pop rdx
  pop rcx
  //cmp ax,8001  // having problems with this so instead i check for not 0
  cmp ax,0
  pop rax
  jne missionB_complete
  jmp missionB_code

missionB_complete:
  mov [r15+38],#2
  jmp missionB_code


missionB_code:
  mov eax,[r15+38]
  sub eax,02
  cmp eax,01
  mov eax,[rbx+00000814]
  jmp missionB_return

missionB:
  jmp far missionB_newmem
  nop 2
missionB_return:

aobscanmodule(completeHiveBase,game.dll,4C 69 DE ? ? ? ? 48 6B C6) // should be unique
alloc(completeHiveBase_newmem,$1000)

label(completeHiveBase_code)
label(completeHiveBase_return)

completeHiveBase_newmem:

completeHiveBase_code:
  imul r11, rsi, 2A8
  imul rax, rsi, 38
  add r11, [rbx+48]
  add rax, [rbx+50]
  mov byte ptr [rax+31], #1
  jmp completeHiveBase_return

completeHiveBase:
  jmp far completeHiveBase_newmem
  nop 5
completeHiveBase_return:
registersymbol(completeHiveBase)


[DISABLE]

missionA:
db 45 8B 4A 18 48 8D 8D 48 01 00 00 41 8B D4

missionB:
db 41 8B 47 38 83 E8 02 83 F8 01 8B 83 14 08 00 00

completeHiveBase:
  db 4C 69 DE A8 02 00 00 48 6B C6 34 4C 03 5B 48 48 03 43 50

unregistersymbol(missionA)
unregistersymbol(missionB)
unregistersymbol(completeHiveBase)
dealloc(missionA_newmem)
dealloc(missionB_newmem)
dealloc(completeHiveBase_newmem)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>117477</ID>
      <Description>"Быстрое приземление капсулы (включать с беск.стратагемами)"</Description>
      <Color>D2FFFF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript Async="1">[ENABLE]
aobscanmodule(instantstratdrop,game.dll,F3 0F 11 04 06 48 8B 47 60 4C 8B 47 78 4C 03 C6 4A 8B 0C F0) // should be unique
alloc(newmem,$1000,instantstratdrop)
alloc(stratMax,8)

registersymbol(stratMax)

label(code)
label(return)

stratMax:
dd (float).5

newmem:
  push edx
  movd edx,xmm0
  cmp edx,[stratMax]
  jle code
  mov edx,[stratMax]
  movd xmm0,edx
code:
  pop edx
  movss [rsi+rax],xmm0
  jmp return

instantstratdrop:
  jmp newmem
return:
registersymbol(instantstratdrop)

[DISABLE]

instantstratdrop:
  db F3 0F 11 04 06 48 8B 47 60 4C 8B 47 78 4C 03 C6 4A 8B 0C F0

unregistersymbol(stratMax)
unregistersymbol(instantstratdrop)
dealloc(stratMax)
dealloc(newmem)
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>117489</ID>
      <Description>"Фаарм medal (Отключить кредиты)"</Description>
      <Color>C080FF</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript Async="1">[ENABLE]
{
Game   : Helldiver 2
Version: any game version
Date   : 2024-07-20
Author : (Discord)Sakuno

This script maybe freezing the cheat engine by few seconds when enabling.
Function: Replace the RESUPPLY POD slot 0 to super credit!
}
{$lua}
function HellpodDataReplacer0()
gHellpodDataAddr=AOBScan("88 6F 72 13 95 D9 7B 14 B2 50 46 93", '-W')
  if (gHellpodDataAddr == nil) then
     return
  end
  registerSymbol("HellpodDataAddr", gHellpodDataAddr[1])
gHellpodDataAddr.destroy()
end
HellpodDataReplacer0()

{$asm}

HellpodDataAddr: // ItemID
db 88 6F 72 13 95 D9 7B 14
//medals db 88 6F 72 13 95 D9 7B 14


[DISABLE]

HellpodDataAddr: // ItemID
db 88 6F 72 13 95 D9 7B 14
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>113939</ID>
      <Description>"Фарм (Включать соло или с друзьями) Включает так же некоторые функции из таблицы"</Description>
      <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
      <Color>00FF00</Color>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>117465</ID>
          <Description>"Solo mods"</Description>
          <Options moAlwaysHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
          <Color>00FF00</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>117461</ID>
              <Description>"Inf Time                                                                          (by cfemen)"</Description>
              <Color>C0C0C0</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : helldivers2.exe
  Version:
  Date   : 2024-12-13
  Author : cfemen

  This script does blah blah blah
}

[ENABLE]


aobscanmodule(aobSubTime,game.dll,F3 0F 5C C7 F3 41 0F 5F C2 F3 43 0F 11 84 EF ?? ?? ?? ??) // should be unique

aobSubTime:
  nop 4

registersymbol(aobSubTime)

[DISABLE]

aobSubTime:
  db F3 0F 5C C7

unregistersymbol(aobSubTime)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>113976</ID>
              <Description>"Inf Health                                                                       (by cfemen)"</Description>
              <Color>C0C0C0</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]

aobscanmodule(aobReadLocalPlayerHealth,game.dll,41 8B 47 18 4C 8B 7C 24 20 4C 8B 74 24 28) // should be unique
alloc(newmem,$1000)

label(code)
label(return)
label(pHealth)
registersymbol(pHealth)
newmem:

code:
  lea rax,[rax+rcx*8]
  mov [pHealth],rax
  mov [rax],#9999
  mov eax,[r15+18]
  mov r15,[rsp+20]
  mov r14,[rsp+28]
  jmp return
pHealth:
dq 0

aobReadLocalPlayerHealth:
  jmp far newmem
return:
registersymbol(aobReadLocalPlayerHealth)



aobscanmodule(aobWriteHealth,game.dll,41 89 2C 00 48 8B 46 38 4C 03 46 50 4A 8B 0C C8) // should be unique
alloc(newmem2,$1000)

label(code2)
label(return2)

newmem2:

code2:
  push rbx
  push rcx
  mov rbx,pHealth
  mov rbx,[rbx]
  lea rcx,[r8+rax]
  cmp rbx,rcx
  jne short @f
   mov ebp,#9999
  @@:
  pop rcx
  pop rbx
  mov [r8+rax],ebp
  mov rax,[rsi+38]
  add r8,[rsi+50]
  mov rcx,[rax+r9*8]
  jmp return2

aobWriteHealth:
  jmp far newmem2
  nop 2
return2:
registersymbol(aobWriteHealth)

[DISABLE]

aobReadLocalPlayerHealth:
  db 41 8B 47 18 4C 8B 7C 24 20 4C 8B 74 24 28

unregistersymbol(aobReadLocalPlayerHealth)
dealloc(newmem)

aobWriteHealth:
  db 41 89 2C 00 48 8B 46 38 4C 03 46 50 4A 8B 0C C8

unregistersymbol(aobWriteHealth)
dealloc(newmem2)

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>113977</ID>
              <Description>"Inf Stamina                                                                    (by gir489+cfemen)"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript Async="1">[ENABLE]

aobscanmodule(aobSprintWrite,game.dll,F3 41 0F 11 08 8B 48 10 E8 ** ** ** ** 41 8B 47 48 0F 28 B4 24 50 08 00 00) // should be unique

aobSprintWrite:
  nop 5
registersymbol(aobSprintWrite)

[DISABLE]

aobSprintWrite:
  db F3 41 0F 11 08

unregistersymbol(aobSprintWrite)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>117464</ID>
              <Description>"Inf stims                                                                        (by cfemen)"</Description>
              <Color>C0C0C0</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]

aobscanmodule(aobSyrige,game.dll,45 89 74 CF 18) // should be unique

aobSyrige:
  db 90 90 90 90 90

registersymbol(aobSyrige)

[DISABLE]

aobSyrige:
  db 45 89 74 CF 18

unregistersymbol(aobSyrige)


</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>113979</ID>
              <Description>"Inf grenade                                                                    (by gir489)"</Description>
              <Color>0000FF</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : helldivers2.exe
  Version: 
  Date   : 2024-04-29
  Author : ZoDDeL

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(legit_grenades,game.dll,41 FF 0C 06 48 8B 45 40 4C 8B 45 58 4D 03 C6) // should be unique
alloc(legit_grenades_newmem,$1000)

label(legit_grenades_code)
label(legit_grenades_return)

legit_grenades_newmem:
  cmp dword ptr [r14+rax],#1
  je legit_grenades_code
  dec [r14+rax]
  jmp legit_grenades_code


legit_grenades_code:
  mov rax,[rbp+40]
  mov r8,[rbp+58]
  add r8,r14
  jmp legit_grenades_return

legit_grenades:
  jmp far legit_grenades_newmem
  nop
legit_grenades_return:


[DISABLE]
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>113980</ID>
              <Description>"Inf last Mag                                                                   (by ZoDDel)"</Description>
              <Color>FFFF00</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : helldivers2.exe
  Version: 
  Date   : 2024-04-30
  Author : ZoDDeL

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(legit_ammo,game.dll,4C 8D 04 D2 42 83 2C C1 01 48 8B 45 38 0F 94 C3) // should be unique
alloc(legit_ammo_newmem,$1000)

label(legit_ammo_code)
label(legit_ammo_return)

legit_ammo_newmem:
  lea r8,[rdx+rdx*8]

  cmp dword ptr [rcx+r8*8],#2
  jl legit_ammo_code
  sub dword ptr [rcx+r8*8],01
  jmp legit_ammo_code


legit_ammo_code:
  mov rax,[rbp+38]
  sete bl
  jmp legit_ammo_return

legit_ammo:
  jmp far legit_ammo_newmem
  nop 2
legit_ammo_return:

[DISABLE]
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>117433</ID>
              <Description>"No ammo consume                                                       (by gir489)"</Description>
              <Color>0000FF</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript Async="1">// Game Executable   : helldivers2.exe
// Author            : gir489
// Executable Version: 1.8.17201.0
// MD5 Signature     : 495C5D1678F8B6C0A61041D667C48362
// EXE Compile Date  : March 08, 2024 10:46 AM
// Script Date       : March 13, 2024 03:32 PM
[ENABLE]
aobscanmodule(aob_SetAmmo,game.dll,44 89 74 01 18 4D 8B 42 50)
registersymbol(aob_SetAmmo)

aob_SetAmmo:
 nop 5

[DISABLE]
aob_SetAmmo:
  db 44 89 74 01 18

unregistersymbol(aob_SetAmmo)
dealloc(newmem_SetAmmo)

{
// ORIGINAL CODE - INJECTION POINT: game.dll+41946B

game.dll+419422: 41 8D 0C 18              - lea ecx,[r8+rbx]
game.dll+419426: 48 23 C8                 - and rcx,rax
game.dll+419429: 8B 04 CF                 - mov eax,[rdi+rcx*8]
game.dll+41942C: 4C 8D 1C CF              - lea r11,[rdi+rcx*8]
game.dll+419430: 3B C6                    - cmp eax,esi
game.dll+419432: 74 62                    - je game.dll+419496
game.dll+419434: 3B C2                    - cmp eax,edx
game.dll+419436: 74 62                    - je game.dll+41949A
game.dll+419438: 41 FF C0                 - inc r8d
game.dll+41943B: 45 3B C1                 - cmp r8d,r9d
game.dll+41943E: 72 E0                    - jb game.dll+419420
game.dll+419440: B8 FF FF FF FF           - mov eax,FFFFFFFF
game.dll+419445: 48 8B 74 24 40           - mov rsi,[rsp+40]
game.dll+41944A: 48 8B 6C 24 38           - mov rbp,[rsp+38]
game.dll+41944F: 48 8B 5C 24 30           - mov rbx,[rsp+30]
game.dll+419454: 48 8B 7C 24 48           - mov rdi,[rsp+48]
game.dll+419459: 8B D0                    - mov edx,eax
game.dll+41945B: 48 8D 04 D2              - lea rax,[rdx+rdx*8]
game.dll+41945F: 48 8D 0C C5 00 00 00 00  - lea rcx,[rax*8+00000000]
game.dll+419467: 49 8B 42 50              - mov rax,[r10+50]
// ---------- INJECTING HERE ----------
game.dll+41946B: 44 89 74 01 18           - mov [rcx+rax+18],r14d
// ---------- DONE INJECTING  ----------
game.dll+419470: 4D 8B 42 50              - mov r8,[r10+50]
game.dll+419474: 49 8B 42 38              - mov rax,[r10+38]
game.dll+419478: 49 83 C0 18              - add r8,18
game.dll+41947C: 4C 03 C1                 - add r8,rcx
game.dll+41947F: 48 8B 0C D0              - mov rcx,[rax+rdx*8]
game.dll+419483: BA 3E D6 A5 D7           - mov edx,D7A5D63E
game.dll+419488: 8B 49 10                 - mov ecx,[rcx+10]
game.dll+41948B: 48 83 C4 20              - add rsp,20
game.dll+41948F: 41 5E                    - pop r14
game.dll+419491: E9 8A 0A 68 00           - jmp game.dll+A99F20
game.dll+419496: 3B C2                    - cmp eax,edx
game.dll+419498: 75 A6                    - jne game.dll+419440
game.dll+41949A: 41 8B 43 04              - mov eax,[r11+04]
game.dll+41949E: EB A5                    - jmp game.dll+419445
game.dll+4194A0: CC                       - int 3
game.dll+4194A1: CC                       - int 3
game.dll+4194A2: CC                       - int 3
game.dll+4194A3: CC                       - int 3
game.dll+4194A4: CC                       - int 3
game.dll+4194A5: CC                       - int 3
}
</AssemblerScript>
              <Hotkeys>
                <Hotkey>
                  <Action>Toggle Activation</Action>
                  <Keys>
                    <Key>16</Key>
                    <Key>39</Key>
                  </Keys>
                  <ID>0</ID>
                  <ActivateSound TTS="EN">{MRDescription} Activated</ActivateSound>
                  <DeactivateSound TTS="EN">{MRDescription} Deactivated</DeactivateSound>
                </Hotkey>
              </Hotkeys>
            </CheatEntry>
            <CheatEntry>
              <ID>113982</ID>
              <Description>"Inf Jetpack                                                                      (by ???)"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript Async="1">[ENABLE]
aobscanmodule(aob_ToTheSky,game.dll,89 04 B9 83 FD 01)
registersymbol(aob_ToTheSky)

aob_ToTheSky:
  nop 3

[DISABLE]
aob_ToTheSky:
  db 89 04 B9
unregistersymbol(aob_ToTheSky)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>117453</ID>
              <Description>"Infinite Autocannon Backpack                                        (by ???)"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript Async="1">[ENABLE]
aobscanmodule(aob_Autocannon,game.dll,2B C8 BA)
registersymbol(aob_Autocannon)
aob_Autocannon:
nop 2
[DISABLE]
aob_Autocannon:
  db 2B C8
unregistersymbol(aob_Autocannon)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>113983</ID>
              <Description>"Inf Shield                                                                        (by cfemen)"</Description>
              <Color>C0C0C0</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : helldivers2.exe
  Version:
  Date   : 2024-12-14
  Author : cfemen

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(aobCalcShield,game.dll,F3 41 0F 5C CE F3 43 0F 11 4C 3E 08 0F 28 D1) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  test rsi,rsi
  je short @f
  push rax
  mov rax,12C8D71AC3897A5C
  cmp [rsi],rax
  jne short @f
     pop rax
     subss xmm1,xmm1
     movss [r14+r15+08],xmm1
       movaps xmm2,xmm1
  jmp return
  @@:
  pop rax
  subss xmm1,xmm14
  movss [r14+r15+08],xmm1
  movaps xmm2,xmm1
  jmp return

aobCalcShield:
  jmp far newmem
  nop
return:
registersymbol(aobCalcShield)

[DISABLE]

aobCalcShield:
  db F3 41 0F 5C CE F3 43 0F 11 4C 3E 08 0F 28 D1

unregistersymbol(aobCalcShield)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: game.dll+678BF9

game.dll+678BCF: 48 8B 43 48           - mov rax,[rbx+48]
game.dll+678BD3: 4C 8B 43 58           - mov r8,[rbx+58]
game.dll+678BD7: 49 FF C0              - inc r8
game.dll+678BDA: 4D 03 C4              - add r8,r12
game.dll+678BDD: 4A 8B 0C 28           - mov rcx,[rax+r13]
game.dll+678BE1: 8B 49 10              - mov ecx,[rcx+10]
game.dll+678BE4: E8 77 A1 53 00        - call game.dll+BB2D60
game.dll+678BE9: F3 43 0F 10 4C 3E 08  - movss xmm1,[r14+r15+08]
game.dll+678BF0: 0F 2F CF              - comiss xmm1,xmm7
game.dll+678BF3: 0F 86 F6 00 00 00     - jbe game.dll+678CEF
// ---------- INJECTING HERE ----------
game.dll+678BF9: F3 41 0F 5C CE        - subss xmm1,xmm14
// ---------- DONE INJECTING  ----------
game.dll+678BFE: F3 43 0F 11 4C 3E 08  - movss [r14+r15+08],xmm1
game.dll+678C05: 0F 28 D1              - movaps xmm2,xmm1
game.dll+678C08: 41 80 7C 2C 02 00     - cmp byte ptr [r12+rbp+02],00
game.dll+678C0E: 74 70                 - je game.dll+678C80
game.dll+678C10: 0F 28 C1              - movaps xmm0,xmm1
game.dll+678C13: F3 41 0F 58 C6        - addss xmm0,xmm14
game.dll+678C18: 0F 2F C6              - comiss xmm0,xmm6
game.dll+678C1B: 76 63                 - jna game.dll+678C80
game.dll+678C1D: 0F 2F F1              - comiss xmm6,xmm1
game.dll+678C20: 72 5E                 - jb game.dll+678C80
}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>113984</ID>
              <Description>"Inf Stratagems                                                                (by cfemen)"</Description>
              <Color>C0C0C0</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript Async="1">{ Game   : helldivers2.exe
  Version:
  Date   : 2024-03-21
  Author : cfemen

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(aobStratacmp,game.dll,0F 86 BF 01 00 00 0F) // should be unique

aobStratacmp:
  db 90 E9
registersymbol(aobStratacmp)

[DISABLE]

aobStratacmp:
  db 0F 86

unregistersymbol(aobStratacmp)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>113971</ID>
              <Description>"No Recoil                                                                        (by cfemen)"</Description>
              <Color>C0C0C0</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]

aobscanmodule(aobRecoil,game.dll,48 83 EC 18 48 8B 01) // should be unique

aobRecoil:
  db C3
registersymbol(aobRecoil)

[DISABLE]

aobRecoil:
  db 48
unregistersymbol(aobRecoil)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>113972</ID>
              <Description>"No Sway                                                                         (by cfemen)"</Description>
              <Color>C0C0C0</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : helldivers2.exe
  Version:
  Date   : 2024-12-13
  Author : cfemen

  This script does blah blah blah
}

[ENABLE]


aobscanmodule(aobCalcSway,game.dll,F3 0F 51 FA EB 0B 0F 28 C2 E8 ?? ?? ?? ?? 0F 28 F8 44 0F 28 C7 0F 28 F7) // should be unique

aobCalcSway:
  nop 4

[DISABLE]

aobCalcSway:
  db F3 0F 51 FA

unregistersymbol(aobCalcSway)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>117488</ID>
              <Description>"Show All Map Icons                                                        (by cfemen)"</Description>
              <Color>C0C0C0</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript Async="1">[ENABLE]
aobscanmodule(aob_CheckIsBlipSeen,game.dll,0F B6 40 33) // 0F B6 40 33 ?
aobscanmodule(aob_CheckIfAlienHivesAreObstructed,game.dll,41 80 BF AC CA 05 00 00)
aobscanmodule(aob_CheckIfMinorInterestBlipIsDiscovered,game.dll,0F 85 ?? ?? ?? ?? 48 8B 44 24 ?? 80 78)
aobscanmodule(aob_GetMinorInterestBlipIcon,game.dll,0F 84 01 02 00 00 48 8B 54 24 58)
aobscanmodule(aob_CheckMissionBlip,game.dll,0F 85 ? ? ? ? 49 8D B8)
registersymbol(aob_CheckIsBlipSeen)
registersymbol(aob_CheckIfMinorInterestBlipIsDiscovered)
registersymbol(aob_GetMinorInterestBlipIcon)
registersymbol(aob_CheckIfAlienHivesAreObstructed)
registersymbol(aob_CheckMissionBlip)

aob_CheckIsBlipSeen:
  xor eax,eax
  mov al,1

aob_CheckIfAlienHivesAreObstructed:
  clc
  nop 7

aob_CheckIfMinorInterestBlipIsDiscovered:
  db 90 E9

aob_GetMinorInterestBlipIcon:
  db 0F 84

aob_CheckMissionBlip:
  db 90 E9

[DISABLE]
aob_CheckIsBlipSeen:
  db 0F B6 40 33

aob_CheckIfAlienHivesAreObstructed:
  db 41 80 BF AC CA 05 00 00

aob_CheckIfMinorInterestBlipIsDiscovered:
  db 0F 85

aob_GetMinorInterestBlipIcon:
  db 0F 84

aob_CheckMissionBlip:
  db 0F 85

unregistersymbol(aob_CheckIsBlipSeen)
unregistersymbol(aob_CheckIfAlienHivesAreObstructed)
unregistersymbol(aob_CheckIfMinorInterestBlipIsDiscovered)
unregistersymbol(aob_GetMinorInterestBlipIcon)
unregistersymbol(aob_CheckMissionBlip)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>113938</ID>
              <Description>"speedhack  x7 player / x2 rescue citizen / x0 enemies    (by ZoDDel)"</Description>
              <Color>FFFF00</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript Async="1">{ Game   : helldivers2.exe
  Version: 
  Date   : 2024-04-02
  Author : ZoDDeL

  This script does blah blah blah
}

[ENABLE]

aobscanmodule(speeeeed,game.dll,F3 41 0F 59 56 0C F3 41 0F 59 56 10 0F 28 E2) // should be unique
alloc(speed_newmem,$1500)

label(speed_code)
label(speed_return)

speed_newmem:
  cmp [r14+1C],(float)30
  je speed_playership
  cmp [r14+1C],(float)100
  je speed_player
  cmp [r14+1C],(float)10
  je speed_mech
  cmp [r14+1C],(float)5
  je speed_rescue
  jmp speed_enemy

speed_playership:
  cmp [r14+20],(float)40
  jne speed_enemy
  mov [r14+0C],(float)3  // speed value (default is 1)
  jmp speed_code

speed_player:
  cmp [r14+20],(float)100
  jne speed_enemy
  mov [r14+0C],(float)7  // speed value (default is 1)
  jmp speed_code

speed_mech:
  cmp [r14+20],(float)30
  jne speed_enemy
  mov [r14+0C],(float)3  // speed value (default is 1)
  jmp speed_code

speed_rescue:
  cmp [r14+20],(float)50
  jne speed_enemy
  mov [r14+0C],(float)2  // speed value (default is 1)
  jmp speed_code

speed_enemy:
  mov [r14+0C],(float)0  // speed value (default is 1)
  jmp speed_code

speed_code:
  mulss xmm2,[r14+0C]
  mulss xmm2,[r14+10]
  movaps xmm4,xmm2
  jmp speed_return

speeeeed:
  jmp far speed_newmem
  nop
speed_return:
registersymbol(speeeeed)

[DISABLE]

speeeeed:
  db F3 41 0F 59 56 0C F3 41 0F 59 56 10 0F 28 E2

unregistersymbol(speeeeed)
dealloc(speed_newmem)

{
// ORIGINAL CODE - INJECTION POINT: game.dll+64BC4D

game.dll+64BC17: 44 0F 2F D8              - comiss xmm11,xmm0
game.dll+64BC1B: 77 09                    - ja game.dll+64BC26
game.dll+64BC1D: 45 0F 28 DC              - movaps xmm11,xmm12
game.dll+64BC21: F3 44 0F 5D D8           - minss xmm11,xmm0
game.dll+64BC26: F3 41 0F 10 56 04        - movss xmm2,[r14+04]
game.dll+64BC2C: F3 41 0F 59 16           - mulss xmm2,[r14]
game.dll+64BC31: F3 41 0F 10 6E 14        - movss xmm5,[r14+14]
game.dll+64BC37: F2 0F 10 05 E1 FF B1 00  - movsd xmm0,[game.dll+116BC20]
game.dll+64BC3F: F3 41 0F 59 56 08        - mulss xmm2,[r14+08]
game.dll+64BC45: F3 0F 10 98 B8 0C 00 00  - movss xmm3,[rax+00000CB8]
// ---------- INJECTING HERE ----------
game.dll+64BC4D: F3 41 0F 59 56 0C        - mulss xmm2,[r14+0C]
// ---------- DONE INJECTING  ----------
game.dll+64BC53: F3 41 0F 59 56 10        - mulss xmm2,[r14+10]
game.dll+64BC59: 0F 28 E2                 - movaps xmm4,xmm2
game.dll+64BC5C: F3 0F 5C E5              - subss xmm4,xmm5
game.dll+64BC60: 0F 5A CC                 - cvtps2pd xmm1,xmm4
game.dll+64BC63: 0F 54 0D 16 39 B2 00     - andps xmm1,[game.dll+116F580]
game.dll+64BC6A: 66 0F 2F C1              - comisd xmm0,xmm1
game.dll+64BC6E: 77 21                    - ja game.dll+64BC91
game.dll+64BC70: F3 41 0F 59 DD           - mulss xmm3,xmm13
game.dll+64BC75: 44 0F 2F CB              - comiss xmm9,xmm3
game.dll+64BC79: 76 06                    - jna game.dll+64BC81
}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>113964</ID>
              <Description>"Instant Shuttle                                                                (by cfemen)"</Description>
              <Color>C0C0C0</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{ Game   : helldivers2.exe
  Version:
  Date   : 2024-10-29
  Author : cfemen

  This script does blah blah blah
}

[ENABLE]


aobscanmodule(aobSubTimer,game.dll,F3 0F 5C C3 BA 66 F7 09 61 F3 0F 11 04 01) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  subss xmm0,xmm3
  subss xmm0,xmm13
  ucomiss xmm0, DWORD [compare_float_check]
  jbe short @f
    movss xmm0, DWORD [compare_float_check]
  @@:
  mov edx,6109F766
  movss [rcx+rax],xmm0
  jmp return
compare_float_check:
dd (float)1.0
aobSubTimer:
  jmp far newmem
return:
registersymbol(aobSubTimer)

[DISABLE]

aobSubTimer:
  db F3 0F 5C C3 BA 66 F7 09 61 F3 0F 11 04 01

unregistersymbol(aobSubTimer)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: game.dll+5D3357

game.dll+5D3339: FF C1           - inc ecx
game.dll+5D333B: 48 83 C2 1C     - add rdx,1C
game.dll+5D333F: 41 3B C8        - cmp ecx,r8d
game.dll+5D3342: 72 DD           - jb game.dll+5D3321
game.dll+5D3344: 84 DB           - test bl,bl
game.dll+5D3346: 75 39           - jne game.dll+5D3381
game.dll+5D3348: 48 8B 47 78     - mov rax,[rdi+78]
game.dll+5D334C: 4B 8D 0C B6     - lea rcx,[r14+r14*4]
game.dll+5D3350: 48 C1 E1 04     - shl rcx,04
game.dll+5D3354: 0F 28 C6        - movaps xmm0,xmm6
// ---------- INJECTING HERE ----------
game.dll+5D3357: F3 0F 5C C3     - subss xmm0,xmm3
// ---------- DONE INJECTING  ----------
game.dll+5D335B: BA 66 F7 09 61  - mov edx,6109F766
game.dll+5D3360: F3 0F 11 04 01  - movss [rcx+rax],xmm0
game.dll+5D3365: 48 8B 47 60     - mov rax,[rdi+60]
game.dll+5D3369: 4C 8B 47 78     - mov r8,[rdi+78]
game.dll+5D336D: 4C 03 C1        - add r8,rcx
game.dll+5D3370: 4A 8B 0C F0     - mov rcx,[rax+r14*8]
game.dll+5D3374: 8B 49 10        - mov ecx,[rcx+10]
game.dll+5D3377: E8 64 74 58 00  - call game.dll+B5A7E0
game.dll+5D337C: 49 8B D6        - mov rdx,r14
game.dll+5D337F: EB 44           - jmp game.dll+5D33C5
}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>117431</ID>
              <Description>"instant complete all missions RButton                           (by ZoDDel)"</Description>
              <Color>FFFF00</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript Async="1">{ Game   : helldivers2.exe
  Version:
  Date   : 2024-04-05
  Author : ZoDDeL

  This script does blah blah blah
}

[ENABLE]
//aobscanmodule(aob_GetAsyncKeyState,USER32.dll,E9 ? ? ? ? 57 48 83 EC 20)
aobscanmodule(missionA,game.dll,45 8B 4A ? 48 8D 8D) // should be unique
registersymbol(missionA)
alloc(missionA_newmem,$1000)

label(missionA_code)
label(missionA_return)

missionA_newmem:
  push rax
  push rcx
  push rdx
  push r8
  push r9
  push r10
  push r11
  sub rsp,28
  mov rcx,2  // checks for mouse 2
  call USER32.GetAsyncKeyState
  add rsp,28
  pop r11
  pop r10
  pop r9
  pop r8
  pop rdx
  pop rcx
  //cmp ax,8001  // having problems with this so instead i check for not 0
  cmp ax,0
  pop rax
  jne missionA_complete
  jmp missionA_code

missionA_complete:
  mov [r10+18],#1
  jmp missionA_code


missionA_code:
  mov r9d,[r10+18]
  lea rcx,[rbp+148]
  mov edx, r13d
  jmp missionA_return

missionA:
  jmp far missionA_newmem
missionA_return:


aobscanmodule(missionB,game.dll,41 8B 47 38 83 E8 02 83 F8 01 8B 83 14 08 00 00) // should be unique
registersymbol(missionB)
alloc(missionB_newmem,$1000)

label(missionB_code)
label(missionB_return)

missionB_newmem:
  push rax
  push rcx
  push rdx
  push r8
  push r9
  push r10
  push r11
  sub rsp,28
  mov rcx,2  // checks for mouse 2
  call USER32.GetAsyncKeyState
  add rsp,28
  pop r11
  pop r10
  pop r9
  pop r8
  pop rdx
  pop rcx
  //cmp ax,8001  // having problems with this so instead i check for not 0
  cmp ax,0
  pop rax
  jne missionB_complete
  jmp missionB_code

missionB_complete:
  mov [r15+38],#2
  jmp missionB_code


missionB_code:
  mov eax,[r15+38]
  sub eax,02
  cmp eax,01
  mov eax,[rbx+00000814]
  jmp missionB_return

missionB:
  jmp far missionB_newmem
  nop 2
missionB_return:

aobscanmodule(completeHiveBase,game.dll,4C 69 DE ? ? ? ? 48 6B C6) // should be unique
alloc(completeHiveBase_newmem,$1000)

label(completeHiveBase_code)
label(completeHiveBase_return)

completeHiveBase_newmem:

completeHiveBase_code:
  imul r11, rsi, 2A8
  imul rax, rsi, 38
  add r11, [rbx+48]
  add rax, [rbx+50]
  mov byte ptr [rax+31], #1
  jmp completeHiveBase_return

completeHiveBase:
  jmp far completeHiveBase_newmem
  nop 5
completeHiveBase_return:
registersymbol(completeHiveBase)


[DISABLE]

missionA:
db 45 8B 4A 18 48 8D 8D 48 01 00 00 41 8B D4

missionB:
db 41 8B 47 38 83 E8 02 83 F8 01 8B 83 14 08 00 00

completeHiveBase:
  db 4C 69 DE A8 02 00 00 48 6B C6 34 4C 03 5B 48 48 03 43 50

unregistersymbol(missionA)
unregistersymbol(missionB)
unregistersymbol(completeHiveBase)
dealloc(missionA_newmem)
dealloc(missionB_newmem)
dealloc(completeHiveBase_newmem)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>113967</ID>
              <Description>"Instant Railgun/Arc Ready                                              (by gir489)"</Description>
              <Color>0000FF</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript Async="1">// Game Executable   : helldivers2.exe
// Author            : gir489
// Executable Version: 1.8.25984.0
// MD5 Signature     : F1A0F5136B9035B653BDE0217332B2C8
// EXE Compile Date  : December 06, 2024 11:43 AM
// Script Date       : December 12, 2024 10:40 PM
[ENABLE]
aobscanmodule(aob_RailgunCharge,game.dll, F3 43 0F 11 44 F7 ? 45 84 E4)
registersymbol(aob_RailgunCharge)
assert(aob_RailgunCharge+3F, 45 0F 2F D9)
alloc(newmem,1024)
label(return)

newmem:
  mov [r15+r14*8+4], (float)2.999999
  movss xmm0, [r15+r14*8+4]
  test r12b,r12b
  je far return+2F
  comiss xmm10,xmm9
  jmp far return

aob_RailgunCharge:
  jmp far newmem
  nop 2
return:

[DISABLE]
aob_RailgunCharge:
  db F3 43 0F 11 44 F7 04 45 84 E4 74 33 45 0F 2F D1

unregistersymbol(aob_RailgunCharge)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: game.dll+58FDB9

game.dll+58FD6C: 0F 85 53 FF FF FF        - jne game.dll+58FCC5
game.dll+58FD72: 41 8B 44 D2 04           - mov eax,[r10+rdx*8+04]
game.dll+58FD77: 83 F8 FF                 - cmp eax,-01
game.dll+58FD7A: 0F 84 45 FF FF FF        - je game.dll+58FCC5
game.dll+58FD80: 8B C8                    - mov ecx,eax
game.dll+58FD82: 49 8B 43 38              - mov rax,[r11+38]
game.dll+58FD86: 8B 3C 88                 - mov edi,[rax+rcx*4]
game.dll+58FD89: E9 3D FF FF FF           - jmp game.dll+58FCCB
game.dll+58FD8E: 3B C3                    - cmp eax,ebx
game.dll+58FD90: 75 AB                    - jne game.dll+58FD3D
game.dll+58FD92: 41 83 7C D2 04 FF        - cmp dword ptr [r10+rdx*8+04],-01
game.dll+58FD98: 74 A3                    - je game.dll+58FD3D
game.dll+58FD9A: 48 8B 74 24 48           - mov rsi,[rsp+48]
game.dll+58FD9F: 8B 56 08                 - mov edx,[rsi+08]
game.dll+58FDA2: E8 49 46 E9 FF           - call game.dll+4243F0
game.dll+58FDA7: 83 F8 05                 - cmp eax,05
game.dll+58FDAA: 41 0F 95 C4              - setne r12b
game.dll+58FDAE: 75 92                    - jne game.dll+58FD42
game.dll+58FDB0: 41 0F 28 C1              - movaps xmm0,xmm9
game.dll+58FDB4: F3 41 0F 58 C7           - addss xmm0,xmm15
// ---------- INJECTING HERE ----------
game.dll+58FDB9: F3 43 0F 11 44 3E 04     - movss [r14+r15+04],xmm0
// ---------- DONE INJECTING  ----------
game.dll+58FDC0: 45 84 E4                 - test r12b,r12b
game.dll+58FDC3: 74 32                    - je game.dll+58FDF7
game.dll+58FDC5: 45 0F 2F D1              - comiss xmm10,xmm9
game.dll+58FDC9: 76 63                    - jna game.dll+58FE2E
game.dll+58FDCB: 41 0F 2F C2              - comiss xmm0,xmm10
game.dll+58FDCF: 72 5D                    - jb game.dll+58FE2E
game.dll+58FDD1: 41 80 BD B8 00 00 00 00  - cmp byte ptr [r13+000000B8],00
game.dll+58FDD9: 74 53                    - je game.dll+58FE2E
game.dll+58FDDB: 80 7C 24 40 00           - cmp byte ptr [rsp+40],00
game.dll+58FDE0: 74 4C                    - je game.dll+58FE2E
game.dll+58FDE2: 48 8B 4D 88              - mov rcx,[rbp-78]
game.dll+58FDE6: 48 8B D6                 - mov rdx,rsi
game.dll+58FDE9: F3 43 0F 11 44 3E 08     - movss [r14+r15+08],xmm0
game.dll+58FDF0: E8 8B 53 EA FF           - call game.dll+435180
game.dll+58FDF5: EB 2E                    - jmp game.dll+58FE25
game.dll+58FDF7: 45 0F 2F D9              - comiss xmm11,xmm9
game.dll+58FDFB: 76 31                    - jna game.dll+58FE2E
game.dll+58FDFD: 41 0F 2F C3              - comiss xmm0,xmm11
game.dll+58FE01: 72 2B                    - jb game.dll+58FE2E
game.dll+58FE03: 80 7C 24 40 00           - cmp byte ptr [rsp+40],00
}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>113994</ID>
              <Description>"No Laser Overheat                                                          (by gir489)"</Description>
              <Color>0000FF</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript Async="1">// Game Executable   : helldivers2.exe
// Author            : gir489
// Executable Version: 1.8.19279.0
// MD5 Signature     : 94CE72E11EB1E8E8CA9D1201B779444F
// EXE Compile Date  : May 08, 2024 11:48 AM
// Script Date       : May 25, 2024 03:25 PM
[ENABLE]
aobscanmodule(aob_ImmaChargingMahLasor,game.dll,F3 41 0F 11 08 8B 49)
registersymbol(aob_ImmaChargingMahLasor)

aob_ImmaChargingMahLasor+4:
 db 28

[DISABLE]
aob_ImmaChargingMahLasor:
  db F3 41 0F 11 08

unregistersymbol(aob_ImmaChargingMahLasor)

{
// ORIGINAL CODE - INJECTION POINT: game.dll+41F4FA

game.dll+41F4B0: 74 75                    - je game.dll+41F527
game.dll+41F4B2: 3B C3                    - cmp eax,ebx
game.dll+41F4B4: 74 75                    - je game.dll+41F52B
game.dll+41F4B6: FF C1                    - inc ecx
game.dll+41F4B8: 41 3B C8                 - cmp ecx,r8d
game.dll+41F4BB: 72 E3                    - jb game.dll+41F4A0
game.dll+41F4BD: 33 ED                    - xor ebp,ebp
game.dll+41F4BF: 48 8B 9C 24 C8 00 00 00  - mov rbx,[rsp+000000C8]
game.dll+41F4C7: 48 8B 7C 24 20           - mov rdi,[rsp+20]
game.dll+41F4CC: 0F 2F F7                 - comiss xmm6,xmm7
game.dll+41F4CF: 0F 86 CF 02 00 00        - jbe game.dll+41F7A4
game.dll+41F4D5: 0F 28 C6                 - movaps xmm0,xmm6
game.dll+41F4D8: F3 41 0F 10 4E 0C        - movss xmm1,[r14+0C]
game.dll+41F4DE: F3 0F 5D C8              - minss xmm1,xmm0
game.dll+41F4E2: 4D 8B 45 58              - mov r8,[r13+58]
game.dll+41F4E6: BA 36 38 02 A5           - mov edx,A5023836
game.dll+41F4EB: 49 8B 45 40              - mov rax,[r13+40]
game.dll+41F4EF: 49 83 C0 18              - add r8,18
game.dll+41F4F3: 4D 03 C7                 - add r8,r15
game.dll+41F4F6: 48 8B 0C D8              - mov rcx,[rax+rbx*8]
// ---------- INJECTING HERE ----------
game.dll+41F4FA: F3 41 0F 11 08           - movss [r8],xmm1
// ---------- DONE INJECTING  ----------
game.dll+41F4FF: 8B 49 10                 - mov ecx,[rcx+10]
game.dll+41F502: E8 19 BC 67 00           - call game.dll+A9B120
game.dll+41F507: 41 0F 2F 7E 0C           - comiss xmm7,[r14+0C]
game.dll+41F50C: 0F 82 AF 02 00 00        - jb game.dll+41F7C1
game.dll+41F512: 80 BC 24 B0 00 00 00 00  - cmp byte ptr [rsp+000000B0],00
game.dll+41F51A: 0F 85 A1 02 00 00        - jne game.dll+41F7C1
game.dll+41F520: B0 01                    - mov al,01
game.dll+41F522: E9 9C 02 00 00           - jmp game.dll+41F7C3
game.dll+41F527: 3B C3                    - cmp eax,ebx
game.dll+41F529: 75 92                    - jne game.dll+41F4BD
game.dll+41F52B: 41 83 7C D2 04 FF        - cmp dword ptr [r10+rdx*8+04],-01
game.dll+41F531: 74 8A                    - je game.dll+41F4BD
game.dll+41F533: 3B DF                    - cmp ebx,edi
game.dll+41F535: 74 3E                    - je game.dll+41F575
game.dll+41F537: 44 8B 4D 28              - mov r9d,[rbp+28]
game.dll+41F53B: 41 8D 70 FF              - lea esi,[r8-01]
game.dll+41F53F: 44 0F AF CB              - imul r9d,ebx
game.dll+41F543: 33 C9                    - xor ecx,ecx
game.dll+41F545: 45 85 C0                 - test r8d,r8d
game.dll+41F548: 74 2B                    - je game.dll+41F575
}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>113930</ID>
              <Description>"Open Vaults w/ Left Door Only                                       (by gir489)"</Description>
              <Color>0000FF</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>// Game Executable   : helldivers2.exe
// Author            : gir489
// Executable Version: 1.8.19279.0
// MD5 Signature     : 94CE72E11EB1E8E8CA9D1201B779444F
// EXE Compile Date  : May 08, 2024 11:48 AM
// Script Date       : May 28, 2024 02:48 PM
[ENABLE]
aobscanmodule(aob_OpenSaysMe,game.dll,83 88 ? ? ? ? ? 48 8B 01 8B 48 ? E8 ? ? ? ? BA 3A AB 19 9F)
registersymbol(aob_OpenSaysMe)

aob_OpenSaysMe+6:
  db 03

[DISABLE]
aob_OpenSaysMe+6:
  db 01

unregistersymbol(aob_OpenSaysMe)

{
// ORIGINAL CODE - INJECTION POINT: game.dll+2CC7A9

game.dll+2CC75D: CC                    - int 3
game.dll+2CC75E: CC                    - int 3
game.dll+2CC75F: CC                    - int 3
game.dll+2CC760: 48 89 5C 24 08        - mov [rsp+08],rbx
game.dll+2CC765: 57                    - push rdi
game.dll+2CC766: 48 83 EC 20           - sub rsp,20
game.dll+2CC76A: 48 8B F9              - mov rdi,rcx
game.dll+2CC76D: 81 FA 19 7D 49 8E     - cmp edx,8E497D19
game.dll+2CC773: 0F 87 EF 00 00 00     - ja game.dll+2CC868
game.dll+2CC779: 0F 84 BD 00 00 00     - je game.dll+2CC83C
game.dll+2CC77F: 81 FA E0 B8 96 68     - cmp edx,6896B8E0
game.dll+2CC785: 74 6C                 - je game.dll+2CC7F3
game.dll+2CC787: 81 FA DC 37 64 6C     - cmp edx,6C6437DC
game.dll+2CC78D: 74 44                 - je game.dll+2CC7D3
game.dll+2CC78F: 81 FA 03 4E 19 7A     - cmp edx,7A194E03
game.dll+2CC795: 0F 85 D5 01 00 00     - jne game.dll+2CC970
game.dll+2CC79B: 48 8B 41 08           - mov rax,[rcx+08]
game.dll+2CC79F: 33 DB                 - xor ebx,ebx
game.dll+2CC7A1: 44 8B C3              - mov r8d,ebx
game.dll+2CC7A4: BA 4F 64 B3 0F        - mov edx,0FB3644F
// ---------- INJECTING HERE ----------
game.dll+2CC7A9: 83 88 50 01 00 00 01  - or dword ptr [rax+00000150],01
// ---------- DONE INJECTING  ----------
game.dll+2CC7B0: 48 8B 01              - mov rax,[rcx]
game.dll+2CC7B3: 8B 48 0C              - mov ecx,[rax+0C]
game.dll+2CC7B6: E8 F5 57 AE 00        - call game.dll+DB1FB0
game.dll+2CC7BB: BA 3A AB 19 9F        - mov edx,9F19AB3A
game.dll+2CC7C0: 48 8B CF              - mov rcx,rdi
game.dll+2CC7C3: E8 08 A9 E9 FF        - call game.dll+1670D0
game.dll+2CC7C8: 41 B8 3A AB 19 9F     - mov r8d,9F19AB3A
game.dll+2CC7CE: E9 23 01 00 00        - jmp game.dll+2CC8F6
game.dll+2CC7D3: 48 8B 41 08           - mov rax,[rcx+08]
game.dll+2CC7D7: BA 3A AB 19 9F        - mov edx,9F19AB3A
game.dll+2CC7DC: 83 A0 50 01 00 00 FE  - and dword ptr [rax+00000150],-02
game.dll+2CC7E3: E8 E8 A8 E9 FF        - call game.dll+1670D0
game.dll+2CC7E8: 41 B8 3A AB 19 9F     - mov r8d,9F19AB3A
game.dll+2CC7EE: E9 AC 00 00 00        - jmp game.dll+2CC89F
game.dll+2CC7F3: 48 8B 41 08           - mov rax,[rcx+08]
game.dll+2CC7F7: 83 78 08 03           - cmp dword ptr [rax+08],03
game.dll+2CC7FB: 0F 84 6F 01 00 00     - je game.dll+2CC970
game.dll+2CC801: C7 40 08 03 00 00 00  - mov [rax+08],00000003
game.dll+2CC808: 33 DB                 - xor ebx,ebx
game.dll+2CC80A: C7 40 04 FF FF FF FF  - mov [rax+04],FFFFFFFF
}
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>117457</ID>
              <Description>"Climb All                                                                          (by sakuno)"</Description>
              <Color>C080FF</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
{
  Game   : helldivers2.exe
  Version: 1.001.xxx
  Date   : 2024-08-25
  Author : (Discord)Sakuno

  This little script allow you to climb up anything can climb.
}
{$lua}
AvatarDataReplacer=decodeFunction('c-n1^!AiqG5QhJ4m$,8MLPb!a=4guigvffyZ8sZw5/CR#QBo61p;1HBs:ciU=F0Bic^DdkMFodp[-6i{Wp:LbH%W{k()qFThce38,arEr@ePEj4vy:#ec[5HC6oo.OJHCvVSx1??dSl[,3:B6.J]:UX,v0erE,QuJE!esNCwi9,Gj(JM((tiZ]1Bfy)C3qB3D$J8p[l_7)XYg@GTq15b$xp#h43GWhg3c:C{3S[Ydh/M[g-ur?4rJ?n4Vc*Ar2-*YJK9RrJW:,w^z2v-!HnOuSuA@9AiTTj_AoIjz;{eIJOjG,P%Y-xB.6U,twn=f')
AvatarDataReplacer()
{$asm}
// X
AvatarClimbAddr:
  dd (float)50.0 // Default 1.95

// Y
AvatarClimbAddr+4:
  dd (float)50.0 // Default 1.40

[DISABLE]
// X
AvatarClimbAddr:
  dd (float)1.95

// Y
AvatarClimbAddr+4:
  dd (float)1.40

unregistersymbol(AvatarClimbAddr)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>117472</ID>
              <Description>"Inf last Bullet SENATOR                                                   (by fallout11)"</Description>
              <Color>07AFF8</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
aobscanmodule(LegitNoReload,game.dll,8B 4D 30 F3 48 0F 2C F8) // should be unique
alloc(newmem,$1000,LegitNoReload)
label(code)
label(return)

newmem:
  cmp [rbp+30],1 // checks if ammo in gun is equal to or greater than this number
  jge code
  mov [rbp+30],3 // writes this number to gun ammo address if the previous check is false
code:
  mov ecx,[rbp+30]
  cvttss2si rdi,xmm0
  jmp return

LegitNoReload:
  jmp newmem
  nop 3
return:
registersymbol(LegitNoReload)

[DISABLE]
LegitNoReload:
  db 8B 4D 30 F3 48 0F 2C F8
unregistersymbol(LegitNoReload)
dealloc(newmem)
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>31</ID>
          <Description>"Add x? Samples On Pickup  (stract with 99 or less)            (by cfemen)"</Description>
          <Options moHideChildren="1"/>
          <Color>C0C0C0</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript Async="1">{ Game   : helldivers2.exe
  Version: 
  Date   : 2024-08-06
  Author : cfemen

  This script does blah blah blah
}

[ENABLE]


aobscanmodule(aobAddSamples,game.dll,01 41 04 49 8B 46 30 4D 8B 46 40 4C 03 C3) // should be unique
alloc(newmem,$1000)

label(code)
label(return)
label(iAmount)
registersymbol(iAmount)
label(bEverything)
registersymbol(bEverything)
newmem:

code:
mov eax,[iAmount]
cmp byte ptr[bEverything],0
je short L_Single
 push rbx
 mov rbx,[r14+40]
 add [rbx+4],eax // common
 add [rbx+8],eax // rare
 add [rbx+C],eax // super
 pop rbx
 xor eax,eax
L_Single:
  add [rcx+04],eax
  mov rax,[r14+30]
  mov r8,[r14+40]
  add r8,rbx
  jmp return
iAmount:
dd #5
bEverything:
db 0

aobAddSamples:
  jmp far newmem
return:
registersymbol(aobAddSamples)

[DISABLE]

aobAddSamples:
  db 01 41 04 49 8B 46 30 4D 8B 46 40 4C 03 C3

unregistersymbol(aobAddSamples)
dealloc(newmem)

{
// ORIGINAL CODE - INJECTION POINT: game.dll+64E219

game.dll+64E1F1: FF CD                    - dec ebp
game.dll+64E1F3: 8B D0                    - mov edx,eax
game.dll+64E1F5: 48 6B C2 13              - imul rax,rdx,13
game.dll+64E1F9: 48 6B DA 4C              - imul rbx,rdx,4C
game.dll+64E1FD: 48 03 E8                 - add rbp,rax
game.dll+64E200: 48 8D 34 D5 00 00 00 00  - lea rsi,[rdx*8+00000000]
game.dll+64E208: 49 8B 46 40              - mov rax,[r14+40]
game.dll+64E20C: BA 94 4C 74 92           - mov edx,92744C94
game.dll+64E211: 48 8D 0C A8              - lea rcx,[rax+rbp*4]
game.dll+64E215: 41 8D 04 3F              - lea eax,[r15+rdi]
// ---------- INJECTING HERE ----------
game.dll+64E219: 01 41 04                 - add [rcx+04],eax
// ---------- DONE INJECTING  ----------
game.dll+64E21C: 49 8B 46 30              - mov rax,[r14+30]
game.dll+64E220: 4D 8B 46 40              - mov r8,[r14+40]
game.dll+64E224: 4C 03 C3                 - add r8,rbx
game.dll+64E227: 48 8B 0C 30              - mov rcx,[rax+rsi]
game.dll+64E22B: 8B 49 10                 - mov ecx,[rcx+10]
game.dll+64E22E: E8 BD 87 4A 00           - call game.dll+AF69F0
game.dll+64E233: 49 8B 46 40              - mov rax,[r14+40]
game.dll+64E237: BA 32 B8 26 20           - mov edx,2026B832
game.dll+64E23C: 01 7C A8 28              - add [rax+rbp*4+28],edi
game.dll+64E240: 49 8B 46 30              - mov rax,[r14+30]
}
</AssemblerScript>
          <Hotkeys>
            <Hotkey>
              <Action>Toggle Activation</Action>
              <Keys>
                <Key>16</Key>
                <Key>40</Key>
              </Keys>
              <ID>0</ID>
              <ActivateSound TTS="EN">{MRDescription} Activated</ActivateSound>
              <DeactivateSound TTS="EN">{MRDescription} Deactivated</DeactivateSound>
            </Hotkey>
          </Hotkeys>
          <CheatEntries>
            <CheatEntry>
              <ID>121</ID>
              <Description>"Amount:"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>4 Bytes</VariableType>
              <Address>iAmount</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>122</ID>
              <Description>"Add All 3 Types At Once"</Description>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
bEverything:
db 1

 
 
[DISABLE]
bEverything:
db 0
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>117478</ID>
          <Description>"SUPERCREDITS DROP                                                         (by sakuno)"</Description>
          <Color>C080FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript Async="1">[ENABLE]
{
Game   : Helldiver 2
Version: any game version
Date   : 2024-07-20
Author : (Discord)Sakuno

This script maybe freezing the cheat engine by few seconds when enabling.
Function: Replace the RESUPPLY POD slot 0 to super credit!
}
{$lua}
function HellpodDataReplacer0()
gHellpodDataAddr=AOBScan("79 75 4F 01 CA 13 49 A9 B2 50 46 93", '-W')
  if (gHellpodDataAddr == nil) then
     return
  end
  registerSymbol("HellpodDataAddr", gHellpodDataAddr[1])
gHellpodDataAddr.destroy()
end
HellpodDataReplacer0()

{$asm}

HellpodDataAddr: // ItemID
db 06 35 53 54 ED 03 86 81
//medals db 88 6F 72 13 95 D9 7B 14


[DISABLE]

HellpodDataAddr: // ItemID
db 79 75 4F 01 CA 13 49 A9
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols>
    <SymbolEntry>
      <Name>fSpeed</Name>
      <Address>1B75B3B0000</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pWeapon</Name>
      <Address>1B75B3B0010</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>pFirerate</Name>
      <Address>1B75B3B0020</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>AvatarClimbAddr</Name>
      <Address>1B2BFB2606E</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>HellpodDataAddr</Name>
      <Address>1B2BF172D1A</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>wpnsdamage_anchor_address</Name>
      <Address>[game.dll + 02123B28]</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>projectile_anchor_address</Name>
      <Address>[game.dll + 02125098]</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>status_eff_anchor_address</Name>
      <Address>[game.dll + 021236E8]</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>explosives_anchor_address</Name>
      <Address>[game.dll + 021284F8]</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>beamweapns_anchor_address</Name>
      <Address>[game.dll + 021252B0]</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>arcwpn_anchor_address</Name>
      <Address>[game.dll + 021239F0]</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>psvbns_anchor_address</Name>
      <Address>[[game.dll + 01AA4E08] + A8] + 1C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>strgm_supp_turret_address_pt1</Name>
      <Address>[game.dll + 02127308]</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>stratagem_weapons_address_pt1</Name>
      <Address>[game.dll + 02127140]</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>strgm_eaglestrike_address_pt1</Name>
      <Address>[game.dll + 02127160]</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>stratgem_autotrrt_address_pt1</Name>
      <Address>[game.dll + 02127218]</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>stratgem_backpack_address_pt1</Name>
      <Address>[game.dll + 021272F0]</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>stratagrm_orbital_address_pt1</Name>
      <Address>[game.dll + 02127358]</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>stratagrm_carmecs_address_pt1</Name>
      <Address>[game.dll + 02127310]</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>CountProjWpnCompData</Name>
      <Address>[["game.dll"+01AA4F20] + 6DF8]</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>TagsLoadoutCompntData</Name>
      <Address>[["game.dll"+01AA4F20] + 66D8] + 10</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>CountBombardCompData</Name>
      <Address>[["game.dll"+01AA4F20] + 6B20] + 30</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>CountWpnMagazineData</Name>
      <Address>[["game.dll"+01AA4F20] + 6658]</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>CountWpnRludCompData</Name>
      <Address>[["game.dll"+01AA4F20] + 69B0]</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>CountWpnRndsCompData</Name>
      <Address>[["game.dll"+01AA4F20] + 69D0]</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>EntityDeltas00</Name>
      <Address>[["game.dll"+01AA4F20] + 5E10]</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>EntityDeltas</Name>
      <Address>[["game.dll"+01AA4F20] + 5E10] + 7C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>ShieldValsCompData</Name>
      <Address>[["game.dll"+01AA4F20] + 6918] + 10</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>RechargeCompData</Name>
      <Address>[["game.dll"+01AA4F20] + 6940]</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>CountWpnDataCompData</Name>
      <Address>[["game.dll"+01AA4F20] + 6CF8]</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>CountWpnCstmCompData</Name>
      <Address>[["game.dll"+01AA4F20] + 6E10] + 40</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>CountHealthCompData</Name>
      <Address>[["game.dll"+01AA4F20] + 6CA8] + 10</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>CountWpnHeatCompData</Name>
      <Address>[["game.dll"+01AA4F20] + 6DD0] + 10</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>CountWpnArcCompData</Name>
      <Address>[["game.dll"+01AA4F20] + 6DD8]</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>CountBeamCompData</Name>
      <Address>[["game.dll"+01AA4F20] + 6DF0] + 20</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>HPCompData</Name>
      <Address>[["game.dll"+01AA4F20] + 6B10]</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>UnitCompData</Name>
      <Address>[["game.dll"+01AA4F20] + 68E0] + 10</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>AvatarCompData</Name>
      <Address>[["game.dll"+01AA4F20] + 6CE0] + 3A0 - 37C</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>ValuesProjWpnCompData</Name>
      <Address>CountProjWpnCompData + 1660</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>ValuesWpnRndsCompData</Name>
      <Address>CountWpnRndsCompData + 0180</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>ValuesWpnRludCompData</Name>
      <Address>CountWpnRludCompData + 1380</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>ValuesWpnMagazineData</Name>
      <Address>CountWpnMagazineData + 16E0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>ValuesWpnHeatCompData</Name>
      <Address>CountWpnHeatCompData + 01D0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>ValuesBombardCompData</Name>
      <Address>CountBombardCompData  + 01F0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>ValuesWpnCstmCompData</Name>
      <Address>CountWpnCstmCompData  + 0EC0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>ValuesWpnDataCompData</Name>
      <Address>CountWpnDataCompData  + 1D80</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>InitTagsLoadout</Name>
      <Address>TagsLoadoutCompntData + 0ED0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>ValuesHealthCompData</Name>
      <Address>CountHealthCompData  + 2C50</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>ValuesHellpodLifeTimeData</Name>
      <Address>HpCompData + 0BA0</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>ValuesUnitCompData</Name>
      <Address>UnitCompData + 9650</Address>
    </SymbolEntry>
    <SymbolEntry>
      <Name>ValuesShieldValsCompData</Name>
      <Address>ShieldValsCompData + 0110</Address>
    </SymbolEntry>
  </UserdefinedSymbols>
  <LuaScript>OpenProcess("helldivers2.exe")
</LuaScript>
</CheatTable>
